{
  "grammarEntries" : [ {
    "entry" : "to_ausdenken",
    "id" : 1,
    "Entry" : "to_ausdenken",
    "syntacticFrame" : "VP",
    "rules" : [ {
      "grammarRuleNo" : 1,
      "sentTemplate" : "PERSON_CAUSE",
      "sentences" : [ "wer denkt <NP{domain,dbo:creator}> aus?", "wer hat <NP{domain,dbo:creator}> ausgedacht?", "wer hat sich <NP{domain,dbo:creator}> ausgedacht?", "wer ist <NP{domain,dbo:creator}> ausgedacht?" ],
      "nonTerminal" : "<NP{domain,dbo:creator}>",
      "nonTerminalSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:creator ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?objOfProp WHERE {?subjOfProp dbo:creator ?objOfProp.}"
    }, {
      "grammarRuleNo" : 2,
      "sentTemplate" : "PERSON_CAUSE",
      "sentences" : [ "was wird von <NP{range,dbo:creator}> ausgedacht?", "welcher Fernsehserie wird von <NP{range,dbo:creator}> ausgedacht?" ],
      "nonTerminal" : "<NP{range,dbo:creator}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:creator ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:creator ?objOfProp.}"
    }, {
      "grammarRuleNo" : 3,
      "sentTemplate" : "HOW_MANY_THING_BACKWARD",
      "sentences" : [ ],
      "nonTerminal" : "<NP{range,dbo:creator}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:creator ?objOfProp.}",
      "answerSparqlQuery" : "SELECT Count(?subjOfProp) WHERE {?subjOfProp dbo:creator ?objOfProp.}"
    }, {
      "grammarRuleNo" : 4,
      "sentTemplate" : "PERSON_CAUSE",
      "sentences" : [ "wer denkt <NP{domain,dbo:creator}> aus?", "wer hat <NP{domain,dbo:creator}> ausgedacht?", "wer hat sich <NP{domain,dbo:creator}> ausgedacht?", "wer ist <NP{domain,dbo:creator}> ausgedacht?" ],
      "nonTerminal" : "<NP{domain,dbo:creator}>",
      "nonTerminalSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:creator ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?objOfProp WHERE {?subjOfProp dbo:creator ?objOfProp.}"
    }, {
      "grammarRuleNo" : 5,
      "sentTemplate" : "PERSON_CAUSE",
      "sentences" : [ "was wird von <NP{range,dbo:creator}> ausgedacht?", "welcher Fernsehserie wird von <NP{range,dbo:creator}> ausgedacht?" ],
      "nonTerminal" : "<NP{range,dbo:creator}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:creator ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:creator ?objOfProp.}"
    }, {
      "grammarRuleNo" : 6,
      "sentTemplate" : "HOW_MANY_THING_BACKWARD",
      "sentences" : [ ],
      "nonTerminal" : "<NP{range,dbo:creator}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:creator ?objOfProp.}",
      "answerSparqlQuery" : "SELECT Count(?subjOfProp) WHERE {?subjOfProp dbo:creator ?objOfProp.}"
    } ]
  }, {
    "entry" : "to_beeinflussen",
    "id" : 2,
    "Entry" : "to_beeinflussen",
    "syntacticFrame" : "VP",
    "rules" : [ {
      "grammarRuleNo" : 1,
      "sentTemplate" : "PERSON_PERSON",
      "sentences" : [ "welche Kinder beeinflussen <NP{domain,dbo:influencedBy}>?", "welcher Kind beeinflusste <NP{domain,dbo:influencedBy}>?", "wer beeinflussen <NP{domain,dbo:influencedBy}>?", "wer hat <NP{domain,dbo:influencedBy}> beeinflusst?" ],
      "nonTerminal" : "<NP{domain,dbo:influencedBy}>",
      "nonTerminalSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:influencedBy ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?objOfProp WHERE {?subjOfProp dbo:influencedBy ?objOfProp.}"
    }, {
      "grammarRuleNo" : 2,
      "sentTemplate" : "PERSON_PERSON",
      "sentences" : [ "Wen hat <NP{range,dbo:influencedBy}> beeinflusst?", "Wen hatte <NP{range,dbo:influencedBy}> beeinflusst?" ],
      "nonTerminal" : "<NP{range,dbo:influencedBy}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:influencedBy ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:influencedBy ?objOfProp.}"
    }, {
      "grammarRuleNo" : 3,
      "sentTemplate" : "HOW_MANY_THING_BACKWARD",
      "sentences" : [ ],
      "nonTerminal" : "<NP{range,dbo:influencedBy}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:influencedBy ?objOfProp.}",
      "answerSparqlQuery" : "SELECT Count(?subjOfProp) WHERE {?subjOfProp dbo:influencedBy ?objOfProp.}"
    } ]
  }, {
    "entry" : "to_besteigen",
    "id" : 3,
    "Entry" : "to_besteigen",
    "syntacticFrame" : "VP",
    "rules" : [ {
      "grammarRuleNo" : 1,
      "sentTemplate" : "PERSON_CAUSE",
      "sentences" : [ "Gib mir alle von <NP{domain,dbo:firstAscentPerson}> bestiegen Berg", "Gib mir alle von <NP{domain,dbo:firstAscentPerson}> bestiegen Berge", "welche Kinder besteigen <NP{domain,dbo:firstAscentPerson}>?", "welcher Kind bestieg <NP{domain,dbo:firstAscentPerson}>?", "welcher Kind hat <NP{domain,dbo:firstAscentPerson}> bestiegen?", "wer besteigen <NP{domain,dbo:firstAscentPerson}>?", "wer hat <NP{domain,dbo:firstAscentPerson}> bestiegen?" ],
      "nonTerminal" : "<NP{domain,dbo:firstAscentPerson}>",
      "nonTerminalSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:firstAscentPerson ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?objOfProp WHERE {?subjOfProp dbo:firstAscentPerson ?objOfProp.}"
    }, {
      "grammarRuleNo" : 2,
      "sentTemplate" : "PERSON_CAUSE",
      "sentences" : [ "was war mit <NP{range,dbo:firstAscentPerson}> bestiegen?", "was wird von <NP{range,dbo:firstAscentPerson}> bestiegen?", "was wurde von <NP{range,dbo:firstAscentPerson}> bestiegen?", "welche Berge wird von <NP{range,dbo:firstAscentPerson}> bestiegen?", "welche Berge wurde von <NP{range,dbo:firstAscentPerson}> bestiegen?", "welcher Berg wird von <NP{range,dbo:firstAscentPerson}> bestiegen?", "welcher Berg wurde von <NP{range,dbo:firstAscentPerson}> bestiegen?" ],
      "nonTerminal" : "<NP{range,dbo:firstAscentPerson}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:firstAscentPerson ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:firstAscentPerson ?objOfProp.}"
    }, {
      "grammarRuleNo" : 3,
      "sentTemplate" : "HOW_MANY_THING_BACKWARD",
      "sentences" : [ ],
      "nonTerminal" : "<NP{range,dbo:firstAscentPerson}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:firstAscentPerson ?objOfProp.}",
      "answerSparqlQuery" : "SELECT Count(?subjOfProp) WHERE {?subjOfProp dbo:firstAscentPerson ?objOfProp.}"
    } ]
  }, {
    "entry" : "to_besuchen",
    "id" : 4,
    "Entry" : "to_besuchen",
    "syntacticFrame" : "VP",
    "rules" : [ {
      "grammarRuleNo" : 1,
      "sentTemplate" : "PERSON_PERSON",
      "sentences" : [ "welche Universität besuchen <NP{domain,dbo:almaMater}>?", "welcher Universität besuchte <NP{domain,dbo:almaMater}>?", "wer besuchen <NP{domain,dbo:almaMater}>?", "wer hat <NP{domain,dbo:almaMater}> besucht?" ],
      "nonTerminal" : "<NP{domain,dbo:almaMater}>",
      "nonTerminalSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:almaMater ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?objOfProp WHERE {?subjOfProp dbo:almaMater ?objOfProp.}"
    }, {
      "grammarRuleNo" : 2,
      "sentTemplate" : "PERSON_PERSON",
      "sentences" : [ "Wen hat <NP{range,dbo:almaMater}> besucht?", "Wen hatte <NP{range,dbo:almaMater}> besucht?" ],
      "nonTerminal" : "<NP{range,dbo:almaMater}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:almaMater ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:almaMater ?objOfProp.}"
    }, {
      "grammarRuleNo" : 3,
      "sentTemplate" : "HOW_MANY_THING_BACKWARD",
      "sentences" : [ ],
      "nonTerminal" : "<NP{range,dbo:almaMater}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:almaMater ?objOfProp.}",
      "answerSparqlQuery" : "SELECT Count(?subjOfProp) WHERE {?subjOfProp dbo:almaMater ?objOfProp.}"
    } ]
  }, {
    "entry" : "to_betreiben",
    "id" : 5,
    "Entry" : "to_betreiben",
    "syntacticFrame" : "VP",
    "rules" : [ {
      "grammarRuleNo" : 1,
      "sentTemplate" : "PERSON_CAUSE_SUBJECT",
      "sentences" : [ ],
      "nonTerminal" : "<NP{range,dbo:operator}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:operator ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:operator ?objOfProp.}"
    }, {
      "grammarRuleNo" : 2,
      "sentTemplate" : "PERSON_CAUSE_SUBJECT",
      "sentences" : [ "was war mit <NP{domain,dbo:operator}> betrieben?", "was wird von <NP{domain,dbo:operator}> betrieben?", "was wurde von <NP{domain,dbo:operator}> betrieben?", "welche Schiffe wird von <NP{domain,dbo:operator}> betrieben?", "welche Schiffe wurde von <NP{domain,dbo:operator}> betrieben?", "welcher Schiff wird von <NP{domain,dbo:operator}> betrieben?", "welcher Schiff wurde von <NP{domain,dbo:operator}> betrieben?" ],
      "nonTerminal" : "<NP{domain,dbo:operator}>",
      "nonTerminalSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:operator ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?objOfProp WHERE {?subjOfProp dbo:operator ?objOfProp.}"
    }, {
      "grammarRuleNo" : 3,
      "sentTemplate" : "HOW_MANY_THING_BACKWARD",
      "sentences" : [ ],
      "nonTerminal" : "<NP{domain,dbo:operator}>",
      "nonTerminalSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:operator ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?objOfProp WHERE {?subjOfProp dbo:operator ?objOfProp.}"
    }, {
      "grammarRuleNo" : 4,
      "sentTemplate" : "PERSON_CAUSE_SUBJECT",
      "sentences" : [ ],
      "nonTerminal" : "<NP{range,dbo:operator}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:operator ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:operator ?objOfProp.}"
    }, {
      "grammarRuleNo" : 5,
      "sentTemplate" : "PERSON_CAUSE_SUBJECT",
      "sentences" : [ "welche Startrampen wird von <NP{domain,dbo:operator}> betrieben?", "welche Startrampen wurde von <NP{domain,dbo:operator}> betrieben?", "welcher Startrampe wird von <NP{domain,dbo:operator}> betrieben?", "welcher Startrampe wurde von <NP{domain,dbo:operator}> betrieben?", "wer war mit <NP{domain,dbo:operator}> betrieben?", "wer wird von <NP{domain,dbo:operator}> betrieben?", "wer wurde von <NP{domain,dbo:operator}> betrieben?" ],
      "nonTerminal" : "<NP{domain,dbo:operator}>",
      "nonTerminalSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:operator ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?objOfProp WHERE {?subjOfProp dbo:operator ?objOfProp.}"
    }, {
      "grammarRuleNo" : 6,
      "sentTemplate" : "HOW_MANY_THING_BACKWARD",
      "sentences" : [ ],
      "nonTerminal" : "<NP{domain,dbo:operator}>",
      "nonTerminalSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:operator ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?objOfProp WHERE {?subjOfProp dbo:operator ?objOfProp.}"
    } ]
  }, {
    "entry" : "to_drehen",
    "id" : 6,
    "Entry" : "to_drehen",
    "syntacticFrame" : "VP",
    "rules" : [ {
      "grammarRuleNo" : 1,
      "sentTemplate" : "PERSON_CAUSE",
      "sentences" : [ "Gib mir alle von <NP{domain,dbo:director}> gedreht Film", "Gib mir alle von <NP{domain,dbo:director}> gedreht Filme", "welche Kinder drehen <NP{domain,dbo:director}>?", "welcher Kind drehte <NP{domain,dbo:director}>?", "welcher Kind hat <NP{domain,dbo:director}> gedreht?", "wer drehen <NP{domain,dbo:director}>?", "wer hat <NP{domain,dbo:director}> gedreht?" ],
      "nonTerminal" : "<NP{domain,dbo:director}>",
      "nonTerminalSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:director ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?objOfProp WHERE {?subjOfProp dbo:director ?objOfProp.}"
    }, {
      "grammarRuleNo" : 2,
      "sentTemplate" : "PERSON_CAUSE",
      "sentences" : [ "was war mit <NP{range,dbo:director}> gedreht?", "was wird von <NP{range,dbo:director}> gedreht?", "was wurde von <NP{range,dbo:director}> gedreht?", "welche Filme wird von <NP{range,dbo:director}> gedreht?", "welche Filme wurde von <NP{range,dbo:director}> gedreht?", "welcher Film wird von <NP{range,dbo:director}> gedreht?", "welcher Film wurde von <NP{range,dbo:director}> gedreht?" ],
      "nonTerminal" : "<NP{range,dbo:director}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:director ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:director ?objOfProp.}"
    }, {
      "grammarRuleNo" : 3,
      "sentTemplate" : "HOW_MANY_THING_BACKWARD",
      "sentences" : [ ],
      "nonTerminal" : "<NP{range,dbo:director}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:director ?objOfProp.}",
      "answerSparqlQuery" : "SELECT Count(?subjOfProp) WHERE {?subjOfProp dbo:director ?objOfProp.}"
    } ]
  }, {
    "entry" : "to_entdecken",
    "id" : 7,
    "Entry" : "to_entdecken",
    "syntacticFrame" : "VP",
    "rules" : [ {
      "grammarRuleNo" : 1,
      "sentTemplate" : "PERSON_CAUSE",
      "sentences" : [ "Gib mir alle von <NP{domain,dbo:discoverer}> entdeckt Himmelskörper", "welche Kinder entdecken <NP{domain,dbo:discoverer}>?", "welcher Kind entdeckte <NP{domain,dbo:discoverer}>?", "welcher Kind hat <NP{domain,dbo:discoverer}> entdeckt?", "wer entdecken <NP{domain,dbo:discoverer}>?", "wer hat <NP{domain,dbo:discoverer}> entdeckt?" ],
      "nonTerminal" : "<NP{domain,dbo:discoverer}>",
      "nonTerminalSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:discoverer ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?objOfProp WHERE {?subjOfProp dbo:discoverer ?objOfProp.}"
    }, {
      "grammarRuleNo" : 2,
      "sentTemplate" : "PERSON_CAUSE",
      "sentences" : [ "was war mit <NP{range,dbo:discoverer}> entdeckt?", "was wird von <NP{range,dbo:discoverer}> entdeckt?", "was wurde von <NP{range,dbo:discoverer}> entdeckt?", "welche Himmelskörper wird von <NP{range,dbo:discoverer}> entdeckt?", "welche Himmelskörper wurde von <NP{range,dbo:discoverer}> entdeckt?", "welcher Himmelskörper wird von <NP{range,dbo:discoverer}> entdeckt?", "welcher Himmelskörper wurde von <NP{range,dbo:discoverer}> entdeckt?" ],
      "nonTerminal" : "<NP{range,dbo:discoverer}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:discoverer ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:discoverer ?objOfProp.}"
    }, {
      "grammarRuleNo" : 3,
      "sentTemplate" : "HOW_MANY_THING_BACKWARD",
      "sentences" : [ ],
      "nonTerminal" : "<NP{range,dbo:discoverer}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:discoverer ?objOfProp.}",
      "answerSparqlQuery" : "SELECT Count(?subjOfProp) WHERE {?subjOfProp dbo:discoverer ?objOfProp.}"
    } ]
  }, {
    "entry" : "to_entwerfen_1",
    "id" : 8,
    "Entry" : "to_entwerfen_1",
    "syntacticFrame" : "VP",
    "rules" : [ {
      "grammarRuleNo" : 1,
      "sentTemplate" : "PERSON_CAUSE",
      "sentences" : [ "Gib mir alle von <NP{domain,dbo:architect}> entworfen Brücke", "Gib mir alle von <NP{domain,dbo:architect}> entworfen Brücken", "welche Kinder entwerfen <NP{domain,dbo:architect}>?", "welcher Kind entwarf <NP{domain,dbo:architect}>?", "welcher Kind hat <NP{domain,dbo:architect}> entworfen?", "wer entwerfen <NP{domain,dbo:architect}>?", "wer hat <NP{domain,dbo:architect}> entworfen?" ],
      "nonTerminal" : "<NP{domain,dbo:architect}>",
      "nonTerminalSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:architect ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?objOfProp WHERE {?subjOfProp dbo:architect ?objOfProp.}"
    }, {
      "grammarRuleNo" : 2,
      "sentTemplate" : "PERSON_CAUSE",
      "sentences" : [ "was war mit <NP{range,dbo:architect}> entworfen?", "was wird von <NP{range,dbo:architect}> entworfen?", "was wurde von <NP{range,dbo:architect}> entworfen?", "welche Brücken wird von <NP{range,dbo:architect}> entworfen?", "welche Brücken wurde von <NP{range,dbo:architect}> entworfen?", "welcher Brücke wird von <NP{range,dbo:architect}> entworfen?", "welcher Brücke wurde von <NP{range,dbo:architect}> entworfen?" ],
      "nonTerminal" : "<NP{range,dbo:architect}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:architect ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:architect ?objOfProp.}"
    }, {
      "grammarRuleNo" : 3,
      "sentTemplate" : "HOW_MANY_THING_BACKWARD",
      "sentences" : [ ],
      "nonTerminal" : "<NP{range,dbo:architect}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:architect ?objOfProp.}",
      "answerSparqlQuery" : "SELECT Count(?subjOfProp) WHERE {?subjOfProp dbo:architect ?objOfProp.}"
    } ]
  }, {
    "entry" : "to_entwerfen_2",
    "id" : 9,
    "Entry" : "to_entwerfen_2",
    "syntacticFrame" : "VP",
    "rules" : [ {
      "grammarRuleNo" : 1,
      "sentTemplate" : "PERSON_CAUSE",
      "sentences" : [ "Gib mir alle von <NP{domain,dbo:creator}> entworfen Fernsehserie", "Gib mir alle von <NP{domain,dbo:creator}> entworfen Fernsehserien", "welche Agenten entwerfen <NP{domain,dbo:creator}>?", "welcher agents entwarf <NP{domain,dbo:creator}>?", "welcher agents hat <NP{domain,dbo:creator}> entworfen?", "wer entwerfen <NP{domain,dbo:creator}>?", "wer hat <NP{domain,dbo:creator}> entworfen?" ],
      "nonTerminal" : "<NP{domain,dbo:creator}>",
      "nonTerminalSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:creator ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?objOfProp WHERE {?subjOfProp dbo:creator ?objOfProp.}"
    }, {
      "grammarRuleNo" : 2,
      "sentTemplate" : "PERSON_CAUSE",
      "sentences" : [ "was war mit <NP{range,dbo:creator}> entworfen?", "was wird von <NP{range,dbo:creator}> entworfen?", "was wurde von <NP{range,dbo:creator}> entworfen?", "welche Fernsehserien wird von <NP{range,dbo:creator}> entworfen?", "welche Fernsehserien wurde von <NP{range,dbo:creator}> entworfen?", "welcher Fernsehserie wird von <NP{range,dbo:creator}> entworfen?", "welcher Fernsehserie wurde von <NP{range,dbo:creator}> entworfen?" ],
      "nonTerminal" : "<NP{range,dbo:creator}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:creator ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:creator ?objOfProp.}"
    }, {
      "grammarRuleNo" : 3,
      "sentTemplate" : "HOW_MANY_THING_BACKWARD",
      "sentences" : [ ],
      "nonTerminal" : "<NP{range,dbo:creator}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:creator ?objOfProp.}",
      "answerSparqlQuery" : "SELECT Count(?subjOfProp) WHERE {?subjOfProp dbo:creator ?objOfProp.}"
    } ]
  }, {
    "entry" : "to_entwerfen_3",
    "id" : 10,
    "Entry" : "to_entwerfen_3",
    "syntacticFrame" : "VP",
    "rules" : [ {
      "grammarRuleNo" : 1,
      "sentTemplate" : "PERSON_CAUSE",
      "sentences" : [ "Gib mir alle von <NP{domain,dbo:author}> entworfen Website", "Gib mir alle von <NP{domain,dbo:author}> entworfen Websites", "welche Kinder entwerfen <NP{domain,dbo:author}>?", "welcher Kind entwarf <NP{domain,dbo:author}>?", "welcher Kind hat <NP{domain,dbo:author}> entworfen?", "wer entwerfen <NP{domain,dbo:author}>?", "wer hat <NP{domain,dbo:author}> entworfen?" ],
      "nonTerminal" : "<NP{domain,dbo:author}>",
      "nonTerminalSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:author ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?objOfProp WHERE {?subjOfProp dbo:author ?objOfProp.}"
    }, {
      "grammarRuleNo" : 2,
      "sentTemplate" : "PERSON_CAUSE",
      "sentences" : [ "was war mit <NP{range,dbo:author}> entworfen?", "was wird von <NP{range,dbo:author}> entworfen?", "was wurde von <NP{range,dbo:author}> entworfen?", "welche Websites wird von <NP{range,dbo:author}> entworfen?", "welche Websites wurde von <NP{range,dbo:author}> entworfen?", "welcher Website wird von <NP{range,dbo:author}> entworfen?", "welcher Website wurde von <NP{range,dbo:author}> entworfen?" ],
      "nonTerminal" : "<NP{range,dbo:author}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:author ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:author ?objOfProp.}"
    }, {
      "grammarRuleNo" : 3,
      "sentTemplate" : "HOW_MANY_THING_BACKWARD",
      "sentences" : [ ],
      "nonTerminal" : "<NP{range,dbo:author}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:author ?objOfProp.}",
      "answerSparqlQuery" : "SELECT Count(?subjOfProp) WHERE {?subjOfProp dbo:author ?objOfProp.}"
    } ]
  }, {
    "entry" : "to_entwickeln",
    "id" : 11,
    "Entry" : "to_entwickeln",
    "syntacticFrame" : "VP",
    "rules" : [ {
      "grammarRuleNo" : 1,
      "sentTemplate" : "PERSON_CAUSE_SUBJECT",
      "sentences" : [ ],
      "nonTerminal" : "<NP{range,dbo:product}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:product ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:product ?objOfProp.}"
    }, {
      "grammarRuleNo" : 2,
      "sentTemplate" : "PERSON_CAUSE_SUBJECT",
      "sentences" : [ "was war mit <NP{domain,dbo:product}> entwickelt?", "was wird von <NP{domain,dbo:product}> entwickelt?", "was wurde von <NP{domain,dbo:product}> entwickelt?", "welche Schiffe wird von <NP{domain,dbo:product}> entwickelt?", "welche Schiffe wurde von <NP{domain,dbo:product}> entwickelt?", "welcher Schiff wird von <NP{domain,dbo:product}> entwickelt?", "welcher Schiff wurde von <NP{domain,dbo:product}> entwickelt?" ],
      "nonTerminal" : "<NP{domain,dbo:product}>",
      "nonTerminalSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:product ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?objOfProp WHERE {?subjOfProp dbo:product ?objOfProp.}"
    }, {
      "grammarRuleNo" : 3,
      "sentTemplate" : "HOW_MANY_THING_BACKWARD",
      "sentences" : [ ],
      "nonTerminal" : "<NP{domain,dbo:product}>",
      "nonTerminalSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:product ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?objOfProp WHERE {?subjOfProp dbo:product ?objOfProp.}"
    } ]
  }, {
    "entry" : "to_erfinden",
    "id" : 12,
    "Entry" : "to_erfinden",
    "syntacticFrame" : "VP",
    "rules" : [ {
      "grammarRuleNo" : 1,
      "sentTemplate" : "PERSON_CAUSE",
      "sentences" : [ "Gib mir alle von <NP{domain,dbo:creator}> erfunden Fernsehserie", "Gib mir alle von <NP{domain,dbo:creator}> erfunden Fernsehserien", "welche Kinder erfinden <NP{domain,dbo:creator}>?", "welcher Kind erfand <NP{domain,dbo:creator}>?", "welcher Kind hat <NP{domain,dbo:creator}> erfunden?", "wer erfinden <NP{domain,dbo:creator}>?", "wer hat <NP{domain,dbo:creator}> erfunden?" ],
      "nonTerminal" : "<NP{domain,dbo:creator}>",
      "nonTerminalSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:creator ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?objOfProp WHERE {?subjOfProp dbo:creator ?objOfProp.}"
    }, {
      "grammarRuleNo" : 2,
      "sentTemplate" : "PERSON_CAUSE",
      "sentences" : [ "was war mit <NP{range,dbo:creator}> erfunden?", "was wird von <NP{range,dbo:creator}> erfunden?", "was wurde von <NP{range,dbo:creator}> erfunden?", "welche Fernsehserien wird von <NP{range,dbo:creator}> erfunden?", "welche Fernsehserien wurde von <NP{range,dbo:creator}> erfunden?", "welcher Fernsehserie wird von <NP{range,dbo:creator}> erfunden?", "welcher Fernsehserie wurde von <NP{range,dbo:creator}> erfunden?" ],
      "nonTerminal" : "<NP{range,dbo:creator}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:creator ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:creator ?objOfProp.}"
    }, {
      "grammarRuleNo" : 3,
      "sentTemplate" : "HOW_MANY_THING_BACKWARD",
      "sentences" : [ ],
      "nonTerminal" : "<NP{range,dbo:creator}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:creator ?objOfProp.}",
      "answerSparqlQuery" : "SELECT Count(?subjOfProp) WHERE {?subjOfProp dbo:creator ?objOfProp.}"
    } ]
  }, {
    "entry" : "to_gewinnen",
    "id" : 13,
    "Entry" : "to_gewinnen",
    "syntacticFrame" : "VP",
    "rules" : [ {
      "grammarRuleNo" : 1,
      "sentTemplate" : "PERSON_CAUSE",
      "sentences" : [ "Gib mir alle von <NP{domain,dbo:award}> gewonnen Wissenschaftlerin", "was gewinnen <NP{domain,dbo:award}>?", "was hat <NP{domain,dbo:award}> gewonnen?", "welche Preise gewinnen <NP{domain,dbo:award}>?", "welcher Preis gewann <NP{domain,dbo:award}>?", "welcher Preis hat <NP{domain,dbo:award}> gewonnen?" ],
      "nonTerminal" : "<NP{domain,dbo:award}>",
      "nonTerminalSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:award ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?objOfProp WHERE {?subjOfProp dbo:award ?objOfProp.}"
    }, {
      "grammarRuleNo" : 2,
      "sentTemplate" : "PERSON_CAUSE",
      "sentences" : [ "welche Wissenschaftlerin wird von <NP{range,dbo:award}> gewonnen?", "welche Wissenschaftlerin wurde von <NP{range,dbo:award}> gewonnen?", "welcher Wissenschaftlerin wird von <NP{range,dbo:award}> gewonnen?", "welcher Wissenschaftlerin wurde von <NP{range,dbo:award}> gewonnen?", "wer war mit <NP{range,dbo:award}> gewonnen?", "wer wird von <NP{range,dbo:award}> gewonnen?", "wer wurde von <NP{range,dbo:award}> gewonnen?" ],
      "nonTerminal" : "<NP{range,dbo:award}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:award ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:award ?objOfProp.}"
    }, {
      "grammarRuleNo" : 3,
      "sentTemplate" : "HOW_MANY_THING_BACKWARD",
      "sentences" : [ ],
      "nonTerminal" : "<NP{range,dbo:award}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:award ?objOfProp.}",
      "answerSparqlQuery" : "SELECT Count(?subjOfProp) WHERE {?subjOfProp dbo:award ?objOfProp.}"
    } ]
  }, {
    "entry" : "to_gründen_1",
    "id" : 14,
    "Entry" : "to_gründen_1",
    "syntacticFrame" : "VP",
    "rules" : [ {
      "grammarRuleNo" : 1,
      "sentTemplate" : "PERSON_PERSON",
      "sentences" : [ "welche Papst gründen <NP{range,dbo:foundedBy}>?", "welcher Papst gründete <NP{range,dbo:foundedBy}>?", "wer gründen <NP{range,dbo:foundedBy}>?", "wer hat <NP{range,dbo:foundedBy}> gegründet?" ],
      "nonTerminal" : "<NP{range,dbo:foundedBy}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:foundedBy ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:foundedBy ?objOfProp.}"
    }, {
      "grammarRuleNo" : 2,
      "sentTemplate" : "PERSON_PERSON",
      "sentences" : [ "Wen hat <NP{domain,dbo:foundedBy}> gegründet?", "Wen hatte <NP{domain,dbo:foundedBy}> gegründet?" ],
      "nonTerminal" : "<NP{domain,dbo:foundedBy}>",
      "nonTerminalSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:foundedBy ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?objOfProp WHERE {?subjOfProp dbo:foundedBy ?objOfProp.}"
    }, {
      "grammarRuleNo" : 3,
      "sentTemplate" : "HOW_MANY_THING_BACKWARD",
      "sentences" : [ ],
      "nonTerminal" : "<NP{domain,dbo:foundedBy}>",
      "nonTerminalSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:foundedBy ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?objOfProp WHERE {?subjOfProp dbo:foundedBy ?objOfProp.}"
    } ]
  }, {
    "entry" : "to_gründen_2",
    "id" : 15,
    "Entry" : "to_gründen_2",
    "syntacticFrame" : "VP",
    "rules" : [ {
      "grammarRuleNo" : 1,
      "sentTemplate" : "PERSON_CAUSE",
      "sentences" : [ "Gib mir alle von <NP{domain,dbo:author}> gegründet Website", "Gib mir alle von <NP{domain,dbo:author}> gegründet Websites", "welche Agenten gründen <NP{domain,dbo:author}>?", "welcher agents gründete <NP{domain,dbo:author}>?", "welcher agents hat <NP{domain,dbo:author}> gegründet?", "wer gründen <NP{domain,dbo:author}>?", "wer hat <NP{domain,dbo:author}> gegründet?" ],
      "nonTerminal" : "<NP{domain,dbo:author}>",
      "nonTerminalSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:author ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?objOfProp WHERE {?subjOfProp dbo:author ?objOfProp.}"
    }, {
      "grammarRuleNo" : 2,
      "sentTemplate" : "PERSON_CAUSE",
      "sentences" : [ "was war mit <NP{range,dbo:author}> gegründet?", "was wird von <NP{range,dbo:author}> gegründet?", "was wurde von <NP{range,dbo:author}> gegründet?", "welche Websites wird von <NP{range,dbo:author}> gegründet?", "welche Websites wurde von <NP{range,dbo:author}> gegründet?", "welcher Website wird von <NP{range,dbo:author}> gegründet?", "welcher Website wurde von <NP{range,dbo:author}> gegründet?" ],
      "nonTerminal" : "<NP{range,dbo:author}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:author ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:author ?objOfProp.}"
    }, {
      "grammarRuleNo" : 3,
      "sentTemplate" : "HOW_MANY_THING_BACKWARD",
      "sentences" : [ ],
      "nonTerminal" : "<NP{range,dbo:author}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:author ?objOfProp.}",
      "answerSparqlQuery" : "SELECT Count(?subjOfProp) WHERE {?subjOfProp dbo:author ?objOfProp.}"
    } ]
  }, {
    "entry" : "to_gründen_3",
    "id" : 16,
    "Entry" : "to_gründen_3",
    "syntacticFrame" : "VP",
    "rules" : [ {
      "grammarRuleNo" : 1,
      "sentTemplate" : "PERSON_CAUSE",
      "sentences" : [ "Gib mir alle von <NP{domain,dbo:founder}> gegründet Herausgeber", "welche Kinder gründen <NP{domain,dbo:founder}>?", "welcher Kind gründete <NP{domain,dbo:founder}>?", "welcher Kind hat <NP{domain,dbo:founder}> gegründet?", "wer gründen <NP{domain,dbo:founder}>?", "wer hat <NP{domain,dbo:founder}> gegründet?" ],
      "nonTerminal" : "<NP{domain,dbo:founder}>",
      "nonTerminalSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:founder ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?objOfProp WHERE {?subjOfProp dbo:founder ?objOfProp.}"
    }, {
      "grammarRuleNo" : 2,
      "sentTemplate" : "PERSON_CAUSE",
      "sentences" : [ "was war mit <NP{range,dbo:founder}> gegründet?", "was wird von <NP{range,dbo:founder}> gegründet?", "was wurde von <NP{range,dbo:founder}> gegründet?", "welche Herausgeber wird von <NP{range,dbo:founder}> gegründet?", "welche Herausgeber wurde von <NP{range,dbo:founder}> gegründet?", "welcher Herausgeber wird von <NP{range,dbo:founder}> gegründet?", "welcher Herausgeber wurde von <NP{range,dbo:founder}> gegründet?" ],
      "nonTerminal" : "<NP{range,dbo:founder}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:founder ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:founder ?objOfProp.}"
    }, {
      "grammarRuleNo" : 3,
      "sentTemplate" : "HOW_MANY_THING_BACKWARD",
      "sentences" : [ ],
      "nonTerminal" : "<NP{range,dbo:founder}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:founder ?objOfProp.}",
      "answerSparqlQuery" : "SELECT Count(?subjOfProp) WHERE {?subjOfProp dbo:founder ?objOfProp.}"
    } ]
  }, {
    "entry" : "to_heiraten",
    "id" : 17,
    "Entry" : "to_heiraten",
    "syntacticFrame" : "VP",
    "rules" : [ {
      "grammarRuleNo" : 1,
      "sentTemplate" : "PERSON_PERSON",
      "sentences" : [ "welche Kinder heiraten <NP{domain,dbo:spouse}>?", "welcher Kind heiratete <NP{domain,dbo:spouse}>?", "wer hat <NP{domain,dbo:spouse}> geheiratet?", "wer heiraten <NP{domain,dbo:spouse}>?" ],
      "nonTerminal" : "<NP{domain,dbo:spouse}>",
      "nonTerminalSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:spouse ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?objOfProp WHERE {?subjOfProp dbo:spouse ?objOfProp.}"
    }, {
      "grammarRuleNo" : 2,
      "sentTemplate" : "PERSON_PERSON",
      "sentences" : [ "Wen hat <NP{range,dbo:spouse}> geheiratet?", "Wen hatte <NP{range,dbo:spouse}> geheiratet?" ],
      "nonTerminal" : "<NP{range,dbo:spouse}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:spouse ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:spouse ?objOfProp.}"
    }, {
      "grammarRuleNo" : 3,
      "sentTemplate" : "HOW_MANY_THING_BACKWARD",
      "sentences" : [ ],
      "nonTerminal" : "<NP{range,dbo:spouse}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:spouse ?objOfProp.}",
      "answerSparqlQuery" : "SELECT Count(?subjOfProp) WHERE {?subjOfProp dbo:spouse ?objOfProp.}"
    } ]
  }, {
    "entry" : "to_inspirieren",
    "id" : 18,
    "Entry" : "to_inspirieren",
    "syntacticFrame" : "VP",
    "rules" : [ {
      "grammarRuleNo" : 1,
      "sentTemplate" : "PERSON_PERSON",
      "sentences" : [ "welche Künstler inspirieren <NP{range,dbo:influenced}>?", "welcher Künstler inspirierte <NP{range,dbo:influenced}>?", "wer hat <NP{range,dbo:influenced}> insipriert?", "wer inspirieren <NP{range,dbo:influenced}>?" ],
      "nonTerminal" : "<NP{range,dbo:influenced}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:influenced ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:influenced ?objOfProp.}"
    }, {
      "grammarRuleNo" : 2,
      "sentTemplate" : "PERSON_PERSON",
      "sentences" : [ "Wen hat <NP{domain,dbo:influenced}> insipriert?", "Wen hatte <NP{domain,dbo:influenced}> insipriert?" ],
      "nonTerminal" : "<NP{domain,dbo:influenced}>",
      "nonTerminalSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:influenced ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?objOfProp WHERE {?subjOfProp dbo:influenced ?objOfProp.}"
    }, {
      "grammarRuleNo" : 3,
      "sentTemplate" : "HOW_MANY_THING_BACKWARD",
      "sentences" : [ ],
      "nonTerminal" : "<NP{domain,dbo:influenced}>",
      "nonTerminalSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:influenced ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?objOfProp WHERE {?subjOfProp dbo:influenced ?objOfProp.}"
    } ]
  }, {
    "entry" : "to_komponieren",
    "id" : 19,
    "Entry" : "to_komponieren",
    "syntacticFrame" : "VP",
    "rules" : [ {
      "grammarRuleNo" : 1,
      "sentTemplate" : "PERSON_CAUSE",
      "sentences" : [ "Gib mir alle von <NP{domain,dbo:musicComposer}> komponiert Film", "Gib mir alle von <NP{domain,dbo:musicComposer}> komponiert Filme", "welche Kinder komponieren <NP{domain,dbo:musicComposer}>?", "welcher Kind hat <NP{domain,dbo:musicComposer}> komponiert?", "welcher Kind komponierte <NP{domain,dbo:musicComposer}>?", "wer hat <NP{domain,dbo:musicComposer}> komponiert?", "wer komponieren <NP{domain,dbo:musicComposer}>?" ],
      "nonTerminal" : "<NP{domain,dbo:musicComposer}>",
      "nonTerminalSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:musicComposer ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?objOfProp WHERE {?subjOfProp dbo:musicComposer ?objOfProp.}"
    }, {
      "grammarRuleNo" : 2,
      "sentTemplate" : "PERSON_CAUSE",
      "sentences" : [ "was war mit <NP{range,dbo:musicComposer}> komponiert?", "was wird von <NP{range,dbo:musicComposer}> komponiert?", "was wurde von <NP{range,dbo:musicComposer}> komponiert?", "welche Filme wird von <NP{range,dbo:musicComposer}> komponiert?", "welche Filme wurde von <NP{range,dbo:musicComposer}> komponiert?", "welcher Film wird von <NP{range,dbo:musicComposer}> komponiert?", "welcher Film wurde von <NP{range,dbo:musicComposer}> komponiert?" ],
      "nonTerminal" : "<NP{range,dbo:musicComposer}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:musicComposer ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:musicComposer ?objOfProp.}"
    }, {
      "grammarRuleNo" : 3,
      "sentTemplate" : "HOW_MANY_THING_BACKWARD",
      "sentences" : [ ],
      "nonTerminal" : "<NP{range,dbo:musicComposer}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:musicComposer ?objOfProp.}",
      "answerSparqlQuery" : "SELECT Count(?subjOfProp) WHERE {?subjOfProp dbo:musicComposer ?objOfProp.}"
    } ]
  }, {
    "entry" : "to_kosten",
    "id" : 20,
    "Entry" : "to_kosten",
    "syntacticFrame" : "VP",
    "rules" : [ {
      "grammarRuleNo" : 1,
      "sentTemplate" : "HOW_MANY_TOTAL",
      "sentences" : [ ],
      "nonTerminal" : "<NP{domain,dbo:budget}>",
      "nonTerminalSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:budget ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?objOfProp WHERE {?subjOfProp dbo:budget ?objOfProp.}"
    }, {
      "grammarRuleNo" : 2,
      "sentTemplate" : "HOW_MANY_TOTAL",
      "sentences" : [ "welcher Film hat <NP{range,dbo:budget}> gekostet?" ],
      "nonTerminal" : "<NP{range,dbo:budget}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:budget ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:budget ?objOfProp.}"
    }, {
      "grammarRuleNo" : 3,
      "sentTemplate" : "HOW_MANY_THING_BACKWARD",
      "sentences" : [ ],
      "nonTerminal" : "<NP{range,dbo:budget}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:budget ?objOfProp.}",
      "answerSparqlQuery" : "SELECT Count(?subjOfProp) WHERE {?subjOfProp dbo:budget ?objOfProp.}"
    } ]
  }, {
    "entry" : "to_malen",
    "id" : 21,
    "Entry" : "to_malen",
    "syntacticFrame" : "VP",
    "rules" : [ {
      "grammarRuleNo" : 1,
      "sentTemplate" : "PERSON_CAUSE",
      "sentences" : [ "Gib mir alle von <NP{domain,dbp:artist}> gemalt Werk", "Gib mir alle von <NP{domain,dbp:artist}> gemalt Werke", "welche Kinder malen <NP{domain,dbp:artist}>?", "welcher Kind hat <NP{domain,dbp:artist}> gemalt?", "welcher Kind malte <NP{domain,dbp:artist}>?", "wer hat <NP{domain,dbp:artist}> gemalt?", "wer malen <NP{domain,dbp:artist}>?" ],
      "nonTerminal" : "<NP{domain,dbp:artist}>",
      "nonTerminalSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbp:artist ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?objOfProp WHERE {?subjOfProp dbp:artist ?objOfProp.}"
    }, {
      "grammarRuleNo" : 2,
      "sentTemplate" : "PERSON_CAUSE",
      "sentences" : [ "was war mit <NP{range,dbp:artist}> gemalt?", "was wird von <NP{range,dbp:artist}> gemalt?", "was wurde von <NP{range,dbp:artist}> gemalt?", "welche Werke wird von <NP{range,dbp:artist}> gemalt?", "welche Werke wurde von <NP{range,dbp:artist}> gemalt?", "welcher Werk wird von <NP{range,dbp:artist}> gemalt?", "welcher Werk wurde von <NP{range,dbp:artist}> gemalt?" ],
      "nonTerminal" : "<NP{range,dbp:artist}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbp:artist ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbp:artist ?objOfProp.}"
    }, {
      "grammarRuleNo" : 3,
      "sentTemplate" : "HOW_MANY_THING_BACKWARD",
      "sentences" : [ ],
      "nonTerminal" : "<NP{range,dbp:artist}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbp:artist ?objOfProp.}",
      "answerSparqlQuery" : "SELECT Count(?subjOfProp) WHERE {?subjOfProp dbp:artist ?objOfProp.}"
    } ]
  }, {
    "entry" : "to_moderate",
    "id" : 22,
    "Entry" : "to_moderate",
    "syntacticFrame" : "VP",
    "rules" : [ {
      "grammarRuleNo" : 1,
      "sentTemplate" : "PERSON_CAUSE",
      "sentences" : [ "Gib mir alle von <NP{domain,dbo:presenter}> moderiert Fernsehserie", "Gib mir alle von <NP{domain,dbo:presenter}> moderiert Fernsehserien", "welche Kinder moderieren <NP{domain,dbo:presenter}>?", "welcher Kind hat <NP{domain,dbo:presenter}> moderiert?", "welcher Kind moderiert <NP{domain,dbo:presenter}>?", "wer hat <NP{domain,dbo:presenter}> moderiert?", "wer moderieren <NP{domain,dbo:presenter}>?" ],
      "nonTerminal" : "<NP{domain,dbo:presenter}>",
      "nonTerminalSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:presenter ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?objOfProp WHERE {?subjOfProp dbo:presenter ?objOfProp.}"
    }, {
      "grammarRuleNo" : 2,
      "sentTemplate" : "PERSON_CAUSE",
      "sentences" : [ "was war mit <NP{range,dbo:presenter}> moderiert?", "was wird von <NP{range,dbo:presenter}> moderiert?", "was wurde von <NP{range,dbo:presenter}> moderiert?", "welche Fernsehserien wird von <NP{range,dbo:presenter}> moderiert?", "welche Fernsehserien wurde von <NP{range,dbo:presenter}> moderiert?", "welcher Fernsehserie wird von <NP{range,dbo:presenter}> moderiert?", "welcher Fernsehserie wurde von <NP{range,dbo:presenter}> moderiert?" ],
      "nonTerminal" : "<NP{range,dbo:presenter}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:presenter ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:presenter ?objOfProp.}"
    }, {
      "grammarRuleNo" : 3,
      "sentTemplate" : "HOW_MANY_THING_BACKWARD",
      "sentences" : [ ],
      "nonTerminal" : "<NP{range,dbo:presenter}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:presenter ?objOfProp.}",
      "answerSparqlQuery" : "SELECT Count(?subjOfProp) WHERE {?subjOfProp dbo:presenter ?objOfProp.}"
    } ]
  }, {
    "entry" : "to_nennen",
    "id" : 23,
    "Entry" : "to_nennen",
    "syntacticFrame" : "VP",
    "rules" : [ {
      "grammarRuleNo" : 1,
      "sentTemplate" : "PERSON_CAUSE_SUBJECT",
      "sentences" : [ ],
      "nonTerminal" : "<NP{range,dbp:nickname}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbp:nickname ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbp:nickname ?objOfProp.}"
    }, {
      "grammarRuleNo" : 2,
      "sentTemplate" : "PERSON_CAUSE_SUBJECT",
      "sentences" : [ "was war mit <NP{domain,dbp:nickname}> genannt?", "was wird von <NP{domain,dbp:nickname}> genannt?", "was wurde von <NP{domain,dbp:nickname}> genannt?", "welche Kinder wird von <NP{domain,dbp:nickname}> genannt?", "welche Kinder wurde von <NP{domain,dbp:nickname}> genannt?", "welcher Kind wird von <NP{domain,dbp:nickname}> genannt?", "welcher Kind wurde von <NP{domain,dbp:nickname}> genannt?" ],
      "nonTerminal" : "<NP{domain,dbp:nickname}>",
      "nonTerminalSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbp:nickname ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?objOfProp WHERE {?subjOfProp dbp:nickname ?objOfProp.}"
    }, {
      "grammarRuleNo" : 3,
      "sentTemplate" : "HOW_MANY_THING_BACKWARD",
      "sentences" : [ ],
      "nonTerminal" : "<NP{domain,dbp:nickname}>",
      "nonTerminalSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbp:nickname ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?objOfProp WHERE {?subjOfProp dbp:nickname ?objOfProp.}"
    } ]
  }, {
    "entry" : "to_schreiben_1",
    "id" : 24,
    "Entry" : "to_schreiben_1",
    "syntacticFrame" : "VP",
    "rules" : [ {
      "grammarRuleNo" : 1,
      "sentTemplate" : "PERSON_CAUSE",
      "sentences" : [ "Gib mir alle von <NP{domain,dbo:writer}> geschrieben Lied", "Gib mir alle von <NP{domain,dbo:writer}> geschrieben Lieder", "welche Kinder schreiben <NP{domain,dbo:writer}>?", "welcher Kind hat <NP{domain,dbo:writer}> geschrieben?", "welcher Kind schrieb <NP{domain,dbo:writer}>?", "wer hat <NP{domain,dbo:writer}> geschrieben?", "wer schreiben <NP{domain,dbo:writer}>?" ],
      "nonTerminal" : "<NP{domain,dbo:writer}>",
      "nonTerminalSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:writer ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?objOfProp WHERE {?subjOfProp dbo:writer ?objOfProp.}"
    }, {
      "grammarRuleNo" : 2,
      "sentTemplate" : "PERSON_CAUSE",
      "sentences" : [ "was war mit <NP{range,dbo:writer}> geschrieben?", "was wird von <NP{range,dbo:writer}> geschrieben?", "was wurde von <NP{range,dbo:writer}> geschrieben?", "welche Lieder wird von <NP{range,dbo:writer}> geschrieben?", "welche Lieder wurde von <NP{range,dbo:writer}> geschrieben?", "welcher Lied wird von <NP{range,dbo:writer}> geschrieben?", "welcher Lied wurde von <NP{range,dbo:writer}> geschrieben?" ],
      "nonTerminal" : "<NP{range,dbo:writer}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:writer ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:writer ?objOfProp.}"
    }, {
      "grammarRuleNo" : 3,
      "sentTemplate" : "HOW_MANY_THING_BACKWARD",
      "sentences" : [ ],
      "nonTerminal" : "<NP{range,dbo:writer}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:writer ?objOfProp.}",
      "answerSparqlQuery" : "SELECT Count(?subjOfProp) WHERE {?subjOfProp dbo:writer ?objOfProp.}"
    } ]
  }, {
    "entry" : "to_schreiben_2",
    "id" : 25,
    "Entry" : "to_schreiben_2",
    "syntacticFrame" : "VP",
    "rules" : [ {
      "grammarRuleNo" : 1,
      "sentTemplate" : "PERSON_CAUSE",
      "sentences" : [ "Gib mir alle von <NP{domain,dbo:composer}> geschrieben Fernsehserie", "Gib mir alle von <NP{domain,dbo:composer}> geschrieben Fernsehserien", "welche Kinder schreiben <NP{domain,dbo:composer}>?", "welcher Kind hat <NP{domain,dbo:composer}> geschrieben?", "welcher Kind schrieb <NP{domain,dbo:composer}>?", "wer hat <NP{domain,dbo:composer}> geschrieben?", "wer schreiben <NP{domain,dbo:composer}>?" ],
      "nonTerminal" : "<NP{domain,dbo:composer}>",
      "nonTerminalSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:composer ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?objOfProp WHERE {?subjOfProp dbo:composer ?objOfProp.}"
    }, {
      "grammarRuleNo" : 2,
      "sentTemplate" : "PERSON_CAUSE",
      "sentences" : [ "was war mit <NP{range,dbo:composer}> geschrieben?", "was wird von <NP{range,dbo:composer}> geschrieben?", "was wurde von <NP{range,dbo:composer}> geschrieben?", "welche Fernsehserien wird von <NP{range,dbo:composer}> geschrieben?", "welche Fernsehserien wurde von <NP{range,dbo:composer}> geschrieben?", "welcher Fernsehserie wird von <NP{range,dbo:composer}> geschrieben?", "welcher Fernsehserie wurde von <NP{range,dbo:composer}> geschrieben?" ],
      "nonTerminal" : "<NP{range,dbo:composer}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:composer ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:composer ?objOfProp.}"
    }, {
      "grammarRuleNo" : 3,
      "sentTemplate" : "HOW_MANY_THING_BACKWARD",
      "sentences" : [ ],
      "nonTerminal" : "<NP{range,dbo:composer}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:composer ?objOfProp.}",
      "answerSparqlQuery" : "SELECT Count(?subjOfProp) WHERE {?subjOfProp dbo:composer ?objOfProp.}"
    } ]
  }, {
    "entry" : "to_schreiben_3",
    "id" : 26,
    "Entry" : "to_schreiben_3",
    "syntacticFrame" : "VP",
    "rules" : [ {
      "grammarRuleNo" : 1,
      "sentTemplate" : "PERSON_CAUSE",
      "sentences" : [ "Gib mir alle von <NP{domain,dbo:musicComposer}> geschrieben Film", "Gib mir alle von <NP{domain,dbo:musicComposer}> geschrieben Filme", "welche Kinder schreiben <NP{domain,dbo:musicComposer}>?", "welcher Kind hat <NP{domain,dbo:musicComposer}> geschrieben?", "welcher Kind schrieb <NP{domain,dbo:musicComposer}>?", "wer hat <NP{domain,dbo:musicComposer}> geschrieben?", "wer schreiben <NP{domain,dbo:musicComposer}>?" ],
      "nonTerminal" : "<NP{domain,dbo:musicComposer}>",
      "nonTerminalSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:musicComposer ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?objOfProp WHERE {?subjOfProp dbo:musicComposer ?objOfProp.}"
    }, {
      "grammarRuleNo" : 2,
      "sentTemplate" : "PERSON_CAUSE",
      "sentences" : [ "was war mit <NP{range,dbo:musicComposer}> geschrieben?", "was wird von <NP{range,dbo:musicComposer}> geschrieben?", "was wurde von <NP{range,dbo:musicComposer}> geschrieben?", "welche Filme wird von <NP{range,dbo:musicComposer}> geschrieben?", "welche Filme wurde von <NP{range,dbo:musicComposer}> geschrieben?", "welcher Film wird von <NP{range,dbo:musicComposer}> geschrieben?", "welcher Film wurde von <NP{range,dbo:musicComposer}> geschrieben?" ],
      "nonTerminal" : "<NP{range,dbo:musicComposer}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:musicComposer ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:musicComposer ?objOfProp.}"
    }, {
      "grammarRuleNo" : 3,
      "sentTemplate" : "HOW_MANY_THING_BACKWARD",
      "sentences" : [ ],
      "nonTerminal" : "<NP{range,dbo:musicComposer}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:musicComposer ?objOfProp.}",
      "answerSparqlQuery" : "SELECT Count(?subjOfProp) WHERE {?subjOfProp dbo:musicComposer ?objOfProp.}"
    } ]
  }, {
    "entry" : "to_schreiben_5",
    "id" : 27,
    "Entry" : "to_schreiben_5",
    "syntacticFrame" : "VP",
    "rules" : [ {
      "grammarRuleNo" : 1,
      "sentTemplate" : "PERSON_CAUSE",
      "sentences" : [ "Gib mir alle von <NP{domain,dbo:author}> geschrieben Person", "Gib mir alle von <NP{domain,dbo:author}> geschrieben Personen", "welche Kinder schreiben <NP{domain,dbo:author}>?", "welcher Kind hat <NP{domain,dbo:author}> geschrieben?", "welcher Kind schrieb <NP{domain,dbo:author}>?", "wer hat <NP{domain,dbo:author}> geschrieben?", "wer schreiben <NP{domain,dbo:author}>?" ],
      "nonTerminal" : "<NP{domain,dbo:author}>",
      "nonTerminalSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:author ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?objOfProp WHERE {?subjOfProp dbo:author ?objOfProp.}"
    }, {
      "grammarRuleNo" : 2,
      "sentTemplate" : "PERSON_CAUSE",
      "sentences" : [ "was war mit <NP{range,dbo:author}> geschrieben?", "was wird von <NP{range,dbo:author}> geschrieben?", "was wurde von <NP{range,dbo:author}> geschrieben?", "welche Personen wird von <NP{range,dbo:author}> geschrieben?", "welche Personen wurde von <NP{range,dbo:author}> geschrieben?", "welcher Person wird von <NP{range,dbo:author}> geschrieben?", "welcher Person wurde von <NP{range,dbo:author}> geschrieben?" ],
      "nonTerminal" : "<NP{range,dbo:author}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:author ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:author ?objOfProp.}"
    }, {
      "grammarRuleNo" : 3,
      "sentTemplate" : "HOW_MANY_THING_BACKWARD",
      "sentences" : [ ],
      "nonTerminal" : "<NP{range,dbo:author}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:author ?objOfProp.}",
      "answerSparqlQuery" : "SELECT Count(?subjOfProp) WHERE {?subjOfProp dbo:author ?objOfProp.}"
    } ]
  }, {
    "entry" : "to_spielen_1",
    "id" : 28,
    "Entry" : "to_spielen_1",
    "syntacticFrame" : "VP",
    "rules" : [ {
      "grammarRuleNo" : 1,
      "sentTemplate" : "PERSON_PERSON",
      "sentences" : [ "welche Kinder spielen <NP{domain,dbp:portrayer}>?", "welcher Kind spielte <NP{domain,dbp:portrayer}>?", "wer hat <NP{domain,dbp:portrayer}> gespielt?", "wer spielen <NP{domain,dbp:portrayer}>?" ],
      "nonTerminal" : "<NP{domain,dbp:portrayer}>",
      "nonTerminalSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbp:portrayer ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?objOfProp WHERE {?subjOfProp dbp:portrayer ?objOfProp.}"
    }, {
      "grammarRuleNo" : 2,
      "sentTemplate" : "PERSON_PERSON",
      "sentences" : [ "Wen hat <NP{range,dbp:portrayer}> gespielt?", "Wen hatte <NP{range,dbp:portrayer}> gespielt?" ],
      "nonTerminal" : "<NP{range,dbp:portrayer}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbp:portrayer ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbp:portrayer ?objOfProp.}"
    }, {
      "grammarRuleNo" : 3,
      "sentTemplate" : "HOW_MANY_THING_BACKWARD",
      "sentences" : [ ],
      "nonTerminal" : "<NP{range,dbp:portrayer}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbp:portrayer ?objOfProp.}",
      "answerSparqlQuery" : "SELECT Count(?subjOfProp) WHERE {?subjOfProp dbp:portrayer ?objOfProp.}"
    } ]
  }, {
    "entry" : "to_spielen_2",
    "id" : 29,
    "Entry" : "to_spielen_2",
    "syntacticFrame" : "VP",
    "rules" : [ {
      "grammarRuleNo" : 1,
      "sentTemplate" : "PERSON_PERSON",
      "sentences" : [ "welche Kinder spielen <NP{domain,dbp:portrayer}>?", "welcher Kind spielte <NP{domain,dbp:portrayer}>?", "wer hat <NP{domain,dbp:portrayer}> gespielt?", "wer spielen <NP{domain,dbp:portrayer}>?" ],
      "nonTerminal" : "<NP{domain,dbp:portrayer}>",
      "nonTerminalSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbp:portrayer ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?objOfProp WHERE {?subjOfProp dbp:portrayer ?objOfProp.}"
    }, {
      "grammarRuleNo" : 2,
      "sentTemplate" : "PERSON_PERSON",
      "sentences" : [ "Wen hat <NP{range,dbp:portrayer}> gespielt?", "Wen hatte <NP{range,dbp:portrayer}> gespielt?" ],
      "nonTerminal" : "<NP{range,dbp:portrayer}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbp:portrayer ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbp:portrayer ?objOfProp.}"
    }, {
      "grammarRuleNo" : 3,
      "sentTemplate" : "HOW_MANY_THING_BACKWARD",
      "sentences" : [ ],
      "nonTerminal" : "<NP{range,dbp:portrayer}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbp:portrayer ?objOfProp.}",
      "answerSparqlQuery" : "SELECT Count(?subjOfProp) WHERE {?subjOfProp dbp:portrayer ?objOfProp.}"
    } ]
  }, {
    "entry" : "to_stellen",
    "id" : 30,
    "Entry" : "to_stellen",
    "syntacticFrame" : "VP",
    "rules" : [ {
      "grammarRuleNo" : 1,
      "sentTemplate" : "PERSON_CAUSE_SUBJECT",
      "sentences" : [ ],
      "nonTerminal" : "<NP{range,dbo:product}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:product ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:product ?objOfProp.}"
    }, {
      "grammarRuleNo" : 2,
      "sentTemplate" : "PERSON_CAUSE_SUBJECT",
      "sentences" : [ "was war mit <NP{domain,dbo:product}> gestellt?", "was wird von <NP{domain,dbo:product}> gestellt?", "was wurde von <NP{domain,dbo:product}> gestellt?", "welche Schiffe wird von <NP{domain,dbo:product}> gestellt?", "welche Schiffe wurde von <NP{domain,dbo:product}> gestellt?", "welcher Schiff wird von <NP{domain,dbo:product}> gestellt?", "welcher Schiff wurde von <NP{domain,dbo:product}> gestellt?" ],
      "nonTerminal" : "<NP{domain,dbo:product}>",
      "nonTerminalSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:product ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?objOfProp WHERE {?subjOfProp dbo:product ?objOfProp.}"
    }, {
      "grammarRuleNo" : 3,
      "sentTemplate" : "HOW_MANY_THING_BACKWARD",
      "sentences" : [ ],
      "nonTerminal" : "<NP{domain,dbo:product}>",
      "nonTerminalSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:product ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?objOfProp WHERE {?subjOfProp dbo:product ?objOfProp.}"
    } ]
  }, {
    "entry" : "to_verheiraten",
    "id" : 31,
    "Entry" : "to_verheiraten",
    "syntacticFrame" : "VP",
    "rules" : [ {
      "grammarRuleNo" : 1,
      "sentTemplate" : "PERSON_PERSON",
      "sentences" : [ "welche Kinder verheiraten <NP{domain,dbo:spouse}>?", "welcher Kind verheirate <NP{domain,dbo:spouse}>?", "wer hat <NP{domain,dbo:spouse}> verheiratet?", "wer verheiraten <NP{domain,dbo:spouse}>?" ],
      "nonTerminal" : "<NP{domain,dbo:spouse}>",
      "nonTerminalSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:spouse ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?objOfProp WHERE {?subjOfProp dbo:spouse ?objOfProp.}"
    }, {
      "grammarRuleNo" : 2,
      "sentTemplate" : "PERSON_PERSON",
      "sentences" : [ "Wen hat <NP{range,dbo:spouse}> verheiratet?", "Wen hatte <NP{range,dbo:spouse}> verheiratet?" ],
      "nonTerminal" : "<NP{range,dbo:spouse}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:spouse ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:spouse ?objOfProp.}"
    }, {
      "grammarRuleNo" : 3,
      "sentTemplate" : "HOW_MANY_THING_BACKWARD",
      "sentences" : [ ],
      "nonTerminal" : "<NP{range,dbo:spouse}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:spouse ?objOfProp.}",
      "answerSparqlQuery" : "SELECT Count(?subjOfProp) WHERE {?subjOfProp dbo:spouse ?objOfProp.}"
    } ]
  }, {
    "entry" : "to_verlegen",
    "id" : 32,
    "Entry" : "to_verlegen",
    "syntacticFrame" : "VP",
    "rules" : [ {
      "grammarRuleNo" : 1,
      "sentTemplate" : "PERSON_CAUSE",
      "sentences" : [ "Gib mir alle von <NP{domain,dbo:publisher}> verlegt Werk", "Gib mir alle von <NP{domain,dbo:publisher}> verlegt Werke", "welche Kinder verlegen <NP{domain,dbo:publisher}>?", "welcher Kind hat <NP{domain,dbo:publisher}> verlegt?", "welcher Kind verlegte <NP{domain,dbo:publisher}>?", "wer hat <NP{domain,dbo:publisher}> verlegt?", "wer verlegen <NP{domain,dbo:publisher}>?" ],
      "nonTerminal" : "<NP{domain,dbo:publisher}>",
      "nonTerminalSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:publisher ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?objOfProp WHERE {?subjOfProp dbo:publisher ?objOfProp.}"
    }, {
      "grammarRuleNo" : 2,
      "sentTemplate" : "PERSON_CAUSE",
      "sentences" : [ "was war mit <NP{range,dbo:publisher}> verlegt?", "was wird von <NP{range,dbo:publisher}> verlegt?", "was wurde von <NP{range,dbo:publisher}> verlegt?", "welche Werke wird von <NP{range,dbo:publisher}> verlegt?", "welche Werke wurde von <NP{range,dbo:publisher}> verlegt?", "welcher Werk wird von <NP{range,dbo:publisher}> verlegt?", "welcher Werk wurde von <NP{range,dbo:publisher}> verlegt?" ],
      "nonTerminal" : "<NP{range,dbo:publisher}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:publisher ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:publisher ?objOfProp.}"
    }, {
      "grammarRuleNo" : 3,
      "sentTemplate" : "HOW_MANY_THING_BACKWARD",
      "sentences" : [ ],
      "nonTerminal" : "<NP{range,dbo:publisher}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:publisher ?objOfProp.}",
      "answerSparqlQuery" : "SELECT Count(?subjOfProp) WHERE {?subjOfProp dbo:publisher ?objOfProp.}"
    } ]
  }, {
    "entry" : "to_überspannen",
    "id" : 33,
    "Entry" : "to_überspannen",
    "syntacticFrame" : "VP",
    "rules" : [ {
      "grammarRuleNo" : 1,
      "sentTemplate" : "PERSON_CAUSE_SUBJECT",
      "sentences" : [ ],
      "nonTerminal" : "<NP{range,dbo:crosses}>",
      "nonTerminalSparqlQuery" : "SELECT ?objOfProp. WHERE {?subjOfProp dbo:crosses ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:crosses ?objOfProp.}"
    }, {
      "grammarRuleNo" : 2,
      "sentTemplate" : "PERSON_CAUSE_SUBJECT",
      "sentences" : [ "was war mit <NP{domain,dbo:crosses}> überspannt?", "was wird vom <NP{domain,dbo:crosses}> überspannt?", "was wurde vom <NP{domain,dbo:crosses}> überspannt?", "welche Brücken wird vom <NP{domain,dbo:crosses}> überspannt?", "welche Brücken wurde vom <NP{domain,dbo:crosses}> überspannt?", "welcher Brücke wird vom <NP{domain,dbo:crosses}> überspannt?", "welcher Brücke wurde vom <NP{domain,dbo:crosses}> überspannt?" ],
      "nonTerminal" : "<NP{domain,dbo:crosses}>",
      "nonTerminalSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:crosses ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?objOfProp WHERE {?subjOfProp dbo:crosses ?objOfProp.}"
    }, {
      "grammarRuleNo" : 3,
      "sentTemplate" : "HOW_MANY_THING_BACKWARD",
      "sentences" : [ ],
      "nonTerminal" : "<NP{domain,dbo:crosses}>",
      "nonTerminalSparqlQuery" : "SELECT ?subjOfProp WHERE {?subjOfProp dbo:crosses ?objOfProp.}",
      "answerSparqlQuery" : "SELECT ?objOfProp WHERE {?subjOfProp dbo:crosses ?objOfProp.}"
    } ]
  } ]
}