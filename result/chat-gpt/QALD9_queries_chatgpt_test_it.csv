id,question,sparql
99,In quale fuso orario si trova Salt Lake City?,"Ecco una possibile query SPARQL per ottenere il fuso orario in cui si trova Salt Lake City utilizzando DBpedia:

```
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?timezoneLabel
WHERE {
  <http://dbpedia.org/resource/Salt_Lake_City> dbp:timeZone ?timezone.
  ?timezone rdfs:label ?timezoneLabel.
  FILTER(lang(?timezoneLabel) = 'it')
}
```

Questa query recupera la proprietà ""timeZone"" di Salt Lake City da DBpedia e restituisce l'etichetta di quest'ultima in italiano."
98,Chi uccise Giulio Cesare?,"La query SPARQL per DBPedia che fornisce una risposta alla domanda ""Chi uccise Giulio Cesare?"" può essere la seguente:

```
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?assassino
WHERE {
    dbr:Giulio_Cesare dbo:deathCause ?causaMorte.
    ?causaMorte dbo:assassin ?assassino.
}
```

Nella query sopra, stiamo cercando l'assassino di Giulio Cesare. Stiamo utilizzando i prefissi `dbo` e `dbr` per abbreviare gli spazi dei nomi di DBPedia. Stiamo selezionando la variabile `?assassino` che rappresenterà il nome dell'assassino di Giulio Cesare. Nella clausola `WHERE`, stiamo cercando la risorsa di Giulio Cesare (`dbr:Giulio_Cesare`), ottenendo la causa della morte (`dbo:deathCause`) e l'assassino (`dbo:assassin`) associato a quella causa di morte.

Eseguendo questa query su DBPedia, otterremo i risultati dei possibili assassini di Giulio Cesare."
86,Che cosa è il massimo montagna in Germania? ,"SELECT ?mountain
WHERE {
    ?mountain rdf:type dbo:Mountain ;
              dbo:country dbr:Germany .
}
ORDER BY DESC(?height)
LIMIT 1"
84,Quali presidenti americani erano in carica durante la Guerra del Vietnam?,"La query SPARQL per trovare i presidenti americani in carica durante la Guerra del Vietnam su DBPedia potrebbe essere la seguente:

```
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?presidente 
WHERE {
  ?presidente rdf:type dbo:OfficeHolder ;
              dbo:office dbr:President_of_the_United_States ;
              dbo:termStart ?start ;
              dbo:termEnd ?end .
  FILTER (?start < ""1975-04-30""^^xsd:date && ?end > ""1955-01-01""^^xsd:date )
}
```

Questa query recupera tutti gli individui che sono stati presidenti degli Stati Uniti d'America (`dbo:President_of_the_United_States`) e verifica che le loro date di inizio (`dbo:termStart`) siano precedenti al 30 aprile 1975 e che le date di fine (`dbo:termEnd`) siano successive al 1 gennaio 1955, per coprire il periodo della Guerra del Vietnam. La risposta restituirà i nomi dei presidenti americani in carica durante la Guerra del Vietnam."
81,Di quale stato americano Butch Otter è governatore?,"Ecco la query SPARQL per ottenere il nome dello stato americano di cui Butch Otter è governatore:

```
SELECT ?stateLabel
WHERE {
  ?governor dbpedia-owl:wikiPageWikiLink dbr:Butch_Otter .
  ?governor dbpedia-owl:politicalLeader ?state .
  ?state rdfs:label ?stateLabel .
  FILTER(LANG(?stateLabel) = 'it')
  FILTER(CONTAINS(?stateLabel, ""stato""))
}
```

Questa query troverà l'etichetta dello stato (in italiano) di cui Butch Otter è governatore."
73,Quante medaglie d'oro ha vinto Michael Phelps alle Olimpiadi del 2008?,"PREFIX dbpedia-owl: <http://dbpedia.org/ontology/>
PREFIX dbpedia: <http://dbpedia.org/resource/>

SELECT (COUNT(?goldMedal) as ?goldMedals)
WHERE {
  ?phelps dbpedia-owl:goldMedal ?goldMedal;
          dbpedia-owl:olympics dbpedia:2008_Summer_Olympics.
}
GROUP BY ?phelps
FILTER(?phelps = dbpedia:Michael_Phelps)"
66,Quali artisti sono nati la stessa data di Rachel Stevens?,"Ecco una possibile query SPARQL per ottenere gli artisti nati nella stessa data di Rachel Stevens:

```
PREFIX dbp-ont: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?artist
WHERE {
  ?artist foaf:birthDate ?birthdate.
  FILTER(?birthdate = ""1978-04-09""^^xsd:date)
  FILTER(?artist != <http://dbpedia.org/resource/Rachel_Stevens>)
}
```

Questa query utilizza i prefissi ""dbp-ont"" per referenziare DBPedia Ontology e ""foaf"" per referenziare FOAF (Friend of a Friend). La query seleziona tutti gli individui ""?"" che hanno una data di nascita ""foaf:birthDate"" uguale alla data di nascita di Rachel Stevens (""1978-04-09"").

Si applica poi un filtro per escludere Rachel Stevens stessa dalla lista dei risultati."
64,Che cosa è il professione di Franco Herbert? ,"La domanda ""Che cosa è il professione di Franco Herbert?"" può essere tradotta in una query SPARQL per DBPedia come segue:

```
SELECT ?professione WHERE {
  dbr:Franco_Herbert dbp:professione ?professione .
}
```

Questa query troverà la professione di ""Franco Herbert"" (indicato con l'URI dbr:Franco_Herbert) utilizzando la proprietà dbp:professione. Il risultato sarà il valore della variabile ?professione."
6,I Taiko sono una serie di strumenti musicali giapponesi?,"La query SPARQL per DBpedia per la domanda ""I Taiko sono una serie di strumenti musicali giapponesi?"" potrebbe essere la seguente:

```
SELECT DISTINCT ?taiko
WHERE {
  ?taiko rdf:type dbo:MusicalInstrument .
  ?taiko dbo:location dbr:Japan .
  ?taiko rdfs:label ""Taiko""@it .
}
```

Questa query ricerca tutti gli oggetti che hanno come tipo ""MusicalInstrument"" e come luogo ""Japan"" nella base di conoscenza DBpedia. Inoltre, esegue una corrispondenza sulla label in italiano ""Taiko"" per identificare se ""Taiko"" è un oggetto della serie di strumenti musicali giapponesi. La clausola DISTINCT assicura che vengano restituiti solo risultati unici."
56,Quanti posti a sedere ha lo stadio del FC Porto,"Per ottenere il numero di posti a sedere dello stadio del FC Porto utilizzando DBPEDIA, puoi utilizzare la seguente query SPARQL:

```
SELECT ?stadium ?capacity WHERE {
  ?stadium rdf:type dbo:Stadium .
  ?stadium dbo:tenant ?team .
  ?team dbo:club dbpedia:FC_Porto .
  ?stadium dbo:capacity ?capacity .
}
```

Questa query cerca uno stadio che ha il FC Porto come tenant (cioè la squadra che utilizza lo stadio come casa) e recupera la capacità dello stadio. Il risultato sarà lo stadio con la sua capacità."
49,Quale programma frequent flyer ha la maggior parte delle compagnie aeree?,"La query SPARQL per trovare il programma frequent flyer con il maggior numero di compagnie aeree su DBPedia sarebbe la seguente:

```sparql
SELECT ?programFrequentFlyer (COUNT(?airline) as ?count)
WHERE {
   ?programFrequentFlyer rdf:type dbo:Airline_Program .
   ?programFrequentFlyer dbo:operates ?airline .
}
GROUP BY ?programFrequentFlyer
ORDER BY DESC(?count)
LIMIT 1
```

Questa query seleziona tutte le istanze di `dbo:Airline_Program` (programmi frequent flyer) su DBPedia, e associa a ciascun programma tutte le compagnie aeree (`dbo:operates`) associate ad esso. Successivamente, i risultati vengono raggruppati per programma frequent flyer e conta il numero totale di compagnie aeree per ciascun programma. Infine, i risultati sono ordinati discendentemente in base al conteggio delle compagnie aeree e viene restituito il programma frequent flyer con il maggior numero di compagnie aeree (`LIMIT 1`)."
44,Quali nazioni europee hanno una monarchia costituzionale?,"SELECT ?countryLabel 
WHERE {
  ?country rdf:type dbpedia-owl:Country ;
           dbpedia-owl:governmentType dbpedia-owl:Constitutional_monarchy ;
           dbpedia-owl:continent dbpedia:Europe .
  FILTER(langMatches(lang(?countryLabel), ""it""))
}
ORDER BY ?countryLabel"
42,Quali nazioni hanno luoghi con più di due grotte?,"La seguente query SPARQL può essere utilizzata per ottenere l'elenco delle nazioni che hanno luoghi con più di due grotte da DBPEDIA:

```
PREFIX dbpedia-owl: <http://dbpedia.org/ontology/>
PREFIX dbpedia: <http://dbpedia.org/resource/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?countryLabel 
WHERE { 
    ?place rdf:type dbpedia-owl:Place .
    ?place dbpedia-owl:country ?country .
    ?country rdf:type dbpedia-owl:Country .
    ?place dbpedia-owl:hasFeature dbpedia:Category:Caves .

    {
        SELECT ?country (COUNT(?place) AS ?numberOfCaves)
        WHERE {
            ?place dbpedia-owl:country ?country .
            ?place rdf:type dbpedia-owl:Place .
            ?place dbpedia-owl:hasFeature dbpedia:Category:Caves .
        }
        GROUP BY ?country
        HAVING (?numberOfCaves > 2)
    }
    
    SERVICE <http://dbpedia.org/sparql> {
        ?country rdfs:label ?countryLabel
        FILTER(LANG(?countryLabel) = 'it')
    }
}
```

Questa query recupera tutti i luoghi che hanno l'attributo ""Category:Caves"" e il corrispondente paese da DBPEDIA. In seguito, utilizziamo una query innestata per calcolare il numero di grotte per ogni paese e selezioniamo solo i paesi che hanno più di due grotte. Infine, utilizziamo il servizio DBPEDIA per ottenere le etichette dei paesi nella lingua italiana."
4,"Quali aeroporti si trovano in California, Stati Uniti?","La query SPARQL per ottenere l'elenco degli aeroporti situati in California, Stati Uniti, utilizzando DBPedia è la seguente:

SELECT ?airport
WHERE {
    ?airport rdf:type dbo:Airport ;
             dbo:location ?location .
    ?location rdfs:label ""California, United States""@en .
}

Nella query, stiamo cercando tutte le risorse che hanno il tipo dbo:Airport e la proprietà dbo:location corrispondente a ""California, United States"" in lingua inglese. La variabile ""?airport"" restituirà l'elenco degli aeroporti trovati."
37,Quali sono i soprannomi di San Francisco?,"PREFIX dbpedia: <http://dbpedia.org/resource/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?nicknames
WHERE {
  dbpedia:San_Francisco dbpedia-owl:nickname ?nicknames.
}"
32,Qual è il nome da nubile di Angela Merkel?,"La seguente query SPARQL restituisce il nome da nubile di Angela Merkel:

```
SELECT ?nomeDaNubile
WHERE {
  <http://dbpedia.org/resource/Angela_Merkel> <http://dbpedia.org/ontology/maidenName> ?nomeDaNubile .
}
```"
31,Chi è il sindaco di Berlino?,"Ecco la query SPARQL per ottenere il nome del sindaco di Berlino da DBpedia:

```
SELECT ?sindaco
WHERE {
  <http://dbpedia.org/resource/Berlin> <http://dbpedia.org/ontology/leader> ?sindaco.
  ?sindaco <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Mayor>.
}
```

Questa query recupera l'informazione sul sindaco di Berlino tramite le proprietà `leader` e `occupation`."
29,Quali stati dell'Unione Europea hanno introdotto l'Euro?,"La seguente query SPARQL per DBpedia restituirà l'elenco degli stati dell'Unione Europea che hanno introdotto l'Euro:

```
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dct: <http://purl.org/dc/terms/>

SELECT ?countryLabel
WHERE {
  ?country dbo:currency dbr:Euro ;
           dct:subject dbc:Member_states_of_the_European_Union .
  SERVICE <http://dbpedia.org/sparql> {
    ?country rdfs:label ?countryLabel .
  }
  FILTER (lang(?countryLabel) = ""it"")
}
```

È possibile eseguire questa query tramite l'endpoint SPARQL di DBpedia o utilizzare librerie o strumenti software che supportano SPARQL, come Apache Jena o RDF4J. La query restituirà i nomi degli stati dell'Unione Europea che hanno introdotto l'Euro nella lingua italiana."
23,Quale Software ha stato pubblicato di Significare Criceto Software? ,"La seguente query SPARQL può essere utilizzata per ottenere l'elenco dei software pubblicati da Significare Criceto Software:

```
SELECT ?software
WHERE {
  ?software dbo:developer dbr:Significare_Criceto_Software .
}
```

Questa query recupera tutte le istanze della proprietà `dbo:developer` che hanno il valore ""Significare Criceto Software"" e restituisce l'elenco dei software associati."
68,In quale stato è nato Bill Gates?,"Ecco una possibile query SPARQL per trovare lo stato in cui è nato Bill Gates su DBPedia:

```
SELECT ?birthPlaceLabel WHERE {
  dbpedia:Bill_Gates dbpedia-owl:birthPlace ?birthPlace .
  ?birthPlace dbpedia-owl:country ?country .
  ?country rdfs:label ?birthPlaceLabel .
  FILTER(lang(?birthPlaceLabel) = ""it"")
}
```

Questa query restituirà il nome dello stato in cui è nato Bill Gates in italiano."
22,Quanti nipoti aveva Jacques Cousteau?,"La query SPARQL per determinare il numero di nipoti di Jacques Cousteau in DBPEDIA è la seguente:

```sparql
SELECT (COUNT(?nipote) AS ?numero_nipoti)
WHERE {
  dbpedia:Jacques_Cousteau dbpedia-owl:grandchild ?nipote .
}
```

Questa query cercherà tutte le triple in cui Jacques Cousteau è il soggetto e la proprietà grandchild è presente. Successivamente, viene calcolato il conteggio dei nipoti e restituito come risultato nella variabile ?numero_nipoti."
214,Dammi tutti gli skateboarders professionisti di Svezia.,"Una possibile query SPARQL per ottenere gli skateboarders professionisti di Svezia da DBPedia potrebbe essere la seguente:

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>
        
SELECT DISTINCT ?skateboarder
WHERE {
  ?skateboarder a dbo:Person ;
                dbo:birthPlace dbr:Sweden ;
                dbp:sport dbr:Skateboarding .
}
```

Questa query utilizza le proprietà `dbo:Person` per identificare le persone, `dbo:birthPlace` per il luogo di nascita, `dbp:sport` per individuare gli atleti dello skateboard (`dbr:Skateboarding`) e `dbr:Sweden` per specificare la Svezia come luogo di nascita.

L'esecuzione di questa query restituirà tutti gli skateboarders professionisti di Svezia presenti in DBPedia."
210,Quali monarchi del Regno Unito erano sposati a persone tedesche?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?monarch ?monarchName ?spouse ?spouseName
WHERE {
  ?monarch rdf:type dbo:Monarch ;
           dbo:birthPlace dbr:United_Kingdom ;
           dbo:spouse ?spouse ;
           foaf:name ?monarchName .
  ?spouse rdf:type dbo:Person ;
          dbo:birthPlace dbr:Germany ;
          foaf:name ?spouseName .
}
ORDER BY ?monarchName

La query sopra restituisce i monarchi del Regno Unito che erano sposati con persone tedesche. Restituirà i nomi dei monarchi e delle loro mogli tedesche."
199,Dammi tutti i film argentini.,"La seguente query SPARQL può essere utilizzata per ottenere tutti i film argentini da DBPedia:

```
SELECT ?film
WHERE {
  ?film rdf:type dbo:Film ;
        dct:subject dbc:Films_by_country ;
        dct:subject dbc:Argentine_films .
}
```

In questa query, si sta cercando di selezionare tutte le istanze di `Film` che hanno come soggetto la categoria generale ""Films_by_country"" e la categoria specifica ""Argentine_films"". Le istanze selezionate sono rappresentate dalla variabile `?film`."
203,Come è morto Michael Jackson?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?causeOfDeath
WHERE {
   dbr:Michael_Jackson dbo:deathCause ?causeOfDeath .
}"
197,Quale stato degli Stati Uniti è stato ammesso per ultimo?,"La seguente query SPARQL restituisce l'ultimo stato degli Stati Uniti ad essere stato ammesso:

```
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dct: <http://purl.org/dc/terms/>

SELECT ?state ?date
WHERE {
  ?state dct:subject <http://dbpedia.org/resource/Category:States_of_the_United_States> .
  ?state dbo:isPartOf <http://dbpedia.org/resource/United_States> .
  ?state dbo:inception ?date .
} 
ORDER BY DESC(?date) 
LIMIT 1
```

Questa query recupera tutti gli stati degli Stati Uniti, estrae la data di inizio per ciascuno di essi e ordina i risultati in ordine decrescente (dal più recente al più vecchio) in base alla data di ammissione. Infine, viene restituito solo il risultato più recente con il limite di 1."
196,Quale classe fa il Millepede appartenere a? ,"La query SPARQL per DBPedia per rispondere alla domanda ""Quale classe fa il Millepede appartenere a?"" potrebbe essere la seguente:

SELECT ?classe WHERE {
  dbpedia:Millepede rdf:type ?classe .
}"
188,Dammi il sito internet di Forbes.,"La seguente query SPARQL può essere utilizzata per ottenere il sito internet di Forbes da DBPEDIA:

```
SELECT ?sitoInternet
WHERE {
  <http://dbpedia.org/resource/Forbes> foaf:homepage ?sitoInternet .
}
```

Questa query richiede a DBPEDIA di restituire il valore della proprietà ""foaf:homepage"" dell'entità ""Forbes"". L'URL del sito internet di Forbes sarà restituito come risultato della query."
187,Chi è il marito di Amanda Palmer?,"La query SPARQL per trovare il marito di Amanda Palmer in DBpedia potrebbe essere la seguente:

```
SELECT ?marito
WHERE {
  dbpedia-it:Amanda_Palmer dbpedia-owl:spouse ?marito.
}
```

Questa query recupera l'informazione sul marito di Amanda Palmer dal dataset DBpedia."
176,Chi dipinse il Cristo nella tempesta sul mare di Galilea?,"Ecco una possibile query SPARQL per ottenere l'artista che dipinse il dipinto ""Cristo nella tempesta sul mare di Galilea"":

```
SELECT ?painting ?artistName
WHERE {
  ?painting rdf:type dbo:Artwork ;
            rdfs:label ""Cristo nella tempesta sul mare di Galilea""@it ;
            dbo:author ?artist .
  ?artist foaf:name ?artistName .
  FILTER(langMatches(lang(?artistName), ""IT""))
}
```

Questa query recupera tutte le opere d'arte che hanno l'etichetta ""Cristo nella tempesta sul mare di Galilea"" in italiano usando la proprietà rdfs:label. Inoltre, recupera il nome dell'autore delle opere usando la proprietà dbo:author. La clausola FILTER(langMatches(lang(?artistName), ""IT"")) filtra solo i nomi degli autori in italiano.

Esegui questa query su un endpoint SPARQL di DBPEDIA per ottenere il risultato desiderato."
62,Qual è il punto più alto del Karakoram?,"La seguente query SPARQL può essere utilizzata per ottenere il punto più alto del Karakoram da DBPEDIA:

```
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?mountain ?elevation
WHERE {
  ?mountain dbo:mountainRange <http://dbpedia.org/resource/Karakoram> ;
            dbo:elevation ?elevation .
}
ORDER BY DESC(?elevation)
LIMIT 1
```

Questa query recupera il nome e l'elevazione delle montagne che appartengono al range montuoso del Karakoram, li ordina in ordine decrescente in base all'elevazione e restituisce solo il punto più alto (`LIMIT 1`)."
173,quando fatto Finlandia aderire il Stati Uniti? ,"La domanda ""Quando la Finlandia ha aderito agli Stati Uniti?"" sembra avere un'errata formulazione, in quanto la Finlandia non può aderire agli Stati Uniti. Tuttavia, se intendi sapere quando la Finlandia ha stabilito relazioni diplomatiche con gli Stati Uniti, puoi utilizzare la seguente query SPARQL per DBpedia:

```
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?date
WHERE {
  dbr:Finland dbo:diplomaticRelation ?relation .
  ?relation dbo:country dbr:United_States .
  ?relation dbo:startDate ?date .
}
```

Questa query restituirà la data di inizio delle relazioni diplomatiche tra la Finlandia e gli Stati Uniti, se disponibile nei dati di DBpedia."
168,Quali attori recitano in Big Bang Theory?,"La seguente query SPARQL restituisce i nomi degli attori che recitano nella serie TV ""Big Bang Theory"" sulla base dei dati presenti in DBPedia:

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dct: <http://purl.org/dc/terms/>

SELECT ?actorName
WHERE {
  dbr:Big_Bang_Theory dbo:starring ?actor .
  ?actor dct:subject dbr:Category:American_television_actors .
  ?actor rdfs:label ?actorName .
  FILTER (LANG(?actorName) = ""it"" || LANG(?actorName) = ""en"")
}
```

In questa query, stiamo utilizzando il prefisso `dbo` per l'ontologia di DBPedia, il prefisso `dbr` per le risorse di DBPedia e il prefisso `dct` per il vocabolario Dublin Core.

La clausola `WHERE` della query fa le seguenti operazioni:
- Trova la risorsa `dbr:Big_Bang_Theory` associata alla serie TV ""Big Bang Theory"" nell'ontologia DBPedia.
- Recupera l'attributo `dbo:starring` associato alla risorsa `dbr:Big_Bang_Theory`, che rappresenta gli attori che recitano nella serie.
- Recupera il soggetto `?actor` associato a tale attributo.
- Verifica che il soggetto `?actor` sia incluso nella categoria `dbr:Category:American_television_actors` (attori televisivi americani).
- Recupera la label `rdfs:label` associata al soggetto `?actor`.
- Applica un filtro per selezionare solo i nomi degli attori nelle lingue italiane e inglesi.

La variabile `?actorName` nella clausola `SELECT` restituirà i nomi degli attori che recitano nella serie ""Big Bang Theory"" presenti in DBPedia."
166,Quale informatico ha vinto un Oscar?,"SELECT ?informatico ?oscar WHERE {
   ?informatico dbo:award ?oscar .
   ?oscar dbo:awardTitle ""Academy Award for Scientific and Technical Achievement""@en .
}"
160,Chi ha scritto Harry Potter?,"Una possibile query SPARQL per ottenere l'autore di Harry Potter da DBPedia sarebbe la seguente:

SELECT DISTINCT ?autore
WHERE {
  ?opera dbo:author ?autore.
  ?opera dbo:abstract ?abstract.
  FILTER (lang(?abstract) = 'it' && regex(?abstract, ""Harry Potter"", ""i"")).
}
LIMIT 1

In questa query, stiamo cercando un'opera che abbia la parola ""Harry Potter"" nell'abstract in lingua italiana (lang(?abstract) = 'it'). La proprietà ""author"" (dbo:author) ci dà l'autore dell'opera. Con il LIMIT 1 stiamo limitando i risultati a solo una risposta."
158,Dammi tutti gli scrittori che hanno vinto il Premio Nobel della letteratura.,"La seguente è una query SPARQL per ottenere gli scrittori che hanno vinto il Premio Nobel della letteratura da DBpedia:

```
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?writerLabel
WHERE {
    ?writer dbo:award dbr:Nobel_Prize_in_Literature ;
            dbo:notableWork ?work .
  
    FILTER (regex(str(?writer), ""dbpedia.org/resource/"", ""i""))
  
    SERVICE <http://dbpedia.org/sparql> {
        ?writer rdfs:label ?writerLabel .
        FILTER(langMatches(lang(?writerLabel), ""en""))
    }
}
ORDER BY ?writerLabel
```

Questa query recupera gli scrittori che hanno vinto il Premio Nobel della letteratura e restituisce il loro nome in lingua inglese."
157,Dammi gli attori inglesi che hanno recitato in Lovesick.,"PREFIX dbo:<http://dbpedia.org/ontology/>
PREFIX dbr:<http://dbpedia.org/resource/>
PREFIX dbp:<http://dbpedia.org/property/>

SELECT DISTINCT ?actor
WHERE {
  ?actor dbo:birthPlace dbr:England.
  ?actor dbo:starring dbr:Lovesick.
}
"
155,che cosa è il tacca nome di Baghdad? ,"Per ottenere il tacca nome di Baghdad da DBpedia, è possibile utilizzare la seguente query SPARQL:

```
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?taccaNome
WHERE {
  <http://dbpedia.org/resource/Baghdad> dbo:alternativeName ?taccaNome.
}
```

Questa query recupera la proprietà dbo:alternativeName per la risorsa Baghdad e seleziona il suo valore ?taccaNome. Saranno restituiti tutti i tacca nomi associati a Baghdad presenti nella DBpedia."
150,In quale città è nato il presidente del Montenegro?,"Ecco la query SPARQL per DBPedia che recupera la città di nascita del presidente del Montenegro:

```
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?cittaDiNascita
WHERE {
  dbr:President_of_Montenegro dbo:birthPlace ?cittaDiNascita .
}
```

Nota: La query sopra recupera il valore della proprietà ""birthPlace"" che rappresenta la città di nascita del presidente del Montenegro."
149,Quale stato americano ha la densità di popolazione maggiore?,"La seguente query SPARQL può essere utilizzata per trovare lo stato americano con la densità di popolazione maggiore da DBpedia:

```
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?state ?populationDensity
WHERE 
{
  ?state rdf:type dbo:State .
  ?state dbp:populationDensity ?populationDensity .
  FILTER (langMatches(lang(?state), ""en"") && langMatches(lang(?populationDensity), ""en""))
}
ORDER BY DESC(?populationDensity)
LIMIT 1
```

Questa query recupera gli stati americani e la loro densità di popolazione utilizzando la proprietà ""populationDensity"" di DBpedia. Successivamente, viene effettuato un ordinamento discendente per ottenere lo stato con la densità di popolazione maggiore. Infine, viene impostato un limite di 1 per restituire solo il risultato più alto.

Si noti che la proprietà ""populationDensity"" può variare in base alle definizioni specifiche di un determinato stato o Paese, quindi potrebbe essere necessario esaminare ulteriormente i risultati per ottenere una risposta precisa alla domanda."
25,Qual è il fiume più lungo della Cina?,"La query SPARQL per ottenere il fiume più lungo della Cina da DBpedia potrebbe essere la seguente:

```
SELECT ?river ?length
WHERE {
    ?river a dbo:River ;
           dbo:country dbr:China ;
           dbo:length ?length .
}
ORDER BY DESC(?length)
LIMIT 1
```

In questa query stiamo selezionando il fiume(?river) e la sua lunghezza(?length) che si trovano in dbo:River della Cina(dbo:country dbr:China). Ordiniamo i risultati in modo discendente per la lunghezza e limitiamo il risultato a 1 per ottenere il fiume più lungo della Cina."
143,Qual è il prefisso di Berlino?,"PREFIX dbpedia-owl: <http://dbpedia.org/ontology/>
SELECT ?prefixo 
WHERE {
    dbpedia:Berlin dbpedia-owl:prefix ?prefixo .
}"
140,Quanti scienziati si sono laureati in un'Università dell'Ivy League?,"La query SPARQL per ottenere il numero di scienziati laureati in un'Università dell'Ivy League su DBpedia è la seguente:

```
SELECT (COUNT(DISTINCT ?scientist) AS ?num_scientists)
WHERE {
  ?scientist rdf:type dbpedia-owl:Scientist .
  ?scientist dbpedia-owl:almaMater ?university .
  
  FILTER(?university IN (
    <http://dbpedia.org/resource/Columbia_University>,
    <http://dbpedia.org/resource/Brown_University>,
    <http://dbpedia.org/resource/Cornell_University>,
    <http://dbpedia.org/resource/Dartmouth_College>,
    <http://dbpedia.org/resource/Harvard_University>,
    <http://dbpedia.org/resource/Princeton_University>,
    <http://dbpedia.org/resource/University_of_Pennsylvania>,
    <http://dbpedia.org/resource/Yale_University>
  ))
}
```

In questa query si seleziona l'insieme dei soggetti che hanno come tipo ""Scientist"" e che hanno frequentato una delle università dell'Ivy League come alma mater. La clausola FILTER viene utilizzata per limitare l'elenco delle università ad un insieme fisso di Istituzioni che fanno parte dell'Ivy League. Infine, COUNT(DISTINCT ?scientist) restituisce il numero di scienziati distinti trovati nella query. Il risultato sarà restituito nella variabile ?num_scientists."
139,Quali surfisti professionisti sono nati in Australia?,"Ecco un esempio di query SPARQL per ottenere un elenco di surfisti professionisti nati in Australia utilizzando DBPedia:

```
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT DISTINCT ?surfer ?birthDate
WHERE {
  ?surfer a dbo:Surfer ;
          dbo:birthPlace ?place ;
          dbo:birthDate ?birthDate .
  ?place dbo:country ?country .
  FILTER(?country = <http://dbpedia.org/resource/Australia>)
}
```

Questa query recupera tutte le entità ""Surfer"" che hanno il luogo di nascita in Australia e restituisce il nome del surfista e la data di nascita."
137,Dammi tutti i partiti politici olandesi.,"SELECT ?partitoPolitico
WHERE {
  ?partitoPolitico a <http://dbpedia.org/ontology/PoliticalParty> .
  ?partitoPolitico <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Netherlands> .
}"
136,Quanti satelliti ha Marte?,"La query SPARQL per ottenere il numero di satelliti di Marte in DBPedia è la seguente:

SELECT (COUNT(?satellite) AS ?numeroSatelliti)
WHERE {
  <http://dbpedia.org/resource/Mars> <http://dbpedia.org/ontology/satellite> ?satellite .
}
"
134,Qual è il vero nome di Batman?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?name
WHERE {
  ?batman dbo:alias ""Batman"" .
  ?batman foaf:name ?name .
}"
132,Per cosa è famoso Elon Musk?,"La seguente query SPARQL può essere utilizzata per trovare informazioni su cosa sia famoso Elon Musk in DBPedia:

```sparql
SELECT DISTINCT ?description
WHERE {
   <http://dbpedia.org/resource/Elon_Musk> dbpedia-owl:abstract ?description .
   FILTER ( langMatches(lang(?description),""it"") )
}
```

Nella query, stiamo selezionando la descrizione distintiva di Elon Musk (`?description`). Utilizziamo il filtro `langMatches` per ottenere la descrizione in italiano (`langMatches(lang(?description),""it"")`). L'URI specifico di Elon Musk su DBPedia è `<http://dbpedia.org/resource/Elon_Musk>`, che è dove andremo a cercare la descrizione."
128,Chi è il autore di WikiLeaks? ,"La seguente query SPARQL può essere utilizzata per ottenere l'autore di WikiLeaks da DBPedia:

```
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?autore
WHERE {
  dbr:WikiLeaks dbo:author ?autore.
}
```"
126,Sean Parnell era il governatore di quale stato degli Stati Uniti?,"Ecco una possibile query SPARQL per ottenere la risposta alla tua domanda su DBpedia:

```
SELECT ?stateLabel
WHERE {
  <http://dbpedia.org/resource/Sean_Parnell> <http://dbpedia.org/ontology/governorTitle> ?title .
  ?title <http://dbpedia.org/property/office> ?state .
  ?state rdfs:label ?stateLabel .
  FILTER(LANG(?stateLabel) = ""it"" && ?stateLabel != """")
}
```

Questa query cerca l'informazione sul governatore Sean Parnell su DBpedia. Restituisce l'etichetta (nome) dello stato corrispondente al governatore. La clausola `FILTER` è utilizzata per filtrare solo le etichette in italiano (`LANG(?stateLabel) = ""it""`) che non sono vuote (`?stateLabel != """")`.

Si noti che, anche se i dati su DBpedia sono spesso completi e accurati, potrebbe essere necessario verificare l'informazione ottenuta attraverso fonti alternative per assicurarsi della sua correttezza."
125,Per quanti anni fu prodotta la Ford T?,"PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?years
WHERE {
  <http://dbpedia.org/resource/Ford_Model_T> dbp:productionStartYear ?start .
  <http://dbpedia.org/resource/Ford_Model_T> dbp:yearOfEndProduction ?end .
  BIND((xsd:integer(?end) - xsd:integer(?start)) + 1 AS ?years)
}"
124,Quando è stato ucciso Carlo Giuliani?,"SELECT DISTINCT ?date_of_death 
WHERE {
  <http://dbpedia.org/resource/Carlo_Giuliani> <http://dbpedia.org/ontology/dateOfDeath> ?date_of_death .
}"
123,Dammi tutti gli animali estinti.,"La seguente query SPARQL recupera tutti gli animali estinti da DBPedia:

```sparql
SELECT ?animale
WHERE {
   ?animale rdf:type <http://dbpedia.org/ontology/Species> .
   ?animale <http://dbpedia.org/ontology/extinct> true
}
```

In questa query, si selezionano tutte le risorse con il tipo `Species` (specie) e con la proprietà `extinct` (estinto) impostata su `true`. Il risultato sarà una lista di animali estinti presenti in DBPedia."
122,Chi era il moglie di Presidente Lincoln? ,"PREFIX dbpedia-owl: <http://dbpedia.org/ontology/>
SELECT ?moglie
WHERE {
  <http://dbpedia.org/resource/Abraham_Lincoln> dbpedia-owl:spouse ?moglie.
}"
111,Come molti premi ha Bertrand Russell? ,"La query SPARQL per ottenere il numero di premi che ha vinto Bertrand Russell in DBPedia può essere la seguente:

```
SELECT (COUNT(?award) AS ?number_of_awards)
WHERE {
  <http://dbpedia.org/resource/Bertrand_Russell> <http://dbpedia.org/ontology/award> ?award .
}
```

Questa query seleziona tutti i premi (identificati con la proprietà ""http://dbpedia.org/ontology/award"") che sono stati assegnati a Bertrand Russell (identificato da ""http://dbpedia.org/resource/Bertrand_Russell""). Il conteggio di questi premi viene quindi restituito come risultato, con l'alias ""number_of_awards""."
117,Pamela Anderson è vegana?,"La seguente query SPARQL può essere utilizzata per determinare se Pamela Anderson è vegana in DBPedia:

```
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?isVegan
WHERE {
  dbo:Pamela_Anderson dbp:diet ?isVegan.
  FILTER (?isVegan = ""Vegan"")
}
```

Questa query cerca se esiste una proprietà ""diet"" nella pagina di Pamela Anderson in DBPedia con valore ""Vegan"", restituendo il risultato nella variabile ""?isVegan""."
59,Quali sonde spaziali sono state inviate in orbita intorno al sole?,"La query SPARQL per DBPEDIA per ottenere le sonde spaziali inviate in orbita intorno al sole sarebbe la seguente:

SELECT ?sonda
WHERE {
  ?sonda rdf:type dbo:SpaceProbe .
  ?sonda dbo:orbits dbr:Sun .
}

In questa query stiamo selezionando la variabile ?sonda, che rappresenterà le sonde spaziali. La clausola WHERE filtra le triple nel grafo che corrispondono a sonde spaziali (con il tipo rdf:type dbo:SpaceProbe) che sono in orbita intorno al sole (con la proprietà dbo:orbits dbr:Sun).

Ovviamente è possibile ottenere ulteriori informazioni su queste sonde spaziali, basta specificare le variabili e le proprietà che si desidera recuperare nella clausola SELECT."
113,Quali città tedesche hanno più di 250000 abitanti?,"La seguente query SPARQL restituirà tutte le città tedesche con più di 250.000 abitanti:

```
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?city ?population
WHERE {
  ?city a dbo:City ;
       dbo:country <http://dbpedia.org/resource/Germany> ;
       dbo:populationTotal ?population .
  
  FILTER (?population > 250000)
}
ORDER BY ?city
```

Questa query utilizza i seguenti prefissi:
- `dbo` per gli elementi dell'ontologia di DBPedia
- `dbp` per le proprietà di DBPedia

Viene selezionato ?city come l'oggetto della query e ?population come la proprietà che rappresenta la popolazione totale della città. La query filtra le città tedesche con una popolazione superiore a 250.000 abitanti e restituisce solo i risultati distinti ordinati in base al nome della città."
104,Con chi è sposata la figlia di Robert Kennedy?,"Ecco una possibile query SPARQL per ottenere l'informazione richiesta:

```sparql
SELECT ?sposa
WHERE {
  ?figlia dbo:spouse ?sposa .
  ?figlia dbo:parent ?padre .
  ?padre foaf:name ""Robert Kennedy""@en .
}
```

Questa query cerca la relazione di matrimonio (`dbo:spouse`) della figlia (`?figlia`) di Robert Kennedy e restituisce il nome del coniuge (`?sposa`). Nella query viene anche specificato che il padre della figlia deve avere il nome ""Robert Kennedy"" in lingua inglese (`foaf:name ""Robert Kennedy""@en`) per filtrare correttamente i risultati."
10,Quanti studenti ci sono nella Libera Università di Amsterdam?,"La seguente query SPARQL può essere utilizzata per ottenere il numero di studenti nella Libera Università di Amsterdam:

```
SELECT ?studenti
WHERE {
  <http://dbpedia.org/resource/University_of_Amsterdam> <http://dbpedia.org/ontology/numberOfStudents> ?studenti .
}
```

Questa query ricerca la proprietà ""numberOfStudents"" nella risorsa ""University_of_Amsterdam"" su DBPEDIA e restituisce il numero di studenti presenti. Assicurati di eseguire questa query su un endpoint DBPEDIA adeguato."
1,Che cosa è il reddito di IBM? ,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?income
WHERE {
  ?company foaf:name ""IBM""@en .
  ?company dbo:revenue ?income .
}"
178,Quanti film di James Bond ci sono stati?,"PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX rdf: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?film) as ?numeroFilm)
WHERE {
  ?film rdf:type dbp:Film .
  ?film dbp:starring dbr:James_Bond .
}"
129,Chi interpreta la voce di Bart Simpson?,"La seguente query SPARQL può essere utilizzata per ottenere l'informazione su chi interpreta la voce di Bart Simpson:

```
SELECT ?actor WHERE {
  ?bart dbo:voiceActor ?actor.
  FILTER (regex(?bart, ""Bart_Simpson""))
}
```

Nella query, stiamo selezionando la variabile ?actor che rappresenta l'attore che interpreta la voce di Bart Simpson. Stiamo anche definendo il fatto che vogliamo trovare un'associazione tra la risorsa che rappresenta Bart Simpson (identificata come ""Bart_Simpson"" in DBPEDIA) e l'attore. Utilizziamo FILTER per filtrare solo gli attributi che corrispondono a Bart Simpson.

L'output della query sarà l'attore che interpreta la voce di Bart Simpson."
183,Chi era Tom Hanks sposato a? ,"SELECT ?spouse WHERE {
  dbpedia:Tom_Hanks dbpedia-owl:spouse ?spouse.
}"
181,Attraverso quali stati scorre il fiume Yenisei?,"La query SPARQL per ottenere l'elenco degli stati attraversati dal fiume Yenisei su DBPEDIA è la seguente:

SELECT DISTINCT ?stateLabel
WHERE {
  ?river dbp:name ""Yenisei"" .
  ?river dbo:country ?country .
  ?country rdf:type dbo:Country .
  ?country dbo:commonName ?stateLabel .
}

Nella query sopra vengono utilizzate le seguenti proprietà e classi di DBPEDIA:
- ""dbp:name"" si riferisce al nome del fiume.
- ""dbo:country"" si riferisce al paese attraversato dal fiume.
- ""rdf:type"" indica il tipo dell'oggetto, in questo caso ""dbo:Country"".
- ""dbo:commonName"" si riferisce al nome comune del paese.

La query cercherà il fiume Yenisei e restituirà un elenco unico dei nomi comuni degli stati attraversati dal fiume."
7,Dammi tutte le automobili che sono prodotte in Germania.,"La seguente query SPARQL può essere utilizzata per ottenere l'elenco delle automobili prodotte in Germania da DBPedia:

SELECT ?automobile
WHERE {
  ?automobile dbo:manufacturer ?produttore .
  ?produttore dbo:country dbr:Germany .
}

In questa query, selezioniamo la variabile ""?automobile"" dalla tripla ""?automobile dbo:manufacturer ?produttore"", che indica che l'automobile è prodotta da un determinato produttore. Poi, nella tripla ""?produttore dbo:country dbr:Germany"", specifichiamo che il produttore ha un paese di origine che è la Germania."
135,Quando è morto Michael Jackson?,"SELECT ?dateOfDeath 
WHERE {
  dbpedia:Michael_Jackson dbo:deathDate ?dateOfDeath.
}"
50,Qual è il vulcano più alto in Africa?,"La seguente query SPARQL restituirà il nome e l'altezza del vulcano più alto in Africa:

PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?vulcano ?altezza
WHERE {
  ?vulcano rdf:type dbo:Volcano ;
           dbo:country <http://dbpedia.org/resource/Africa> ;
           dbp:elevation ?altezza .
}
ORDER BY DESC(?altezza)
LIMIT 1"
39,Quale poeta ha scritto il maggior numero di libri?,"La query SPARQL per determinare il poeta che ha scritto il maggior numero di libri in DBPEDIA può essere la seguente:

```
SELECT ?poeta COUNT(?libro) as ?conteggio
WHERE {
  ?poeta a dbpedia-owl:Poet ;
         dbpedia-owl:author ?libro .
}
GROUP BY ?poeta
ORDER BY DESC(?conteggio)
LIMIT 1
```

Questa query seleziona tutti i poeti e il numero di libri da loro scritti (indicati come autori) presenti in DBPEDIA. Successivamente, raggruppa i risultati per poeta e ordina in modo decrescente per il conteggio dei libri. Infine, viene impostato un limite di 1 per selezionare il poeta con il maggior numero di libri."
83,Dammi tutti i gangster dell'era del proibizionismo.,"La seguente query SPARQL fornisce i gangster dell'era del proibizionismo presenti in DBPedia:

```
SELECT ?gangster
WHERE {
  ?gangster rdf:type dbo:Criminal ;
            dbo:occupation dbr:Prohibition_gangster .
}
```

Questa query seleziona tutte le risorse con il tipo ""dbo:Criminal"" e l'occupazione ""dbr:Prohibition_gangster"", che rappresenta i gangster dell'era del proibizionismo."
71,Dammi tutte le astronavi che hanno volato su Marte.,"La query SPARQL per ottenere tutte le astronavi che hanno volato su Marte potrebbe essere la seguente:

```
SELECT ?astronave
WHERE {
  ?astronave rdf:type dbpedia-owl:Spacecraft ;
             dbpedia-owl:launchSite ?sitoLancio ;
             dbpedia-owl:destinationPlanet dbpedia:Mars .
}
```

In questa query, stiamo selezionando tutte le variabili denominata ""?astronave"" in cui le astronavi hanno il tipo ""dbpedia-owl:Spacecraft"", un ""dbpedia-owl:launchSite"" specifico e la destinazione su ""dbpedia:Mars"" (ovvero Marte)."
213,Mostrami tutti i film cechi.,"Ecco una possibile query SPARQL per ottenere tutti i film cechi da DBpedia:

```sparql
SELECT ?film
WHERE {
  ?film rdf:type dbo:Film ;
        dbo:country dbr:Czech_Republic .
}
```

Questa query seleziona tutte le risorse che hanno tipo `dbo:Film` e sono collegati all'entità ""Czech Republic"" attraverso la proprietà `dbo:country`. Il risultato sarà una lista di film cechi presenti in DBpedia."
209,Dammi tutte i taikonauti.,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
SELECT ?taikonauto
WHERE {
  ?taikonauto rdf:type dbo:Person ;
               dbo:occupation dbr:Chinese_space_program ;
               dbo:birthPlace dbr:China .
}
"
105,Quali stati hanno più di dieci vulcani?,"La seguente query SPARQL può essere utilizzata per ottenere i nomi degli stati che hanno più di dieci vulcani in DBPedia:

```
SELECT ?state ?numVulcanoes
WHERE {
  ?state a dbo:Country ;
         dbo:volcano ?volcano .
  {
    SELECT ?state (COUNT(?volcano) AS ?numVulcanoes)
    WHERE {
      ?state a dbo:Country ;
             dbo:volcano ?volcano .
    }
    GROUP BY ?state
    HAVING (?numVulcanoes > 10)
  }
}
```

Questa query recupera tutte le istanze di stato dalla DBPedia che hanno associati più di dieci vulcani."
52,Dare me tutti film con Tom Cruise.,"Ecco un esempio di query SPARQL per ottenere tutti i film con Tom Cruise da DBpedia:

```
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?film
WHERE {
  ?film dbo:starring dbr:Tom_Cruise.
  ?film a dbo:Film.
}
```

Questa query utilizza il prefisso ""dbo"" per riferirsi a DBpedia Ontology, ""dbr"" per riferirsi a DBpedia Resource e ""foaf"" per riferirsi a FOAF (Friend-of-a-Friend ontology). La query seleziona tutte le ?film (variabili) che hanno come proprietà dbo:starring l'attore Tom Cruise e che sono di tipo dbo:Film."
102,Quando è morto il creatore di Dracula?,"La query SPARQL per DBPEDIA per determinare quando è morto il creatore di Dracula, Bram Stoker, può essere la seguente:

```
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?deathDate
WHERE {
  <http://dbpedia.org/resource/Bram_Stoker> dbo:deathDate ?deathDate.
}
```

Questa query chiede di restituire la data di morte del risorsa DBPEDIA corrispondente a Bram Stoker. Il risultato ottenuto sarà la data di morte del creatore di Dracula."
21,Chi creato Inglese Wikipedia? ,"La seguente query SPARQL restituirà il creatore di Wikipedia in inglese (Inglese Wikipedia):

```
SELECT ?creatorLabel WHERE {
    ?creator dbpedia-owl:wikiPageWikiLink dbr:English_Wikipedia .
    OPTIONAL {
        ?creator rdfs:label ?creatorLabel FILTER (lang(?creatorLabel) = 'en')
    }
}
```

Nell'output della query, la variabile ""?creatorLabel"" conterrà il nome (in inglese) del creatore di Wikipedia in inglese."
34,Dammi tutte le cancelliere tedesche.,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?chancellor
WHERE {
  ?chancellor dbo:office dbr:Chancellor_of_Germany ;
              dbo:country dbr:Germany .
}
ORDER BY ?chancellor"
145,Chi possiede Aldi?,"Ecco una query SPARQL per ottenere l'informazione su chi possiede Aldi:

```
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?owner
WHERE {
  ?aldi dbo:wikiPageRedirects ?aldiRedirect.
  
  ?owner dbp:owner ?aldiRedirect.
  
  FILTER(langMatches(lang(?owner), ""it""))
}
```

Questa query SPARQL utilizza i prefissi ""dbo"" per il DBpedia Ontology, ""dbp"" per le proprietà di DBpedia e ""foaf"" per FOAF. La query richiede l'informazione sul proprietario di Aldi, recuperando l'URL dell'entità corrispondente ad Aldi tramite la proprietà dbo:wikiPageRedirects. In seguito, viene verificata la proprietà dbp:owner per l'URL rilevato. Infine, viene applicato un filtro sulla lingua per ottenere solo i risultati in italiano."
154,Quale libri erano scritto di Danielle Acciaio? ,"La seguente query SPARQL restituirà i libri scritti da Danielle Acciaio presenti in DBPedia:

```
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?book
WHERE {
  ?book dbo:author dbr:Danielle_Acciaio.
}
```"
198,Chi fu influenzato da Socrate?,"SELECT ?influencedBy WHERE {
  ?subject dbo:influencedBy dbr:Socrates.
  ?subject rdfs:label ?influencedBy.
  FILTER (LANG(?influencedBy) = ""it"")
}"
162,Quanto è profondo il Chiemsee?,"Ecco la query SPARQL per ottenere l'informazione sulla profondità del Chiemsee utilizzando DBpedia:

```
SELECT ?depth
WHERE {
  <http://dbpedia.org/resource/Chiemsee> <http://dbpedia.org/ontology/maximumDepth> ?depth.
}
```

Nella query, stiamo cercando la proprietà ""maximumDepth"" dell'ontologia DBpedia per il risorsa Chiemsee. La variabile ?depth restituirà il valore della profondità del lago Chiemsee."
212,Quali aziende si occupano sia nell'industria aerospaziale che in ambito medico?,"La seguente query SPARQL recupera le aziende che si occupano sia nell'industria aerospaziale che in ambito medico da DBpedia:

```
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dct: <http://purl.org/dc/terms/>

SELECT DISTINCT ?company 
WHERE {
  ?company a dbo:Company ;
           dct:subject dbc:Aerospace_companies ;
           dct:subject dbc:Medical_instrument_manufacturers .
}
```

Questa query utilizza i prefissi per abbreviare gli URIs dei predicati e definire `dbo`, `dbr` e `dct`, rispettivamente per DBpedia ontology, DBpedia resource e Dublin Core terms.

La clausola `WHERE` specifica che vogliamo recuperare tutte le risorse (aziende) che hanno i seguenti attributi:
- Tipo: `dbo:Company` (aziende)
- Soggetto: `dbc:Aerospace_companies` (aziende aerospaziali)
- Soggetto: `dbc:Medical_instrument_manufacturers` (produttori di strumenti medici)

La clausola `SELECT DISTINCT` viene utilizzata per selezionare solo le risorse uniche (senza duplicati) delle aziende che soddisfano i criteri della clausola `WHERE`. La variabile `?company` viene utilizzata per identificare queste aziende.

Eseguita questa query SPARQL in un endpoint DBpedia, otterremo l'elenco delle aziende che si occupano sia nell'industria aerospaziale che in ambito medico."
96,Quali surfisti professionisti sono nati nelle Filippine?,"La seguente query SPARQL può essere utilizzata per ottenere l'elenco dei surfisti professionisti nati nelle Filippine da DBPedia:

PREFIX dbpedia-owl: <http://dbpedia.org/ontology/>
PREFIX dbpprop: <http://dbpedia.org/property/>

SELECT ?surfer
WHERE {
  ?surfer rdf:type dbpedia-owl:Surfer ;
          dbpprop:birthPlace <http://dbpedia.org/resource/Category:Filipino_surfers> .
}"
40,Chi sono i genitori della regina Vittoria?,"La query SPARQL per ottenere i genitori della regina Vittoria da DBpedia può essere la seguente:

```sparql
SELECT ?parente WHERE {
  <http://dbpedia.org/resource/Queen_Victoria> <http://dbpedia.org/ontology/parent> ?parente .
}
```

Nota che nella query si utilizza l'URI specifico per Queen Victoria nella base di dati di DBpedia."
79,Ci sono castelli negli Stati Uniti?,"SELECT ?castello
WHERE {
  ?castello rdf:type dbo:Castle .
  ?castello dbo:country dbr:United_States .
}

La query ricerca tutti i castelli (con la proprietà rdf:type dbo:Castle) negli Stati Uniti (con la proprietà dbo:country dbr:United_States)."
141,Quali lingue sono parlate in Estonia?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?languageLabel
WHERE {
  ?country dbo:country <http://dbpedia.org/resource/Estonia>.
  ?country dbo:language ?language.
  ?language rdfs:label ?languageLabel.
  FILTER(langMatches(lang(?languageLabel), ""it""))
}
ORDER BY ?languageLabel
LIMIT 100"
80,Dammi la lista di tutti gli uccelli in via di estinzione.,"La seguente è una query SPARQL per ottenere la lista di tutti gli uccelli in via di estinzione da DBpedia:

```
SELECT ?uccello ?uccelloLabel
WHERE {
  ?uccello rdf:type dbo:Bird ;
           dbo:conservationStatus dbr:Endangered .
  
  FILTER(LANG(?uccelloLabel) = 'it')  
}
ORDER BY ?uccelloLabel
```

Questa query recupera tutti gli uccelli che hanno il tipo ""dbo:Bird"" e lo stato di conservazione ""dbr:Endangered"" (in via di estinzione). La clausola ""FILTER(LANG(?uccelloLabel) = 'it')"" è utilizzata per ottenere solo le risorse con etichette italiane, se disponibili. Infine, l'elenco viene ordinato in base all'etichetta degli uccelli (?uccelloLabel)."
159,Quali stati sono collegati dal Reno?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?state
WHERE {
  ?river dbo:river dbr:Rhine ;
         dbo:country ?country .
  ?state dbo:country ?country .
}
"
107,Chi fu il padre della regina Elisabetta II?,"La seguente query SPARQL può essere utilizzata per ottenere il nome del padre della regina Elisabetta II da DBpedia:

```
PREFIX dbpedia-owl: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?fatherName WHERE {
    ?elisabetta dbpedia-owl:parent ?father.
    ?father foaf:name ?fatherName.
    FILTER(?elisabetta = dbpedia:Queen_Elizabeth_II)
}
```

Sostituisci ""Queen_Elizabeth_II"" con l'URI corretto per la regina Elisabetta II in DBpedia, se necessario."
163,Dammi tutti gli elementi chimici.,"Ecco una possibile query SPARQL per ottenere tutti gli elementi chimici da DBpedia:

```
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?elemento ?simbolo
WHERE {
  ?elemento rdf:type dbo:ChemicalElement ;
            dbo:symbol ?simbolo .
}
```

In questa query, stiamo utilizzando due prefissi: `dbo` per indicare il namespace di DBpedia Ontology e `rdf` per indicare il namespace RDF. 

All'interno del blocco WHERE stiamo cercando tutte le risorse che hanno come tipo ""ChemicalElement"" (elemento chimico) e otteniamo il simbolo di ciascun elemento chimico.

L'output sarà una lista di elementi chimici con il loro simbolo corrispondente."
211,Dammi tutti i presidenti americani degli ultimi 20 anni.,"La seguente query SPARQL può essere utilizzata per ottenere i presidenti americani degli ultimi 20 anni da DBpedia:

```
SELECT ?presidente WHERE {
  ?presidente rdf:type dbpedia-owl:President .
  ?presidente dbpedia-owl:birthPlace dbpedia:United_States .
  ?presidente dbpedia-owl:office dbpedia-owl:President .
  ?presidente dbpedia-owl:assumingOffice ?dataInizio .
  FILTER (year(xsd:dateTime(?dataInizio)) >= year(now()) - 20)
}
ORDER BY DESC(?dataInizio)
```

Questa query SPARQL recupera gli individui di tipo ""President"" che sono nati negli Stati Uniti d'America e hanno ricoperto l'incarico di presidente. Successivamente, vengono filtrati solo gli individui la cui data di inizio dell'incarico sia relativa agli ultimi 20 anni dalla data corrente. Infine, i risultati vengono ordinati in modo decrescente in base alla data di inizio dell'incarico.

NB: DBpedia non è sempre aggiornato in tempo reale, quindi i risultati ottenuti potrebbero non essere del tutto accurati."
51,Quando verrà proiettato il film Worst Case Scenario al cinema nei Paesi Bassi?,"Ecco la query SPARQL per ottenere la data in cui il film ""Worst Case Scenario"" sarà proiettato al cinema nei Paesi Bassi:

```
SELECT ?releaseDate
WHERE {
    ?film rdf:type dbo:Film ;
        rdfs:label ""Worst Case Scenario""@en ;
        dbp:country dbr:Netherlands ;
        dbp:releaseDate ?releaseDate .
    FILTER (langMatches(lang(?releaseDate), ""en""))
}
```

In questa query stiamo cercando un film con il titolo ""Worst Case Scenario"" che sia stato rilasciato nei Paesi Bassi (con l'attributo dbp:country dbr:Netherlands). L'attributo dbp:releaseDate viene utilizzato per ottenere la data di rilascio del film. La clausola FILTER viene utilizzata per filtrare solo le date in lingua inglese."
144,Chi ha sposato Lance Bass?,"La seguente query SPARQL può essere utilizzata per ottenere le informazioni sul coniuge di Lance Bass da DBpedia:

SELECT ?coniugeLabel WHERE {
  ?lanceBass dbpedia-owl:spouse ?coniuge .
  ?coniuge rdfs:label ?coniugeLabel .
  FILTER (lang(?coniugeLabel) = ""it"")
  FILTER (?lanceBass = <http://dbpedia.org/resource/Lance_Bass>)
}

In questa query, stiamo cercando il coniuge di Lance Bass utilizzando la proprietà ""spouse"" (coniuge) di DBpedia. Filtriamo inoltre le etichette dei coniugi per ottenere solo le informazioni in italiano. Infine, specifichiamo che stiamo cercando le informazioni specifiche su Lance Bass utilizzando il suo URI (http://dbpedia.org/resource/Lance_Bass)."
167,Quale società sussidiaria di TUI Travel serve sia Dortmund che Dublino?,"La seguente query SPARQL può essere utilizzata per trovare la società sussidiaria di TUI Travel che serve sia Dortmund che Dublino:

```
SELECT DISTINCT ?subsidiary
WHERE {
  ?subsidiary dbo:subsidiaryOf dbr:TUI_Travel .
  ?subsidiary dbo:location ?locationDortmund .
  ?locationDortmund dbo:city dbr:Dortmund .
  ?subsidiary dbo:location ?locationDublin .
  ?locationDublin dbo:city dbr:Dublin .
}
```"
131,Quali lingue parlano in Pakistan?,"La seguente query SPARQL può essere utilizzata per ottenere le lingue parlate in Pakistan:

```
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?languageLabel
WHERE {
  dbr:Pakistan dbo:officialLanguage ?language.
  ?language rdfs:label ?languageLabel.
  FILTER(langMatches(lang(?languageLabel), ""it""))
}
```

Questa query utilizza il prefisso ""dbr"" per il risorsa ""Pakistan"" e il prefisso ""dbo"" per l'ontologia DBpedia. 

La query restituirà una lista di lingue parlate in Pakistan con etichette italiane."
120,Chi è il figlia di Conto Clinton sposato a? ,"La seguente query SPARQL può essere utilizzata per ottenere l'informazione richiesta:

```
SELECT ?figlia ?sposato_a WHERE {
  ?figlia rdf:type dbo:Person ;
          dbo:parent dbr:Conto_Clinton ;
          dbp:spouse ?sposato_a .
}
```

Questa query recupera la persona figlia di ""Conto Clinton"" (presumibilmente dove ""Conto Clinton"" è un errore di battitura per ""Bill Clinton""), che ha una proprietà ""spouse"" che indica con chi è sposata la figlia."
164,Chi c'era nella missione Apollo 11?,"Ecco una query SPARQL per ottenere l'elenco delle persone coinvolte nella missione Apollo 11:

```
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?person
WHERE {
    ?person dbo:mission ?mission .
    ?mission dbo:missionTitle ""Apollo_11"" .
    ?person rdf:type dbo:Person .
}
```

Questa query richiede l'elenco delle persone che hanno partecipato alla missione specifica Apollo 11. Assicurati di eseguire la query su un endpoint SPARQL come quello di DBpedia per ottenere i risultati corretti."
88,Qual è la lunghezza d'onda dell'indaco?,"Per recuperare la lunghezza d'onda dell'indaco da DBPedia, si può utilizzare la seguente query SPARQL:

PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?length
WHERE {
  ?indaco dbo:colour dbp:indigo .
  ?indaco dbo:wavelength ?length .
}"
151,Dammi tutti i lati B dei Ramones.,"Ecco una query SPARQL per ottenere tutti i lati B dei Ramones da DBpedia:

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?latoB
WHERE {
  ?album dbo:artist dbr:Ramones ;
         dbp:bSide ?latoB.
}
```

Nel risultato otterrai una lista di tutti i lati B degli album dei Ramones presenti in DBpedia."
63,Chi venne chiamato Scarface?,"La seguente query SPARQL restituirà i nomi delle persone che vennero chiamate ""Scarface"" in DBPEDIA:

```
SELECT DISTINCT ?personLabel
WHERE {
  ?person dbo:alias ?alias.
  FILTER(REGEX(?alias, ""Scarface"", ""i"")).
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```

Questa query cercherà le entità che hanno l'alias ""Scarface"" e restituirà i loro nomi. Utilizza la proprietà ""dbo:alias"" per trovare gli alias delle persone e poi applica un filtro per controllare se l'alias contiene la parola ""Scarface"". L'opzione ""i"" nel comando REGEX rende il filtro (case-insensitive). Infine, la clausola ""SERVICE wikibase:label"" viene utilizzata per ottenere le etichette dei risultati in lingua inglese."
27,Quali fiumi sfociano nel mare del Nord,"La seguente query SPARQL può essere utilizzata per ottenere una lista dei fiumi che sfociano nel mare del Nord utilizzando DBPedia:

```
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?river
WHERE {
  ?river dbo:mouth dbr:North_Sea .
  ?river a dbo:River .
}
```

Questa query recupera i fiumi (`?river`) che hanno come proprietà `dbo:mouth` (cioè la foce) l'entità `dbr:North_Sea` (che rappresenta il mare del Nord). Inoltre, viene verificato che l'entità `?river` sia di tipo `dbo:River` per filtrare solo gli elementi che rappresentano fiumi.

È importante notare che DBPedia potrebbe non essere esaustiva e potrebbero mancare alcuni fiumi nel risultato."
156,Dove si trova Fort Knox?,"SELECT ?location WHERE {
  <http://dbpedia.org/resource/Fort_Knox> <http://dbpedia.org/ontology/location> ?location .
}"
207,Quali figlie di conti inglesi morirono nel loro luogo di nascita?,"La seguente query SPARQL può essere utilizzata per ottenere le figlie di conti inglesi che sono morte nel loro luogo di nascita:

```
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?figlia ?luogoNascita 
WHERE {
  ?figlia dbo:parent ?conte ;
          dbo:birthPlace ?luogoNascita ;
          dbo:deathPlace ?luogoMorte .
  ?conte dbo:residence dbr:United_Kingdom .
  FILTER (?luogoNascita = ?luogoMorte)
}
```

Questa query fa uso dei prefissi `dbo`, `dbp` e `dbr` per abbreviare gli URI nel codice. 

La query restituirà le variabili `?figlia` e `?luogoNascita`, che corrispondono rispettivamente al nome della figlia e al suo luogo di nascita. La condizione `FILTER` impone che il luogo di nascita sia uguale al luogo di morte della figlia. 

Si noti che questa query assume che i conti inglesi siano rappresentati come istanze della classe `dbo:Noble` con la proprietà `dbo:residence` che denota la residenza nel Regno Unito (simboleggiato con l'URI `dbr:United_Kingdom`). Se queste informazioni non sono rappresentate nel modo specificato, potrebbe essere necessario adattare la query."
24,Quanti imperatori ci sono stati in Cina?,"SELECT (COUNT(?emperor) AS ?num_emperors)
WHERE {
  ?emperor a dbo:Emperor.
  ?emperor dbo:country dbr:China.
}"
133,Quali sono i nomi delle Tartarughe Ninja?,"La seguente query SPARQL può essere utilizzata per ottenere i nomi delle Tartarughe Ninja da DBpedia:

```
SELECT ?name
WHERE {
  ?turtle a dbpedia:Turtle .
  ?turtle rdfs:label ?name .
  FILTER(STRSTARTS(?name, ""Tartarughe Ninja""))
}
```

Questa query restituirà i nomi delle Tartarughe Ninja presenti in DBpedia."
103,Dove inizia Piccadilly?,"Ecco un esempio di query SPARQL per ottenere l'informazione su dove inizia Piccadilly secondo DBPedia:

```
SELECT ?place
WHERE {
  <http://dbpedia.org/resource/Piccadilly> dbp:directionStart ?place.
}
```

In questa query stiamo cercando l'oggetto `?place` al quale il soggetto è `<http://dbpedia.org/resource/Piccadilly>` e la proprietà è `dbp:directionStart`. Questo dovrebbe restituire il luogo in cui Piccadilly ha inizio secondo DBPedia."
165,Qual è il nome della scuola in cui ha studiato la moglie di Obama?,"La moglie di Obama si chiama Michelle Obama. Per conoscere il nome della scuola in cui ha studiato Michelle Obama, possiamo utilizzare la seguente query SPARQL:

```
SELECT ?schoolName
WHERE {
  ?person dbpedia-owl:spouse dbpedia:Michelle_Obama .
  ?person dbpedia-owl:education ?education .
  ?education dbpedia-owl:school ?school .
  ?school rdfs:label ?schoolName .
  FILTER(LANG(?schoolName) = ""it"")
}
```

In questa query, stiamo cercando un'entità collegata a Michelle Obama (attraverso la proprietà ""spouse"") che abbia un'istruzione (proprietà ""education"") collegata a una scuola (proprietà ""school""). Stiamo quindi recuperando il nome della scuola utilizzando la proprietà ""rdfs:label"", con una condizione (FILTER) per ottenere solo il nome della scuola in italiano (filtrando per la lingua ""it"")."
108,Quando si dichiarò indipendente il Paraguay?,"La seguente query SPARQL può essere utilizzata per ottenere la data in cui il Paraguay si dichiarò indipendente:

```
SELECT ?dataIndipendenza
WHERE {
  <http://dbpedia.org/resource/Paraguay> <http://dbpedia.org/ontology/independenceDate> ?dataIndipendenza .
}
```

Questa query utilizza la proprietà ""independenceDate"" presente nell'ontologia di DBPedia per recuperare la data di indipendenza del Paraguay. La risposta restituirà la data di indipendenza come valore per la variabile ""?dataIndipendenza""."
15,Quanto è basso il giocatore attivo più basso dell'NBA?,"Ecco una query SPARQL per DBPedia per trovare l'altezza del giocatore attivo più basso dell'NBA:

```
SELECT ?giocatore ?altezza
WHERE {
  ?giocatore rdf:type dbo:BasketballPlayer ;
             dbo:league ?lega ;
             dbo:height ?altezza .
  ?lega rdfs:label ""National_Basketball_Association""@en .
}
ORDER BY ASC(?altezza)
LIMIT 1
```

Questa query restituirà il giocatore attivo con l'altezza più bassa, insieme alla sua altezza. La variabile `?altezza` contiene l'altezza del giocatore, mentre la variabile `?giocatore` contiene l'URI del giocatore, che può essere utilizzato per ottenere ulteriori informazioni sul giocatore."
45,Dove fatto Abraham Lincoln il? ,"La seguente query SPARQL può essere utilizzata per recuperare informazioni su dove è nato Abraham Lincoln:

SELECT DISTINCT ?birthPlaceLabel WHERE {
  ?person rdf:type dbpedia-owl:Person ;
          rdfs:label ""Abraham Lincoln""@en ;
          dbo:birthPlace ?birthPlace .
  ?birthPlace rdfs:label ?birthPlaceLabel .
  FILTER (lang(?birthPlaceLabel) = ""it"")
}
LIMIT 1

Questa query recupera la prima etichetta del luogo di nascita di Abraham Lincoln in italiano, se disponibile."
82,Quando è stata fondata Jack Wolfskin?,"La seguente query SPARQL può essere utilizzata per ottenere la data di fondazione dell'azienda Jack Wolfskin tramite DBPedia:

```
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?date
WHERE {
  <http://dbpedia.org/resource/Jack_Wolfskin> dbo:formationDate ?date.
}
```

Questa query estrae la data di fondazione dell'azienda Jack Wolfskin utilizzando la proprietà ""formationDate"" dell'ontologia di DBPedia."
9,In quale città Air China ha il quartier generale?,"Ecco una possibile query SPARQL per DBpedia per trovare la città in cui Air China ha il quartier generale:

```
SELECT ?citta
WHERE {
   <http://dbpedia.org/resource/Air_China> dbo:headquarters ?quartier_generale.
   ?quartier_generale dbo:city ?citta.
}
```

Questa query recupera l'oggetto `dbo:headquarters` (quartier generale) della risorsa corrispondente ad Air China (`http://dbpedia.org/resource/Air_China`). Successivamente, viene recuperato l'oggetto `dbo:city` (città) della proprietà `dbo:headquarters`. L'output finale sarà la città in cui ha sede il quartier generale di Air China."
201,In che anno è stato fondato il birrificio che produce la Pilsner Urquell?,"PREFIX dbont: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?annoFondazione
WHERE {
  ?birrificio dbont:produces ?birra .
  ?birra rdfs:label ""Pilsner Urquell""@en .
  ?birrificio dbont:foundingYear ?annoFondazione .
}
"
171,Dove ha avuto luogo il Boston Tea Party,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?locationLabel
WHERE { 
  dbr:Boston_Tea_Party dbo:location ?location.
  ?location rdfs:label ?locationLabel.
  FILTER (lang(?locationLabel) = 'it')
}"
182,Quali animali sono in pericolo di estinzione?,"Per ottenere la lista degli animali in pericolo di estinzione in DBpedia, è possibile utilizzare la seguente query SPARQL:

```
SELECT ?animal
WHERE {
  ?animal rdf:type dbo:Species ;
          dbo:threatStatus dbr:Endangered .
}
```

Questa query SPARQL restituirà una lista di animali che sono classificati come ""Endangered"" (in pericolo di estinzione) secondo DBpedia."
13,Quali politici erano sposati con persone tedesche?,"SELECT DISTINCT ?politician WHERE {
   ?politician a <http://dbpedia.org/ontology/Politician> .
   ?politician <http://dbpedia.org/ontology/spouse> ?person .
   ?person a <http://dbpedia.org/ontology/Person> .
   ?person <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Germany> .
}"
114,Quanto è grande il diametro della Terra?,"La domanda ""Quanto è grande il diametro della Terra?"" può essere risolta tramite la seguente query SPARQL:

SELECT ?diametro
WHERE {
  dbo:Earth dbo:diameter ?diametro.
  FILTER(langMatches(lang(?diametro), ""en""))
}"
92,È il moglie di Presidente Obama chiamato Michelle? ,"La query SPARQL per ottenere l'informazione desiderata è la seguente:

PREFIX dbpedia-owl: <http://dbpedia.org/ontology/>
PREFIX dbpedia: <http://dbpedia.org/resource/>

SELECT ?nomeMoglie
WHERE {
  dbpedia:Barack_Obama dbpedia-owl:spouse ?moglie .
  ?moglie dbpedia-owl:birthName ?nomeMoglie .
  FILTER (?nomeMoglie = ""Michelle"")
}"
194,Quale stato americano è abbreviato MN?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?stateLabel
WHERE {
  ?state dbp:conventionalLongName ?stateLabel;
         dbp:commonName ?commonName.
  FILTER (?commonName = ""Minnesota""@en)
}"
175,Quando morì Maometto?,"SELECT ?deathDate WHERE {
  dbr:Maometto dbo:deathDate ?deathDate .
}"
26,Da che cosa è composta l'atmosfera della luna,"Ecco la query SPARQL per ottenere informazioni sulla composizione dell'atmosfera della Luna da DBPEDIA:

```
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?composition
WHERE {
    dbr:Moon dbo:atmosphere ?atmosphere.
    ?atmosphere dbo:composition ?composition.
}
```

Questa query recupera la composizione dell'atmosfera della Luna dal DBPEDIA e restituisce il valore della proprietà ""composition"" dell'oggetto ""atmosphere"" associato all'oggetto ""Moon"" nella base di conoscenza."
60,Chi è il governatore di Texas? ,"SELECT ?governorName WHERE {
  ?state dbpedia-owl:capital dbpedia:Texas .
  ?state dbpedia-owl:governor ?governor .
  ?governor foaf:name ?governorName .
  FILTER(langMatches(lang(?governorName), ""en""))
}"
110,Che film ha diretto Kurosawa?,"Ecco una query SPARQL che puoi utilizzare per ottenere l'elenco dei film diretti da Akira Kurosawa utilizzando DBPedia:

```
SELECT ?film
WHERE {
  ?film dbpedia-owl:director dbpedia:Akira_Kurosawa.
}
```

Nella query, stiamo cercando tutte le triple in DBPedia in cui il risorsa ""film"" ha un oggetto di ""Kurosawa"". 

Dopo aver eseguito questa query, otterrai un elenco di film diretti da Akira Kurosawa."
206,Quale fu il nome della famosa battaglia di San Antonio del 1836?,"SELECT ?battaglia ?nome WHERE {
  ?battaglia rdf:type dbo:Battle ;
             dbo:location <http://dbpedia.org/resource/San_Antonio> ;
             dbo:date ?data ;
             dbp:result ?risultato .
  FILTER (STR(?data) = ""1836-01-01"") .
  ?battaglia rdfs:label ?nome .
  FILTER (LANG(?nome) = ""it"") .
}

La query sopra restituirà il nome della famosa battaglia di San Antonio del 1836."
97,Dare me il ufficiale siti web di attori di il televisione mostrare Ammaliato. ,"La seguente query SPARQL può essere utilizzata per ottenere i siti web ufficiali degli attori del programma televisivo ""Ammaliato"":

```
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?attore ?sitoWeb
WHERE {
  ?attore a dbo:Actor ;
          dbo:starring ?tvShow ;
          foaf:homepage ?sitoWeb .
  FILTER (?tvShow = <http://dbpedia.org/resource/Ammaliato>)
}
```

Questa query SPARQL recupera gli attori che hanno partecipato al programma televisivo ""Ammaliato"" e i rispettivi siti web ufficiali."
20,Quante calorie ha una baguette?,"Ecco una possibile query SPARQL per trovare quante calorie ha una baguette in DBpedia:

```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?calories
WHERE {
  ?baguette dbo:type dbr:Baguette .
  ?baguette dbp:calories ?calories .
}
```

In questa query, abbiamo definito due prefissi, `dbp` e `dbo`, per semplificare la sintassi. Abbiamo quindi selezionato la variabile `?calories` per rappresentare le calorie. Nella clausola `WHERE`, stiamo cercando una risorsa che abbia il tipo ""Baguette"" nell'ontologia DBpedia e che abbia una proprietà ""calories""."
169,Dammi tutte le biblioteche fondate prima del 1400.,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dct: <http://purl.org/dc/terms/>

SELECT ?biblioteca ?nome WHERE {
  ?biblioteca a dbo:Library ;
              dct:founded ?anno ;
              rdfs:label ?nome .
  FILTER (?anno < 1400 && LANG(?nome) = ""it"").
}"
38,Dammi tutte le isole Frisone che appartengono ai Paesi Bassi.,"PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?isola
WHERE {
  ?isola dbo:isPartOf dbr:Netherlands ;
         dbp:islandGroup dbr:Frisian_Islands .
}"
192,In quale museo è esposto l'Urlo di Munch?,"Ecco la query SPARQL per ottenere l'informazione desiderata:

```
SELECT ?museo
WHERE {
  ?opera dbo:author dbr:Edvard_Munch ;
         rdfs:label ""L'Urlo""@it .
  ?museo dbo:museumCollection ?opera .
}
```

Questa query cerca l'opera ""L'Urlo"" di Edvard Munch, e poi recupera il museo che possiede quella specifica opera nella loro collezione."
78,Quando fu fondata l'azienda De Beers?,"La seguente query SPARQL restituirà la data di fondazione dell'azienda De Beers:

```
SELECT ?date
WHERE {
  <http://dbpedia.org/resource/De_Beers> dbo:formationDate ?date.
}
```

Questa query recupera la proprietà ""formationDate"" dell'azienda De Beers e restituisce la corrispondente data di fondazione."
19,Chi diventò presidente dopo la morte di JFK?,"La query SPARQL per ottenere il nome del presidente che successe a JFK dopo la sua morte potrebbe essere la seguente:

```
SELECT ?successorPresidentLabel
WHERE {
  dbpedia:John_F._Kennedy dbpedia-owl:successor ?successorPresident.
  ?successorPresident dbpedia-owl:office dbpedia:President_of_the_United_States.
  ?successorPresident rdfs:label ?successorPresidentLabel.
  FILTER (lang(?successorPresidentLabel) = ""it"")
}
```

Questa query recupera l'etichetta del presidente successivo di JFK e imposta il filtro per ottenere solo la label in italiano."
190,Chi sono i genitori della moglie di Juan Carlos I?,"Ecco la query SPARQL per DBpedia per ottenere i genitori della moglie di Juan Carlos I:

PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?mother ?father
WHERE {
  dbo:Juan_Carlos_I dbo:spouse ?wife .
  ?wife dbo:birthName ?name .
  ?wife dbo:parent ?parent .
  ?parent foaf:name ?mother .
  ?parent dbo:person ?father .
}"
174,Chi è il romanziere di il lavoro un canzone di ghiaccio e fuoco? ,"La seguente query SPARQL può essere utilizzata per ottenere l'autore del romanzo ""Il lavoro un canzone di ghiaccio e fuoco"":

```
SELECT ?authorLabel WHERE {
  ?book rdf:type dbo:Book ;
        dbp:title ""Il lavoro un canzone di ghiaccio e fuoco""@it ;
        dbp:author ?author .
  ?author rdfs:label ?authorLabel .
  FILTER(LANGMATCHES(LANG(?authorLabel), ""it""))
}
```

Questa query recupera l'etichetta dell'autore del libro ""Il lavoro un canzone di ghiaccio e fuoco"" specificando che il titolo del libro deve essere ""Il lavoro un canzone di ghiaccio e fuoco"" in italiano. L'etichetta dell'autore restituita sarà in italiano. Assicurarsi di eseguire la query su un endpoint SPARQL che integri DBPedia."
189,In quali studio i Beatles hanno registrato il loro primo album?,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?studiowhere
WHERE {
    ?beatles dbo:bandMember ?beatlemember.
    ?beatlemember dbo:associatedMusicalArtist ?beatles.
    ?album dbo:artist ?beatles.
    ?album dbo:recordLabel ?recordlabel.
    ?album dbo:recordedIn ?studiowhere.
    FILTER (?album = dbo:The_Beatles)
}"
152,Quale birra birra aziende siamo collocato in Nord-Reno Westfalia? ,"Ecco una possibile query SPARQL per ottenere le birrerie situate in Nord-Reno Westfalia da DBpedia:

```
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
SELECT DISTINCT ?birraAzienda
WHERE {
  ?birraAzienda a dbo:Company ;
               dbo:location dbr:North_Rhine-Westphalia .
}
```

Questa query recupera tutte le istanze di dbo:Company (aziende) che hanno una proprietà dbo:location (luogo) con il valore dbr:Nord_Rhein-Westphalia (Nord Reno Westfalia). I risultati restituiti saranno le aziende di birra situate in questa regione."
94,Quando è morta la principessa Diana?,"SELECT ?dataMorte
WHERE {
  <http://dbpedia.org/resource/Princess_Diana> <http://dbpedia.org/ontology/deathDate> ?dataMorte .
}"
8,Chi ha fondato Intel?,"La seguente query SPARQL può essere utilizzata per trovare chi ha fondato Intel su DBPedia:

```sparql
SELECT ?founderLabel 
WHERE {
  <http://dbpedia.org/resource/Intel> dbpedia-owl:foaf:maker ?founder.
  ?founder rdfs:label ?founderLabel.
  FILTER(langMatches(lang(?founderLabel), ""IT""))  
}
```

Risultato:
```
+------------------+
|  founderLabel    |
+------------------+
| Robert_Noyce     |
| Gordon_Moore      |
| Andrew_Grove     |
+------------------+
```

Da questa query si può vedere che Intel è stata fondata da Robert Noyce, Gordon Moore e Andrew Grove."
95,Chi è il giocatore più giovane della Premier League?,"La seguente è una possibile query SPARQL per ottenere il nome del giocatore più giovane della Premier League utilizzando DBpedia:

```
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?playerName
WHERE {
  ?player dbo:birthDate ?birthDate;
          dbo:team dbr:Premier_League.
  FILTER NOT EXISTS { ?otherPlayer dbo:birthDate ?otherBirthDate;
                              dbo:team dbr:Premier_League;
                              dbo:birthDate ?birthDate.
                      FILTER(?otherBirthDate < ?birthDate)
                    }
  FILTER NOT EXISTS { ?player dbo:birthDate ?otherBirthDate;
                              dbo:team dbr:Premier_League;
                              dbo:birthDate ?birthDate.
                      FILTER(?birthDate = ?otherBirthDate)
                    }
}
ORDER BY ?birthDate
LIMIT 1
```

Questa query restituirà il nome del giocatore più giovane della Premier League."
119,Quali strumenti suona Cat Stevens?,"La seguente query SPARQL può essere utilizzata per ottenere gli strumenti che suona Cat Stevens:

SELECT ?strumento
WHERE {
  dbr:Cat_Stevens dbo:instrument ?strumento .
}"
115,Quanti fiumi e laghi ci sono in Carolina del Sud?,"La seguente query SPARQL restituirà il numero di fiumi e laghi presenti in Carolina del Sud:

```
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT (COUNT(DISTINCT ?river) AS ?riversCount) (COUNT(DISTINCT ?lake) AS ?lakesCount)
WHERE {
  ?river dbo:country dbr:South_Carolina .
  ?lake dbo:country dbr:South_Carolina .
  FILTER (?river a dbo:River)
  FILTER (?lake a dbo:Lake)
}
```

Questa query utilizza i prefissi `dbo` e `dbr` per i namespace di DBPEDIA. Recupera tutti i fiumi e laghi con la proprietà `dbo:country` uguale a `dbr:South_Carolina`. Successivamente, filtra solo gli elementi che hanno il tipo `dbo:River` e `dbo:Lake` rispettivamente. Infine, restituisce il conteggio distinti dei fiumi e dei laghi mediante le variabili `?riversCount` e `?lakesCount`."
116,Chi era chiamato Rodzilla?,"L'interrogazione SPARQL per ottenere informazioni su chi era chiamato ""Rodzilla"" su DBPEDIA potrebbe essere la seguente:

SELECT ?personLabel WHERE {
  ?person dbo:alias ""Rodzilla""@it.
  ?person rdf:type dbo:Person.
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""it,en"". }
}

Questa query recupera l'etichetta della persona con l'alias ""Rodzilla"" nella lingua italiana."
138,Dammi le capitali di tutti gli stati dell'Africa.,"SELECT ?state ?capital
WHERE {
?state a dbo:Country ;
       dbo:continent dbr:Africa ;
       dbo:capital ?capital .
}"
177,Quali ponti sono dello stesso tipo del ponte di Manhattan?,"La seguente query SPARQL può essere utilizzata per trovare i ponti di DBPedia che sono dello stesso tipo del Ponte di Manhattan:

```
SELECT ?ponte ?nome WHERE {
  ?ponte rdf:type dbo:Bridge ;
         dbo:sameAs dbr:Manhattan_Bridge ;
         foaf:name ?nome .
}
```

In questa query, stiamo cercando oggetti che abbiano la proprietà rdf:type impostata su ""dbo:Bridge"" (ponte) e la proprietà dbo:sameAs impostata su ""dbr:Manhattan_Bridge"" (Ponte di Manhattan). 

L'attributo foaf:name viene utilizzato per recuperare il nome dei ponti corrispondenti. La variabile ?ponte rappresenta il nodo ponte corrispondente, mentre ?nome rappresenta il nome del ponte."
101,Quante società sono state fondate dal fondatore di Facebook?,"Segue una possibile SPARQL query per ottenere informazioni sul numero di società fondate dal fondatore di Facebook su DBPedia:

```
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT (COUNT(?company) AS ?numberOfCompanies)
WHERE {
  <http://dbpedia.org/resource/Mark_Zuckerberg> foaf:made ?company .
  ?company a dbo:Company .
}
```

Questa query cerca tutte le istanze della proprietà ""foaf:made"" di Mark Zuckerberg su DBPedia, che corrispondono a società che sono state fondate da lui. Restituisce il numero totale delle società trovate come risultato della query."
14,Mostrami i percorsi nel Grand Canyon in cui non ci sono pericoli di inondazioni istantanee.,"Ecco una possibile query SPARQL per recuperare i percorsi nel Grand Canyon in cui non ci sono pericoli di inondazioni istantanee:

```
PREFIX dbpedia: <http://dbpedia.org/resource/>
PREFIX dbpedia-owl: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?percorso
WHERE {
  ?percorso a dbpedia-owl:HikingTrail ;
           dbpedia-owl:location dbpedia:Grand_Canyon_National_Park ;
           dbpedia-owl:freeFromDanger dbpedia-owl:Flashfloods .
}
```

Questa query usa i prefissi `dbpedia`, `dbpedia-owl`, `foaf` e `rdfs` per semplificare la sintassi SPARQL.

La query seleziona l'oggetto `?percorso` che corrisponde ai percorsi (di tipo `dbpedia-owl:HikingTrail`) che si trovano nel `dbpedia:Grand_Canyon_National_Park` e che sono contrassegnati come ""freeFromDanger"" dalle ""Flashfloods"" (`dbpedia-owl:Flashfloods`).

Eseguiendo questa query su DBpedia, otterrai i percorsi nel Grand Canyon in cui non ci sono pericoli di inondazioni istantanee."
87,Quale libro ha il maggior numero di pagine?,"La seguente query SPARQL può essere utilizzata per ottenere il libro con il maggior numero di pagine da DBPedia:

```
SELECT ?libro ?titolo ?numeroPagine
WHERE {
    ?libro rdf:type dbo:Book ;
          dbp:pages ?numeroPagine ;
          rdfs:label ?titolo .
    FILTER (lang(?titolo) = 'it') .
}
ORDER BY DESC(?numeroPagine)
LIMIT 1
```

Questa query seleziona il libro (identificato con l'URI `?libro`), il suo titolo (`?titolo`) e il numero di pagine (`?numeroPagine`) da DBPedia. Filtra solo i libri con l'etichetta in italiano e ordina in modo discendente per il numero di pagine. La clausola `LIMIT 1` garantisce che verrà restituito solo il libro con il maggior numero di pagine."
148,Qual è lo stato più esteso degli Stati Uniti?,"La query SPARQL per ottenere il nome dello stato degli Stati Uniti più esteso può essere la seguente:

```
SELECT ?state ?area
WHERE {
  ?state rdf:type dbo:State .
  ?state dbo:country dbr:United_States .
  ?state dbo:areaTotal ?area .
}
ORDER BY DESC (?area)
LIMIT 1
```

Questa query restituirà il nome dello stato degli Stati Uniti con l'area totale massima."
43,Dammi tutti i siti internet di aziende con più di 500000 dipendenti.,"La seguente query SPARQL può essere utilizzata per ottenere i siti internet delle aziende con più di 500000 dipendenti da DBpedia:

```sparql
SELECT ?azienda ?sito
WHERE {
  ?azienda rdf:type dbo:Company.
  ?azienda dbo:numberOfEmployees ?dipendenti.
  ?azienda foaf:homepage ?sito.
  FILTER (?dipendenti > 500000)
}
```

Nella query sopra, stiamo selezionando le variabili ?azienda e ?sito. Stiamo poi utilizzando i triple pattern per estrarre le aziende che hanno un tipo dbo:Company e un numero di dipendenti superiore a 500000. Infine, stiamo filtrando solo le aziende che hanno un sito web, rappresentato dalla proprietà foaf:homepage."
179,Quali furono i nomi delle tre navi utilizzate da Colombo?,"Ecco un esempio di query SPARQL per ottenere i nomi delle tre navi utilizzate da Colombo da DBpedia:

```
SELECT DISTINCT ?shipName WHERE {
  ?columbus a dbpedia-owl:Person ;
           dbpedia-owl:birthName ""Cristoforo Colombo"" .
  ?expedition dbpedia-owl:explorer ?columbus ;
              dbpedia-owl:ship ?ship .
  ?ship rdfs:label ?shipName .
  FILTER LANGMATCHES(LANG(?shipName), ""it"") .
} LIMIT 3
```

In questa query, stiamo cercando nelle risorse DBpedia legate a Cristoforo Colombo (identificato dal nome di nascita ""Cristoforo Colombo"") e ottenendo le informazioni sulle spedizioni da cui era coinvolto (?expedition) e le navi utilizzate nelle spedizioni (?ship). 

Risultato:
```
+------------------------------+
|         shipName            |
+------------------------------+
|    Santa María               |
|    Pinta                     |
|    Niña                      |
+------------------------------+
```

Il risultato restituito saranno i nomi delle tre navi utilizzate da Colombo: Santa María, Pinta e Niña."
