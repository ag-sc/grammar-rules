id,status,question,sparqlQueGG,sparql
1,right different,List all boardgames by GMT.,PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games },"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?boardgame
WHERE {
  ?boardgame a dbo:Game;
             dbp:publisher dbr:GMT_Games.
}
LIMIT 100"
2,SPARQL logic wrong,Who developed Skype?,PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. },"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?developer
WHERE {
  ?skype dbo:developer ?developer .
  FILTER(?developer != dbo:Skype) .
}
LIMIT 1"
3,right,Which people were born in Heraklion?,PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. },"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?personLabel
WHERE {
    ?person dbo:birthPlace dbr:Heraklion.
    ?person foaf:name ?personLabel.
    FILTER(langMatches(lang(?personLabel), ""EN""))
}
LIMIT 100"
4,invalid property,In which U.S. state is Area 51 located?,PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. },"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?stateLabel
WHERE {
  ?area51 dbo:location ?state .
  ?state dbo:country <http://dbpedia.org/resource/United_States> .
  ?state rdfs:label ?stateLabel .
  FILTER (LANG(?stateLabel) = 'en')
  FILTER (CONTAINS(?stateLabel, ""state""))
}
LIMIT 1"
5,SPARQL logic wrong,Who is the mayor of New York City?,PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri },"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?mayor
WHERE {
  ?city dbo:country <http://dbpedia.org/resource/United_States> .
  ?city dbp:name ""New_York_City""@en .
  ?city dbo:leader ?mayor .
  ?mayor dbo:title ?title .
  FILTER (?title = ""Mayor""@en)
}"
6,,Which countries have places with more than two caves?,PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?cave rdf:type dbo:Cave ; dbo:location ?uri . ?uri rdf:type dbo:Country } GROUP BY ?uri HAVING ( COUNT(?cave) > 2 ),"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?country WHERE {
  ?country rdf:type dbo:Country ;
           dbo:place ?place .
  ?place dbo:cave ?cave .
}
GROUP BY ?country
HAVING (COUNT(?cave) > 2)
ORDER BY ?country
The above SPARQL query retrieves the countries that have places with more than two caves from DBpedia."
7,right,Where did Abraham Lincoln die?,PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. },"SELECT ?place
WHERE {
  dbpedia:Abraham_Lincoln dbo:deathPlace ?place.
}"
8,invalid property,Which airports does Air China serve?,PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri },"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?airport
WHERE {
  dbr:Air_China dbo:operates ?route .
  ?route dbo:destination ?airport .
  ?airport dbo:location ?location .
  ?location dbo:country dbr:China .
}
"
9,N,Give me all actors starring in movies directed by and starring William Shatner.,PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } },"PREFIX dbpedia-owl: <http://dbpedia.org/ontology/>
PREFIX dbpprop: <http://dbpedia.org/property/>

SELECT DISTINCT ?actor
WHERE {
  ?movie dbpprop:starring ?actor.
  ?movie dbpprop:director ?director.
  ?director dbpprop:starring ?directorStarring.
  ?directorStarring dbo:wikiPageRedirects dbpedia:William_Shatner.
}
"
10,right,What are the official languages of the Philippines?,PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri },"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
SELECT ?languageLabel
WHERE {
  dbr:Philippines dbo:officialLanguage ?language.
  ?language rdfs:label ?languageLabel.
  FILTER (LANG(?languageLabel) = ""en"")
}
"
11,right,Give me all Danish films.,PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:country res:Denmark },"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
SELECT ?film
WHERE {
  ?film rdf:type dbo:Film ;
        dbo:country dbr:Denmark .
}"
12,right different,Which movies starring Brad Pitt were directed by Guy Ritchie?,PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Brad_Pitt ; dbo:director res:Guy_Ritchie },"PREFIX dbp: <http://dbpedia.org/ontology/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?movie WHERE {
  ?movie a dbp:Film ;
        dbp:starring dbr:Brad_Pitt ;
        dbo:director dbr:Guy_Ritchie .
}
"
13,right different,Give me the grandchildren of Bruce Lee.,PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Bruce_Lee dbo:child ?child . ?child <http://dbpedia.org/property/children> ?uri },"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?grandchildren WHERE {
  ?bruceLee dbo:child ?child .
  ?child dbo:child ?grandchildren .
  FILTER (?bruceLee = <http://dbpedia.org/resource/Bruce_Lee>)
}"
14,invalid property,Which other weapons did the designer of the Uzi develop?,PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Weapon ; dbp:designer ?x . res:Uzi dbp:designer ?x FILTER ( ?uri != res:Uzi ) },"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?weapon
WHERE {
  dbr:Uzi dbo:designer ?designer .
  ?designer dbo:notableWorks ?weapon .
  FILTER(?weapon != dbr:Uzi)
}
LIMIT 10"
15,SPARQL structure wrong,Who is the owner of Universal Studios?,PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri },"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?owner WHERE {
  ?universalStudios dbo:owner ?owner .
  ?universalStudios dbo:wikiPageRedirects/dbp:name ""Universal_Studios"" .
}
LIMIT 1"
16,SPARQL logic wrong,Which state of the USA has the highest population density?,PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:densityrank ?rank } ORDER BY ASC(?rank) LIMIT 1,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?state ?populationDensity
WHERE {
  ?state a dbo:Country;
         dbo:largestCity ?largestCity;
         dbp:populationDensity ?populationDensity.
  ?largestCity dbo:country dbr:United_States.
}
ORDER BY DESC(?populationDensity)
LIMIT 1"
17,SPARQL logic wrong,Which monarchs were married to a German?,PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Monarch ; dbo:spouse ?spouse { ?spouse dbo:birthPlace res:Germany } UNION { ?spouse dbo:birthPlace ?p . ?p dbo:country res:Germany } },"PREFIX dbpedia-owl: <http://dbpedia.org/ontology/>
PREFIX dbpprop: <http://dbpedia.org/property/>

SELECT DISTINCT ?monarch ?monarchLabel
WHERE {
  ?monarch rdf:type dbpedia-owl:Monarch ;
           dbpprop:consort ?consort .
  ?consort dbpprop:birthPlace ?birthPlace .
  ?birthPlace dbpedia-owl:country <http://dbpedia.org/resource/Germany> .

  SERVICE <http://DBpedia.org/sparql> {
    ?monarch rdfs:label ?monarchLabel .
    FILTER (lang(?monarchLabel) = 'en')
  }
}
"
18,right different,Which organizations were founded in 1950?,"PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, ""^1950"") }","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dct: <http://purl.org/dc/terms/>

SELECT ?organization WHERE {
  ?organization dbo:formationYear ?year .
  FILTER (year(?year) = 1950)
}
"
19,right,Who created the comic Captain America?,PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Captain_America dbo:creator ?uri },"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?creator
WHERE {
  dbr:Captain_America dbo:creator ?creator.
}"
20,invalid property,Give me the Apollo 14 astronauts.,PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:mission res:Apollo_14 },"SELECT ?astronaut
WHERE {
  ?apollo14 dbpedia-owl:astronaut ?astronaut .
}"
21,invalid resource,Who wrote the book The pillars of the Earth?,PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri },"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?author
WHERE {
  ?book dbo:author ?author .
  ?book dbp:title ""The_Pillars_of_the_Earth""@en .
}"
22,,Which state of the United States of America has the highest density?,PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?state ?population ?area
WHERE {
  ?state a dbo:State ;
         dbo:country dbr:United_States ;
         dbo:populationTotal ?population ;
         dbo:areaTotal ?area .
}
ORDER BY (?population / ?area) DESC
LIMIT 1"
23,invalid resource,Which spaceflights were launched from Baikonur?,PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/launchPad> res:Baikonur_Cosmodrome },"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX db: <http://dbpedia.org/>
SELECT ?spaceflight
WHERE {
  ?spaceflight dbo:launchPad dbr:Baikonur_Cosmodrome
  FILTER EXISTS { ?spaceflight rdf:type dbo:SpaceFlight }
}
LIMIT 10"
24,N,Give me a list of all trumpet players that were bandleaders.,PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet },"PREFIX dbpedia: <http://dbpedia.org/resource/>
PREFIX dbpedia-owl: <http://dbpedia.org/ontology/>

SELECT DISTINCT ?name
WHERE {
  ?musician a dbpedia-owl:MusicalArtist ;
             dbpedia-owl:instrument dbpedia:Trumpet ;
             dbpedia-owl:bandMember ?band .
  ?band dbpedia-owl:bandMember ?musician ;
        dbpedia-owl:genre ?genre .
  FILTER (?musician != ?band)
}
ORDER BY ?name"
25,different SPARQL,Which U.S. states are in the same timezone as Utah?,PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) },"SELECT ?state
WHERE {
  ?state dbo:country dbr:United_States .
  ?state dbo:timeZone dbr:Mountain_Time_Zone .
  FILTER (?state != dbr:Utah)
}"
26,SPARQL logic wrong,Which U.S. states possess gold minerals?,"PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:mineral ?mineral FILTER regex(?mineral, ""gold"", ""i"") }","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?state
WHERE {
  ?state dbo:location dbr:United_States ;
         dbo:mineral dbr:Gold .
}
ORDER BY ?state"
27,different SPARQL,Who is the daughter of Ingrid Bergman married to?,PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri },"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?spouse WHERE {
  ?daughter dbo:parent ?bergman.
  ?daughter foaf:gender ""female"".
  ?daughter foaf:marriage ?marriage.
  ?marriage foaf:spouse ?spouse.

  FILTER(?bergman = dbr:Ingrid_Bergman)
}
"
28,invalid property,How deep is Lake Placid?,PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?n WHERE { <http://dbpedia.org/resource/Lake_Placid_(Texas)> dbo:maximumDepth ?n },"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?depth
WHERE {
    dbr:Lake_Placid dbo:depth ?depth
}
"
29,right,Show me all museums in London.,SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Museum> ; <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/London> },"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbpedia-owl: <http://dbpedia.org/ontology/>

SELECT ?museum WHERE {
 ?museum a dbpedia-owl:Museum ;
         dbpedia-owl:location <http://dbpedia.org/resource/London> .
}"
30,invalid property,Which caves have more than 3 entrances?,SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Cave> ; <http://dbpedia.org/property/entranceCount> ?entrance FILTER ( ?entrance > 3 ) },"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?cave WHERE {
  ?cave dbo:hasEntrance ?entrance.
  {
    SELECT ?cave (COUNT(?entrance) as ?numEntrances) WHERE {
      ?cave dbo:hasEntrance ?entrance.
    } GROUP BY ?cave
  }
  FILTER(?numEntrances > 3)
}
LIMIT 100"
31,right different,Who is the tallest player of the Atlanta Falcons?,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
SELECT ?player ?name
WHERE {
  ?player dbo:team dbr:Atlanta_Falcons ;
          dbo:height ?height ;
          foaf:name ?name .
}
ORDER BY DESC(?height)
LIMIT 1"
32,N,What are the top-10 action role-playing video games according to IGN?,SELECT DISTINCT ?uri WHERE { ?uri <http://purl.org/dc/terms/subject> <http://dbpedia.org/resource/Category:Action_role-playing_video_games> ; <http://dbpedia.org/property/ign> ?score } ORDER BY DESC(?score) LIMIT 10,"PREFIX dbpedia-owl: <http://dbpedia.org/ontology/>
PREFIX dbpprop: <http://dbpedia.org/property/>

SELECT DISTINCT ?gameName
WHERE {
  ?game dbpedia-owl:genre dbpedia-owl:Action_role-playing_video_games .
  ?game dbpedia-owl:basedOnWork ?source .

  ?source dbpprop:website ""IGN"" .

  ?game dbpedia-owl:name ?gameName.
}
ORDER BY DESC(?gameName)
LIMIT 10"
33,N,Give me all writers that won the Nobel Prize in literature.,SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Writer> ; <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Nobel_Prize_in_Literature> },"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbc: <http://dbpedia.org/resource/Category:>

SELECT ?writer
WHERE {
  ?writer dbo:award dbc:Nobel_laureates_in_Literature .
}
"
34,right different,Show me all basketball players that are higher than 2 meters.,SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/BasketballPlayer> ; <http://dbpedia.org/ontology/height> ?n FILTER ( ?n > 2.0 ) },"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
SELECT ?playerName
WHERE {
    ?player dbo:height ?height.
    ?player foaf:name ?playerName.
    FILTER(?height > 200)
}
"
35,invalid property,When was the Statue of Liberty built?,SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Statue_of_Liberty> <http://dbpedia.org/property/beginningDate> ?date },"PREFIX dbpedia: <http://dbpedia.org/resource/>
PREFIX dbp-prop: <http://dbpedia.org/property/>

SELECT ?date
WHERE {
  dbpedia:Statue_of_Liberty dbp-prop:year ?date
}"
36,SPARQL structure wrong,Which states border Illinois?,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Illinois> <http://dbpedia.org/property/borderingstates> ?uri },"SELECT ?stateLabel
WHERE {
   ?illinois dbp:commonName ""Illinois""@en .
   ?state dbp:commonName ?stateLabel .
   ?state dbp:location ?border .
   ?border prov:wasDerivedFrom ?illinois .
}
ORDER BY ?stateLabel"
37,invalid resource,Who developed Minecraft?,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Minecraft> <http://dbpedia.org/ontology/developer> ?uri },"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?developer
WHERE {
  ?game dbo:developer ?developer .
  ?game dbo:wikiPageID 172268 .}  "
38,different lexicalization,Where did Hillel Slovak die?,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hillel_Slovak> <http://dbpedia.org/ontology/deathPlace> ?uri },"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?placeOfDeathLabel
WHERE {
  dbo:Hillel_Slovak dbp:placeOfDeath ?placeOfDeath.
  ?placeOfDeath rdfs:label ?placeOfDeathLabel.
  FILTER (lang(?placeOfDeathLabel) = ""en"")
}
LIMIT 1"
39,right different,What movies does Jesse Eisenberg play in?,SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jesse_Eisenberg> },"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?movie
WHERE {
  ?actor rdf:type dbo:Actor ;
         foaf:name ""Jesse Eisenberg"" ;
         dbo:starring ?movie .
  ?movie rdf:type dbo:Film .
}
ORDER BY ?movie"
40,right,Give all swimmers that were born in Moscow.,SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Swimmer> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Moscow> },"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?swimmer
WHERE {
   ?swimmer rdf:type dbo:Person ;
            dbo:birthPlace dbr:Moscow ;
            rdf:type dbo:Swimmer .
}"
41,SPARQL logic wrong,Give me all cosmonauts.,SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Astronaut> { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Russia> } UNION { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Soviet_Union> } },"SELECT ?cosmonaut
WHERE {
  ?cosmonaut rdf:type dbpedia-owl:Astronaut .
  ?cosmonaut rdf:type dbo:Person .
}
"
42,triple not exist,Give me all Swiss non-profit organizations.,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/type> <http://dbpedia.org/resource/Nonprofit_organization> { ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Switzerland> } UNION { ?uri <http://dbpedia.org/ontology/location> ?x . ?x <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Switzerland> } },"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?organization
WHERE {
  ?organization a dbo:Organisation ;
                dbo:country <http://dbpedia.org/resource/Switzerland> ;
                dbo:classification <http://dbpedia.org/resource/Non-profit_organization> ;
                foaf:name ?name .
}
ORDER BY ?name"
43,right,Which presidents were born in 1945?,"SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/President> ; <http://dbpedia.org/ontology/birthDate> ?date FILTER regex(?date, ""^1945"") }","PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?president
WHERE {
  ?president rdf:type dbo:President .
  ?president dbo:birthDate ?birthDate .
  FILTER (regex(?birthDate, ""^1945"", ""i""))
}
"
44,SPARQL logic wrong,What kind of music did Lou Reed play?,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lou_Reed> <http://dbpedia.org/ontology/genre> ?uri },"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT DISTINCT ?musicGenre
WHERE {
  ?louReed dbo:genre ?musicGenre .
  FILTER (regex(?louReed, ""Lou_Reed""))
  FILTER (regex(?musicGenre, ""Music""))
}"
45,Different SPARQL,Where do the Red Sox play?,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Boston_Red_Sox> <http://dbpedia.org/property/ballpark> ?uri },"PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?stadium
WHERE {
  ?team dbo:teamName ""Boston Red Sox"".
  ?team dbo:ground ?stadium.
}"
46,Different SPARQL,Show a list of soccer clubs that play in the Bundesliga.,SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerClub> ; <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/Bundesliga> },"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?club
WHERE {
  ?club dbo:league dbr:Bundesliga .
  ?club dbo:sport dbr:Football .
}"
47,invalid property,Which volcanos in Japan erupted since 2000?,SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Volcano> ; <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/Japan> ; <http://dbpedia.org/ontology/eruptionYear> ?date FILTER ( year(?date) >= 2000 ) },"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dct: <http://purl.org/dc/terms/>

SELECT ?volcano
WHERE {
  ?volcano dbo:country dbr:Japan;
           dbo:eruptionDate ?eruptionDate.
  FILTER(year(?eruptionDate) >= 2000)
}
ORDER BY ?volcano"
48,right different,Which bridges cross the Seine?,SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Bridge> ; <http://dbpedia.org/ontology/crosses> <http://dbpedia.org/resource/Seine> },"PREFIX dbpedia-owl: <http://dbpedia.org/ontology/>
PREFIX dbpedia: <http://dbpedia.org/resource/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?bridge
WHERE {
  ?bridge a dbpedia-owl:Bridge ;
          dbpedia-owl:crosses dbpedia:Seine ;
          rdfs:label ?label .
  FILTER (LANG(?label) = 'en')
}
LIMIT 100"
49,right,What is the official color of the University of Oxford?,SELECT DISTINCT ?string WHERE { <http://dbpedia.org/resource/University_of_Oxford> <http://dbpedia.org/ontology/officialSchoolColour> ?string },"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?color WHERE {
  <http://dbpedia.org/resource/University_of_Oxford> dbo:officialSchoolColour ?color
}
"
50,right,How many films did Hal Roach produce?,SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> },"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT (COUNT(DISTINCT ?film) AS ?filmCount)
WHERE {
  ?film dbo:producer <http://dbpedia.org/resource/Hal_Roach> .
  ?film rdf:type dbo:Film .
}
"
51,right,Give me all Danish movies.,SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Denmark> },"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?movie
WHERE {
  ?movie a dbo:Film ;
         dbo:country <http://dbpedia.org/resource/Denmark> .
}
LIMIT 100"
52,Different SPARQL,What is the most frequent cause of death?,SELECT DISTINCT ?x WHERE { ?uri <http://dbpedia.org/ontology/deathCause> ?x . } ORDER BY DESC(COUNT(DISTINCT ?uri)) OFFSET 0 LIMIT 1,"SELECT ?cause ?count WHERE {
    ?person dbo:causeOfDeath ?cause .
    {
        SELECT ?cause (COUNT(?person) AS ?count) WHERE {
            ?person dbo:causeOfDeath ?cause .
        } GROUP BY ?cause
    } ORDER BY DESC(?count) LIMIT 1
}"
53,N,Who are the four youngest MVP basketball players?,"SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/BasketballPlayer> ; <http://dbpedia.org/ontology/birthDate> ?date ; <http://dbpedia.org/property/highlights> ?h FILTER regex(?h, ""MVP"") } ORDER BY DESC(?date) OFFSET 0 LIMIT 4","SELECT DISTINCT ?player ?age
WHERE {
    ?player rdf:type dbo:BasketballPlayer .
    ?player dbo:award dbpedia:MVP_Award .
    ?player dbp:mvpyear ?year .
    ?player dbo:birthDate ?birthDate .
    BIND((YEAR(?year) - YEAR(?birthDate)) AS ?age)
}
ORDER BY ASC(?age)
LIMIT 4"
54,Different SPARQL,Give me all companies in Munich.,SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Company> { ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Munich> } UNION { ?uri <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Munich> } UNION { ?uri <http://dbpedia.org/ontology/locationCity> <http://dbpedia.org/resource/Munich> } },"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?company
WHERE {
  ?company dbo:location dbr:Munich ;
           rdf:type dbo:Company .
}"
55,Different SPARQL,Give me the capitals of all countries that the Himalayas run through.,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Himalayas> <http://dbpedia.org/ontology/country> ?country . ?country <http://dbpedia.org/ontology/capital> ?uri },"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?country ?capital WHERE {
  ?country dbo:capital ?capital.
  ?country dbo:isPartOf dbr:Himalayas
}"
56,Different SPARQL,How many movies did Park Chan-wook direct?,SELECT COUNT(DISTINCT ?uri AS ?uri) WHERE { ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Park_Chan-wook> . },"PREFIX dbp: <http://dbpedia.org/resource/>
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT COUNT(?movie) AS ?movieCount
WHERE {
  ?director dbo:director dbp:Park_Chan-wook.
  ?movie dbo:director ?director.
  ?movie rdf:type dbo:Film.
}"
57,Different SPARQL,Which rivers flow into a German lake?,SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/River> . ?x <http://dbpedia.org/ontology/inflow> ?uri ; a <http://dbpedia.org/ontology/Lake> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Germany> },"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?lake ?river
WHERE {
  ?lake rdf:type dbo:Lake .
  ?lake dbo:country dbr:Germany .
  ?river dbo:origin ?lake .
  ?river rdf:type dbo:River .
}
ORDER BY ?lake"
58,right,How many airlines are there?,SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Airline> },"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT (COUNT(DISTINCT ?airline) AS ?count)
WHERE {
  ?airline rdf:type dbo:Airline .
}"
59,different SPARQL,Give me all islands that belong to Japan.,SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Island> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Japan> },"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?island
WHERE {
  ?island dbo:country dbr:Japan .
  ?island dbo:islandType ?islandType .
  FILTER(?islandType IN (dbo:Island, dbo:IslandGroup))
}
ORDER BY ?island"
60,right,How many inhabitants does Maribor have?,SELECT DISTINCT ?num WHERE { <http://dbpedia.org/resource/Maribor> <http://dbpedia.org/ontology/populationTotal> ?num },"SELECT ?population
WHERE {
  dbpedia:Maribor dbpedia-owl:populationTotal ?population .
}"
61,invalid property,Give me all Apollo 14 astronauts.,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/mission> <http://dbpedia.org/resource/Apollo_14> },"PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?astronaut
WHERE {
  ?apollo14 dbo:mission ""Apollo 14""@en .
  ?apollo14 dbo:astronaut ?astronaut .
}
LIMIT 10"
62,right,Which companies have more than 1 million employees?,SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Company> { ?uri <http://dbpedia.org/ontology/numberOfEmployees> ?n } UNION { ?uri <http://dbpedia.org/property/numEmployees> ?n } FILTER ( ?n > 1000000 ) },"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?company
WHERE {
  ?company rdf:type dbo:Company ;
           dbo:numberOfEmployees ?employees .
  FILTER (?employees > 1000000)
}
LIMIT 10"
63,different SPARQL,In which films directed by Garry Marshall was Julia Roberts starring?,SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Julia_Roberts> ; <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Garry_Marshall> },"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?filmName
WHERE {
  ?film dbo:director dbr:Garry_Marshall ;
        dbo:starring dbr:Julia_Roberts ;
        dbo:wikiPageRedirects ?filmName .
}
"
64,right,Give me all soccer clubs in the Premier League.,SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerClub> ; <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/Premier_League> },"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbr: <http://dbpedia.org/resource/>
SELECT ?club
WHERE {
  ?club rdf:type dbo:SoccerClub ;
        dbp:league dbr:Premier_League .
}"
65,SPARQL logic wrong,What is the highest place of the Urals?,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ural_Mountains> <http://dbpedia.org/property/highest> ?uri },"PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?place
WHERE {
  ?place dbo:location ?location ;
         dbp:range ?range .
  ?location dbo:parent ?parent ;
            rdfs:label ?label .
  ?parent rdfs:label ""Urals""@en .
}
ORDER BY DESC(?range)
LIMIT 1"
66,different SPARQL,Who is the governor of Wyoming?,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Wyoming> <http://dbpedia.org/property/governor> ?uri },"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?governorLabel
WHERE {
  ?governor dbp:governor ?state.
  ?governor dbo:state ?state.
  ?state dbo:stateName ""Wyoming""@en.
  SERVICE <http://dbpedia.org/sparql> {
    ?governor rdfs:label ?governorLabel.
    FILTER (lang(?governorLabel) = 'en')
  }
}
LIMIT 1"
67,different SPARQL,Where did the architect of the Eiffel Tower study?,N,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?studyLocation
WHERE {
  dbo:Eiffel_Tower dbp:architect ?architect.
  ?architect dbp:education ?education.
  ?education foaf:name ?studyLocation.
}"
68,different SPARQL,Give me all world heritage sites designated within the past two years.,SELECT DISTINCT ?uri WHERE { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WorldHeritageSite> . { ?uri <http://dbpedia.org/property/year> '2013'^^xsd:integer . } UNION { ?uri <http://dbpedia.org/property/year> '2014'^^xsd:integer . } },"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX dbc: <http://dbpedia.org/resource/Category:>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?site ?siteLabel ?date
WHERE {
  ?site rdf:type dbo:WorldHeritageSite .
  ?site dct:subject dbc:World_Heritage_Sites_by_year_of_establishment .
  ?site dct:subject dbc:New_World_Heritage_Sites .
  ?site rdfs:label ?siteLabel .
  ?site dct:subject ?category .
  ?category rdfs:label ""World_Heritage_Sites_by_year_of_establishment"" .
  ?site dct:issued ?date .
  FILTER (
    year(?date) >= year(now())-2
  )

  FILTER (langMatches(lang(?siteLabel), ""en""))
}
ORDER BY DESC(?date)
LIMIT 100"
69,different SPARQL,Give me all actors who were born in Paris after 1950.,SELECT DISTINCT ?uri WHERE { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Actor> . ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Paris> . ?uri <http://dbpedia.org/ontology/birthDate> ?date . FILTER ( ?date >= xsd:dateTime('1950-12-31T00:00:00Z')) },"SELECT ?actor WHERE {
  ?actor rdf:type dbo:Actor .
  ?actor dbp:birthPlace dbr:Paris .
  ?actor dbp:birthDate ?birthDate .
  FILTER(YEAR(?birthDate) > 1950)
}"
70,different SPARQL,Which movies star both Liz Taylor and Richard Burton?,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Elizabeth_Taylor> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Richard_Burton> },"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?movie
WHERE {
  ?movie dbo:starring dbr:Liz_Taylor, dbr:Richard_Burton.
  ?movie rdf:type dbo:Film.
}
LIMIT 10"
71,SPARQL structure wrong,Give me all Australian nonprofit organizations.,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/type> <http://dbpedia.org/resource/Nonprofit_organization> { ?uri <http://dbpedia.org/ontology/locationCountry> <http://dbpedia.org/resource/Australia> } UNION { ?uri <http://dbpedia.org/ontology/location> ?x . ?x <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Australia> } },"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?organization
WHERE {
  ?organization rdf:type dbo:Organisation ;
                dbo:location dbr:Australia ;
                dbo:nonProfit status: A
}
LIMIT 100"
72,different SPARQL,Which pope succeeded John Paul II?,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pope_John_Paul_II> <http://dbpedia.org/property/successor> ?uri },"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?successor
WHERE {
  dbo:John_Paul_II dbo:successor ?successor.
  ?successor rdf:type dbo:Pope.
  ?successor foaf:name ?successorName.
}
LIMIT 1"
73,right,Give me all ESA astronauts.,SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Astronaut> ; <http://dbpedia.org/property/type> <http://dbpedia.org/resource/European_Space_Agency> },"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?astronaut
WHERE {
  ?astronaut dbo:occupation dbr:Astronaut ;
              dbo:organization dbr:European_Space_Agency ;
              foaf:name ?name .
}"
74,different SPARQL,Who was president of Pakistan in 1978?,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/title> <http://dbpedia.org/resource/President_of_Pakistan> ; <http://dbpedia.org/property/years> 1978 },"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?president
WHERE {
  ?president dbo:office dbp:President .
  ?president dbo:officeHolderOf/dbp:from ""1978-01-01""^^xsd:date .
  ?president dbo:officeHolderOf/dbp:to ""1978-12-31""^^xsd:date .
  ?president dbo:officeLocation dbr:Pakistan .
}
"
75,SPARQL logic wrong,Who is the owner of Rolls-Royce?,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Rolls-Royce_Motors> <http://dbpedia.org/ontology/owner> ?uri },"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?owner
WHERE {
  ?rollsRoyce dbo:wikiPageID ?rollsRoyceID .
  ?rollsRoyce dbo:owner ?owner .
  FILTER (?rollsRoyceID = 13651)
}
LIMIT 10"
76,right,How many museums does Paris have?,SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Museum> ; <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Paris> },"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT (COUNT(DISTINCT ?museum) as ?count)
WHERE {
  ?museum a dbo:Museum ;
          dbo:location dbr:Paris .
}
"
77,different SPARQL,Where was JFK assassinated?,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_F._Kennedy> <http://dbpedia.org/ontology/deathPlace> ?uri },"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT DISTINCT ?place WHERE {
  ?assassination dbo:deathCause <http://dbpedia.org/resource/Assassination_of_John_F._Kennedy>.
  ?assassination dbo:place ?place.
}"
78,SPARQL structure wrong,Give me all federal chancellors of Germany.,"SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Person> { ?uri <http://dbpedia.org/ontology/office> ""Chancellor of Germany"" } UNION { ?uri <http://dbpedia.org/property/office> <http://dbpedia.org/resource/Chancellor_of_Germany> } }","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?chancellor
WHERE {
  ?chancellor a dbo:OfficeHolder ;
    dbo:office dbo:Chancellor ;
    dbo:leader dbr:Germany .

  FILTER regex(?chancellor, ""Federal_Counsellor_of_Germany"", ""i"")
}
"
79,different SPARQL,Show me everyone who was born on Halloween.,SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Person> { ?uri <http://dbpedia.org/ontology/birthDate> ?date } UNION { ?uri <http://dbpedia.org/property/birthDate> ?date } <http://dbpedia.org/resource/Halloween> <http://dbpedia.org/property/date> ?date },"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?person ?name ?birthdate
WHERE {
  ?person dbo:birthDate ?birthdate.
  ?person foaf:name ?name.
  FILTER regex(str(?birthdate), ""10-31$"").
}"
80,different SPARQL,Which beer originated in Ireland?,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/type> <http://dbpedia.org/resource/Beer> ; <http://dbpedia.org/ontology/origin> <http://dbpedia.org/resource/Beer_in_Ireland> },"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?beer
WHERE {
  ?beer rdf:type dbo:Beer ;
        dbp:origin dbr:Ireland .
}
"
81,invalid property,To which countries does the Himalayan mountain system extend?,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Himalayas> <http://dbpedia.org/ontology/country> ?uri },"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbo: <http://dbpedia.org/resource/>

SELECT ?country
WHERE {
  ?country dbo:mountainSystem dbo:Himalayas .
  ?country rdf:type dbo:Country .
}"
82,right,Which actors were born in Germany?,SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Actor> { ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Germany> } UNION { ?uri <http://dbpedia.org/ontology/birthPlace> ?place . ?place <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Germany> } },"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?actor
WHERE {
  ?actor dbo:birthPlace ?birthPlace .
  ?birthPlace dbo:country <http://dbpedia.org/resource/Germany> .
  ?actor rdf:type dbo:Actor .
}
ORDER BY ?actor
LIMIT 100"
83,different SPARQL,How much carbs does peanut butter have?,SELECT DISTINCT ?carbs WHERE { <http://dbpedia.org/resource/Peanut_butter> <http://dbpedia.org/property/carbs> ?carbs },"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT DISTINCT ?carbs
WHERE {
  ?peanutButter dbo:carbohydrate ?carbs .
  FILTER contains(lcase(str(?peanutButter)), ""peanut_butter"")
}
LIMIT 1"
84,different SPARQL,Who produced the most films?,SELECT DISTINCT ?uri WHERE { ?film <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film> . ?film <http://dbpedia.org/ontology/producer> ?uri . } ORDER BY DESC(COUNT(?film)) OFFSET 0 LIMIT 1,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?producer (COUNT(?film) AS ?filmCount)
WHERE {
  ?film dbo:producer ?producer .
}
GROUP BY ?producer
ORDER BY DESC(?filmCount)
LIMIT 1"
85,right,How many employees does Google have?,SELECT DISTINCT ?num WHERE { <http://dbpedia.org/resource/Google> <http://dbpedia.org/ontology/numberOfEmployees> ?num },"SELECT ?employees WHERE {
  <http://dbpedia.org/resource/Google> <http://dbpedia.org/ontology/numberOfEmployees> ?employees.
}"
86,right,Give me all actors who were born in Berlin.,SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Actor> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Berlin> },"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?actor
WHERE {
  ?actor dbo:birthPlace dbr:Berlin .
  ?actor a dbo:Actor .
}
"
87,different SPARQL,Who created Goofy?,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Goofy> <http://dbpedia.org/ontology/creator> ?uri },"SELECT ?creator WHERE {
    ?goofy dbo:creator ?creator .
    ?goofy foaf:name ""Goofy""@en .
}"
88,SPARQL structure wrong,Which music albums contain the song Last Christmas?,"SELECT DISTINCT ?uri WHERE { ?single <http://dbpedia.org/ontology/album> ?uri ; <http://www.w3.org/2000/01/rdf-schema#label> ""Last Christmas""@en }","SELECT ?albumName
WHERE {
  ?album rdf:type dbo:Album ;
         dbo:musicalArtist ?artist ;
         dbo:recordedIn ?studio ;
         dbo:trackList/rdf:rest*/rdf:first/dbo:musicalWork ?song .
  ?song foaf:name ""Last Christmas"" .
  FILTER (LANG(?albumName) = ""en"")
}
ORDER BY ?albumName"
89,different SPARQL,When was Alberta admitted as province?,SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Alberta> <http://dbpedia.org/property/admittancedate> ?date },"SELECT ?date
WHERE {
  dbr:Alberta dbo:formationDate ?date .
}"
90,SPARQL logic wrong,How many missions does the Soyuz programme have?,SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/property/programme> <http://dbpedia.org/resource/Soyuz_programme> },"PREFIX dbpedia-owl: <http://dbpedia.org/ontology/>
SELECT (COUNT(?mission) AS ?missionCount)
WHERE {
  ?spacecraft dbpedia-owl:spaceAgency <http://dbpedia.org/resource/Roscosmos> .
  ?spacecraft dbpedia-owl:programme ?programme .
  ?programme rdfs:label ""Soyuz programme""@en .
  ?mission dbpedia-owl:vehicle ?spacecraft .
}"
91,different SPARQL,Give me all the TV shows with Neil Patrick Harris.,SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/TelevisionShow> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Neil_Patrick_Harris> },"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?show
WHERE {
  ?person dbo:starring dbr:Neil_Patrick_Harris .
  ?show dbo:starring ?person .
  ?show rdf:type dbo:TelevisionShow .
}
GROUP BY ?show
ORDER BY ?show"
92,different SPARQL,When were the Hells Angels founded?,SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Hells_Angels> <http://dbpedia.org/property/founded> ?date },"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?foundingDate
WHERE {
  <http://dbpedia.org/resource/Hells_Angels> dbo:foundingDate ?foundingDate.
}"
93,right,What is the net income of Apple?,SELECT DISTINCT ?ni WHERE { <http://dbpedia.org/resource/Apple> <http://dbpedia.org/ontology/netIncome> ?ni },"SELECT ?netIncome WHERE {
  dbpedia:Apple_Inc dbpedia-owl:netIncome ?netIncome
}"
94,invalid resource,Give me all Swedish holidays.,SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Holiday> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Sweden> },"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?holidayLabel
WHERE {
  ?holiday a dbo:Holiday ;
           dbo:country dbp:Sweden ;
           rdfs:label ?holidayLabel .
  FILTER (LANG(?holidayLabel) = 'en')
}"
95,different SPARQL,In which city was the former Dutch queen Juliana buried?,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Juliana_of_the_Netherlands> <http://dbpedia.org/property/burialPlace> ?uri . ?uri a <http://dbpedia.org/ontology/Settlement> },"PREFIX dbpedia-owl: <http://dbpedia.org/ontology/>
PREFIX dbpprop: <http://dbpedia.org/property/>

SELECT ?city
WHERE {
  <http://dbpedia.org/resource/Juliana_of_the_Netherlands> dbpedia-owl:burialPlace ?place.
  ?place dbpprop:location ?city.
}"
96,SPARQL structure wrong,List all the musicals with music by Leonard Bernstein.,SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Musical> ; <http://dbpedia.org/ontology/musicBy> <http://dbpedia.org/resource/Leonard_Bernstein> },"PREFIX dbo:<http://dbpedia.org/ontology/>
PREFIX dbp:<http://dbpedia.org/property/>
PREFIX dct:<http://purl.org/dc/terms/>

SELECT DISTINCT ?musical
WHERE {
  ?musical dbo:composer [a dbo:Person; dbo:birthName ""Leonard Bernstein""] .
  ?musical a dbo:Musical .
}
ORDER BY ?musical"
97,SPARQL logic wrong,Give me all companies in the advertising industry.,"SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Company> { ?uri <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Advertising> } UNION { ?uri <http://dbpedia.org/ontology/industry> ?industry FILTER regex(?industry, ""advertising"", ""i"") } }","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbc: <http://dbpedia.org/resource/Category:>
PREFIX dct: <http://purl.org/dc/terms/>
SELECT ?company
WHERE {
  ?company dct:subject dbc:Advertising_companies .
}
LIMIT 100"
98,SPARQL logic wrong,What is the largest metropolitan area in Washington state?,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Washington_(state)> <http://dbpedia.org/property/largestmetro> ?uri },"SELECT ?area ?areaLabel
WHERE {
  ?area a dbo:City ;
        dbo:isPartOf dbr:Washington_(state) ;
        dbo:populationTotal ?population .
  FILTER NOT EXISTS { ?area dbo:isPartOf ?parentArea }
}
ORDER BY DESC(?population)
LIMIT 1
BINDINGS ?areaLabel { ""Metropolitan area of"" }
"
99,different SPARQL,Who killed John Lennon?,SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Person> ; <http://dbpedia.org/property/conviction> <http://dbpedia.org/resource/Death_of_John_Lennon> },"SELECT ?killer
WHERE {
  dbpedia:John_Lennon dbpedia-owl:deathCause ?cause.
  ?cause rdfs:label ?killer.
  FILTER(CONTAINS(LCASE(?killer), ""kill""))
}"
100,different SPARQL,Which writers studied in Istanbul?,SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Writer> { ?uri <http://dbpedia.org/ontology/almaMater> ?x } UNION { ?uri <http://dbpedia.org/ontology/education> ?x } { ?x <http://dbpedia.org/ontology/city> <http://dbpedia.org/resource/Istanbul> } UNION { ?x <http://dbpedia.org/property/city> <http://dbpedia.org/resource/Istanbul> } },"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?writer
WHERE {
  ?writer dbo:almaMater dbr:Istanbul_University .
  FILTER EXISTS { ?writer dbo:occupation dbr:Writer }
}
LIMIT 100"
