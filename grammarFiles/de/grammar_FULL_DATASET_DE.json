{
  "grammarEntries" : [ {
    "id" : "1",
    "lexicalEntryUri" : "http://localhost:8080#Höhe_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Lighthouse" ],
    "returnType" : [ "Thing" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir die Höhe von (X).", "was ist die Höhe (X)?", "was ist die Höhe von (X)?", "was war die Höhe (X)?", "was war die Höhe von (X)?", "welche (Y) sind die Höhe von (X)?", "welche (Y) waren die Höhe von (X)?", "welcher (Y) ist die Höhe von (X)?", "welcher (Y) war die Höhe von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/height> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "2",
    "lexicalEntryUri" : "http://localhost:8080#Höhe_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Lighthouse", "Thing" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Höhe von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/height> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "3",
    "lexicalEntryUri" : "http://localhost:8080#Höhe_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Lighthouse" ],
    "returnType" : [ "Thing" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Höhe von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/height> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "4",
    "lexicalEntryUri" : "http://localhost:8080#Spiel_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Agent" ],
    "returnType" : [ "Work" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Spiele von (X).", "Gib mir das Spiel von (X).", "Gib mir die Spiele von (X).", "Liste alle Spiele von (X) auf.", "Liste alle Spiele von (X).", "Liste d Spiele von (X) auf.", "was ist das Spiel (X)?", "was ist das Spiel von (X)?", "was sind d Spiele (X)?", "was sind d Spiele von (X)?", "was war das Spiel (X)?", "was war das Spiel von (X)?", "was waren d Spiele (X)?", "was waren d Spiele von (X)?", "welche (Y) sind das Spiel von (X)?", "welche (Y) waren das Spiel von (X)?", "welcher (Y) ist das Spiel von (X)?", "welcher (Y) war das Spiel von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/publisher> ?objOfProp .}",
    "bindingSparql" : null,
    "returnVariable" : "subjOfProp"
  }, {
    "id" : "5",
    "lexicalEntryUri" : "http://localhost:8080#Spiel_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Agent", "Work" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) das Spiel von (X).", "sind (X) d Spiele von (X)." ],
    "sparqlQuery" : "ASK WHERE {?Answer <http://dbpedia.org/ontology/publisher> ?objOfProp .}",
    "bindingSparql" : null,
    "returnVariable" : "subjOfProp"
  }, {
    "id" : "6",
    "lexicalEntryUri" : "http://localhost:8080#Spiel_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Agent" ],
    "returnType" : [ "Work" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "das Spiel von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/publisher> ?objOfProp .}",
    "bindingSparql" : null,
    "returnVariable" : "subjOfProp"
  }, {
    "id" : "7",
    "lexicalEntryUri" : "http://localhost:8080#Staatsangehörigkeit_of",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Person" ],
    "returnType" : [ "Country" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Staatsangehörigkeit von (X).", "Gib mir die Staatsangehörigkeit von (X).", "Liste alle Staatsangehörigkeit von (X) auf.", "Liste alle Staatsangehörigkeit von (X).", "Liste die Staatsangehörigkeit von (X) auf.", "was ist die Staatsangehörigkeit (X)?", "was ist die Staatsangehörigkeit von (X)?", "was sind die Staatsangehörigkeit (X)?", "was sind die Staatsangehörigkeit von (X)?", "was war die Staatsangehörigkeit (X)?", "was war die Staatsangehörigkeit von (X)?", "was waren die Staatsangehörigkeit (X)?", "was waren die Staatsangehörigkeit von (X)?", "welche (Y) sind die Staatsangehörigkeit von (X)?", "welche (Y) waren die Staatsangehörigkeit von (X)?", "welcher (Y) ist die Staatsangehörigkeit von (X)?", "welcher (Y) war die Staatsangehörigkeit von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/nationality> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "8",
    "lexicalEntryUri" : "http://localhost:8080#Staatsangehörigkeit_of",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Person", "Country" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Staatsangehörigkeit von (X).", "sind (X) die Staatsangehörigkeit von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/nationality> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "9",
    "lexicalEntryUri" : "http://localhost:8080#Staatsangehörigkeit_of",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Person" ],
    "returnType" : [ "Country" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Staatsangehörigkeit von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/nationality> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "10",
    "lexicalEntryUri" : "http://localhost:8080#zutaten_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Food" ],
    "returnType" : [ "Thing" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Zutaten von (X).", "Gib mir die Zutaten von (X).", "Liste alle Zutaten von (X) auf.", "Liste alle Zutaten von (X).", "Liste die Zutaten von (X) auf.", "was ist die Zutaten (X)?", "was ist die Zutaten von (X)?", "was sind die Zutaten (X)?", "was sind die Zutaten von (X)?", "was war die Zutaten (X)?", "was war die Zutaten von (X)?", "was waren die Zutaten (X)?", "was waren die Zutaten von (X)?", "welche (Y) sind die Zutaten von (X)?", "welche (Y) waren die Zutaten von (X)?", "welcher (Y) ist die Zutaten von (X)?", "welcher (Y) war die Zutaten von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/ingredient> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "11",
    "lexicalEntryUri" : "http://localhost:8080#zutaten_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Food", "Thing" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Zutaten von (X).", "sind (X) die Zutaten von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/ingredient> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "12",
    "lexicalEntryUri" : "http://localhost:8080#zutaten_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Food" ],
    "returnType" : [ "Thing" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Zutaten von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/ingredient> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "13",
    "lexicalEntryUri" : "http://localhost:8080#boardgame_by_1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Agent" ],
    "returnType" : [ "Work" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Brettspiele von (X).", "Gib mir das Brettspiel von (X).", "Gib mir die Brettspiele von (X).", "Liste alle Brettspiele von (X) auf.", "Liste alle Brettspiele von (X).", "Liste d Brettspiele von (X) auf.", "was ist das Brettspiel (X)?", "was ist das Brettspiel von (X)?", "was sind d Brettspiele (X)?", "was sind d Brettspiele von (X)?", "was war das Brettspiel (X)?", "was war das Brettspiel von (X)?", "was waren d Brettspiele (X)?", "was waren d Brettspiele von (X)?", "welche (Y) sind das Brettspiel von (X)?", "welche (Y) waren das Brettspiel von (X)?", "welcher (Y) ist das Brettspiel von (X)?", "welcher (Y) war das Brettspiel von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/publisher> ?objOfProp .}",
    "bindingSparql" : null,
    "returnVariable" : "subjOfProp"
  }, {
    "id" : "14",
    "lexicalEntryUri" : "http://localhost:8080#boardgame_by_1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Agent", "Work" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) das Brettspiel von (X).", "sind (X) d Brettspiele von (X)." ],
    "sparqlQuery" : "ASK WHERE {?Answer <http://dbpedia.org/ontology/publisher> ?objOfProp .}",
    "bindingSparql" : null,
    "returnVariable" : "subjOfProp"
  }, {
    "id" : "15",
    "lexicalEntryUri" : "http://localhost:8080#boardgame_by_1",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Agent" ],
    "returnType" : [ "Work" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "das Brettspiel von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/publisher> ?objOfProp .}",
    "bindingSparql" : null,
    "returnVariable" : "subjOfProp"
  }, {
    "id" : "16",
    "lexicalEntryUri" : "http://localhost:8080#Enkel_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Person" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Enkel von (X).", "Gib mir den Enkel von (X).", "Gib mir die Enkel von (X).", "Liste alle Enkel von (X) auf.", "Liste alle Enkel von (X).", "Liste die Enkel von (X) auf.", "welche (Y) sind die Enkel von (X)?", "welche (Y) waren die Enkel von (X)?", "welcher (Y) ist die Enkel von (X)?", "welcher (Y) war die Enkel von (X)?", "wer ist der Enkel (X)?", "wer ist der Enkel von (X)?", "wer sind die Enkel (X)?", "wer sind die Enkel von (X)?", "wer war der Enkel (X)?", "wer war der Enkel von (X)?", "wer waren die Enkel (X)?", "wer waren die Enkel von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/parent> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "17",
    "lexicalEntryUri" : "http://localhost:8080#Enkel_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Person", "Person" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Enkel von (X).", "sind (X) die Enkel von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/parent> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "18",
    "lexicalEntryUri" : "http://localhost:8080#Enkel_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Person" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Enkel von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/parent> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "19",
    "lexicalEntryUri" : "http://localhost:8080#Enkel_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Person" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Enkel von (X).", "Gib mir den Enkel von (X).", "Gib mir die Enkel von (X).", "Liste alle Enkel von (X) auf.", "Liste alle Enkel von (X).", "Liste die Enkel von (X) auf.", "welche (Y) sind die Enkel von (X)?", "welche (Y) waren die Enkel von (X)?", "welcher (Y) ist die Enkel von (X)?", "welcher (Y) war die Enkel von (X)?", "wer ist der Enkel (X)?", "wer ist der Enkel von (X)?", "wer sind die Enkel (X)?", "wer sind die Enkel von (X)?", "wer war der Enkel (X)?", "wer war der Enkel von (X)?", "wer waren die Enkel (X)?", "wer waren die Enkel von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/parent> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "20",
    "lexicalEntryUri" : "http://localhost:8080#Enkel_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Person", "Person" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Enkel von (X).", "sind (X) die Enkel von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/parent> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "21",
    "lexicalEntryUri" : "http://localhost:8080#Enkel_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Person" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Enkel von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/parent> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "22",
    "lexicalEntryUri" : "http://localhost:8080#Gruendung_Datum_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Organisation" ],
    "returnType" : [ "date" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Gruendungsdaten von (X).", "Gib mir das Gruendungsdatum von (X).", "Gib mir die Gruendungsdaten von (X).", "Liste alle Gruendungsdaten von (X) auf.", "Liste alle Gruendungsdaten von (X).", "Liste d Gruendungsdaten von (X) auf.", "was ist das Gruendungsdatum (X)?", "was ist das Gruendungsdatum von (X)?", "was sind d Gruendungsdaten (X)?", "was sind d Gruendungsdaten von (X)?", "was war das Gruendungsdatum (X)?", "was war das Gruendungsdatum von (X)?", "was waren d Gruendungsdaten (X)?", "was waren d Gruendungsdaten von (X)?", "welche (Y) sind das Gruendungsdatum von (X)?", "welche (Y) waren das Gruendungsdatum von (X)?", "welcher (Y) ist das Gruendungsdatum von (X)?", "welcher (Y) war das Gruendungsdatum von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/foundingDate> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "23",
    "lexicalEntryUri" : "http://localhost:8080#Gruendung_Datum_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Organisation", "date" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) das Gruendungsdatum von (X).", "sind (X) d Gruendungsdaten von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/foundingDate> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "24",
    "lexicalEntryUri" : "http://localhost:8080#Gruendung_Datum_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Organisation" ],
    "returnType" : [ "date" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "das Gruendungsdatum von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/foundingDate> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "25",
    "lexicalEntryUri" : "http://localhost:8080#Eltern_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Person" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Enkel von (X).", "Gib mir den Enkel von (X).", "Gib mir die Enkel von (X).", "Liste alle Enkel von (X) auf.", "Liste alle Enkel von (X).", "Liste die Enkel von (X) auf.", "welche (Y) sind die Enkel von (X)?", "welche (Y) waren die Enkel von (X)?", "welcher (Y) ist die Enkel von (X)?", "welcher (Y) war die Enkel von (X)?", "wer ist der Enkel (X)?", "wer ist der Enkel von (X)?", "wer sind die Enkel (X)?", "wer sind die Enkel von (X)?", "wer war der Enkel (X)?", "wer war der Enkel von (X)?", "wer waren die Enkel (X)?", "wer waren die Enkel von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/parent> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "26",
    "lexicalEntryUri" : "http://localhost:8080#Eltern_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Person", "Person" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Enkel von (X).", "sind (X) die Enkel von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/parent> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "27",
    "lexicalEntryUri" : "http://localhost:8080#Eltern_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Person" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Enkel von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/parent> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "28",
    "lexicalEntryUri" : "http://localhost:8080#kinder_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Person" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Kinder von (X).", "Gib mir die Kind von (X).", "Gib mir die Kinder von (X).", "Liste alle Kinder von (X) auf.", "Liste alle Kinder von (X).", "Liste die Kinder von (X) auf.", "welche (Y) sind die Kind von (X)?", "welche (Y) waren die Kind von (X)?", "welcher (Y) ist die Kind von (X)?", "welcher (Y) war die Kind von (X)?", "wer ist die Kind (X)?", "wer ist die Kind von (X)?", "wer sind die Kinder (X)?", "wer sind die Kinder von (X)?", "wer war die Kind (X)?", "wer war die Kind von (X)?", "wer waren die Kinder (X)?", "wer waren die Kinder von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/child> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "29",
    "lexicalEntryUri" : "http://localhost:8080#kinder_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Person", "Person" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Kind von (X).", "sind (X) die Kinder von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/child> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "30",
    "lexicalEntryUri" : "http://localhost:8080#kinder_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Person" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Kind von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/child> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "31",
    "lexicalEntryUri" : "http://localhost:8080#HeimStadion_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "SportsClub" ],
    "returnType" : [ "Stadium" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle HeimStadien von (X).", "Gib mir das HeimStadion von (X).", "Gib mir die HeimStadien von (X).", "Liste alle HeimStadien von (X) auf.", "Liste alle HeimStadien von (X).", "Liste d HeimStadien von (X) auf.", "was ist das HeimStadion (X)?", "was ist das HeimStadion von (X)?", "was sind d HeimStadien (X)?", "was sind d HeimStadien von (X)?", "was war das HeimStadion (X)?", "was war das HeimStadion von (X)?", "was waren d HeimStadien (X)?", "was waren d HeimStadien von (X)?", "welche (Y) sind das HeimStadion von (X)?", "welche (Y) waren das HeimStadion von (X)?", "welcher (Y) ist das HeimStadion von (X)?", "welcher (Y) war das HeimStadion von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/ground> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "32",
    "lexicalEntryUri" : "http://localhost:8080#HeimStadion_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "SportsClub", "Stadium" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) das HeimStadion von (X).", "sind (X) d HeimStadien von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/ground> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "33",
    "lexicalEntryUri" : "http://localhost:8080#HeimStadion_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "SportsClub" ],
    "returnType" : [ "Stadium" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "das HeimStadion von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/ground> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "34",
    "lexicalEntryUri" : "http://localhost:8080#Album_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Work" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Album von (X).", "Gib mir das Album von (X).", "Gib mir die Album von (X).", "Liste alle Album von (X) auf.", "Liste alle Album von (X).", "Liste d Album von (X) auf.", "welche (Y) sind das Album von (X)?", "welche (Y) waren das Album von (X)?", "welcher (Y) ist das Album von (X)?", "welcher (Y) war das Album von (X)?", "wer ist das Album (X)?", "wer ist das Album von (X)?", "wer sind d Album (X)?", "wer sind d Album von (X)?", "wer war das Album (X)?", "wer war das Album von (X)?", "wer waren d Album (X)?", "wer waren d Album von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/property/writer> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "35",
    "lexicalEntryUri" : "http://localhost:8080#Album_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Work", "Person" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) das Album von (X).", "sind (X) d Album von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/property/writer> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "36",
    "lexicalEntryUri" : "http://localhost:8080#Album_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Work" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "das Album von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/property/writer> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "37",
    "lexicalEntryUri" : "http://localhost:8080#währung_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Country" ],
    "returnType" : [ "Currency" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Währungen von (X).", "Gib mir die Währung von (X).", "Gib mir die Währungen von (X).", "Liste alle Währungen von (X) auf.", "Liste alle Währungen von (X).", "Liste die Währungen von (X) auf.", "was ist die Währung (X)?", "was ist die Währung von (X)?", "was sind die Währungen (X)?", "was sind die Währungen von (X)?", "was war die Währung (X)?", "was war die Währung von (X)?", "was waren die Währungen (X)?", "was waren die Währungen von (X)?", "welche (Y) sind die Währung von (X)?", "welche (Y) waren die Währung von (X)?", "welcher (Y) ist die Währung von (X)?", "welcher (Y) war die Währung von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/currency> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "38",
    "lexicalEntryUri" : "http://localhost:8080#währung_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Country", "Currency" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Währung von (X).", "sind (X) die Währungen von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/currency> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "39",
    "lexicalEntryUri" : "http://localhost:8080#währung_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Country" ],
    "returnType" : [ "Currency" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Währung von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/currency> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "40",
    "lexicalEntryUri" : "http://localhost:8080#Hauptstadt_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Country" ],
    "returnType" : [ "City" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir die Hauptstadt von (X).", "was ist die Hauptstadt (X)?", "was ist die Hauptstadt von (X)?", "was war die Hauptstadt (X)?", "was war die Hauptstadt von (X)?", "welche (Y) sind die Hauptstadt von (X)?", "welche (Y) waren die Hauptstadt von (X)?", "welcher (Y) ist die Hauptstadt von (X)?", "welcher (Y) war die Hauptstadt von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/capital> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "41",
    "lexicalEntryUri" : "http://localhost:8080#Hauptstadt_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Country", "City" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Hauptstadt von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/capital> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "42",
    "lexicalEntryUri" : "http://localhost:8080#Hauptstadt_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Country" ],
    "returnType" : [ "City" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Hauptstadt von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/capital> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "43",
    "lexicalEntryUri" : "http://localhost:8080#Buergermeister_von_1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "City" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Buergermeister von (X).", "Gib mir den Buergermeister von (X).", "Gib mir die Buergermeister von (X).", "Liste alle Buergermeister von (X) auf.", "Liste alle Buergermeister von (X).", "Liste die Buergermeister von (X) auf.", "welche (Y) sind die Buergermeister von (X)?", "welche (Y) waren die Buergermeister von (X)?", "welcher (Y) ist die Buergermeister von (X)?", "welcher (Y) war die Buergermeister von (X)?", "wer ist der Buergermeister (X)?", "wer ist der Buergermeister von (X)?", "wer sind die Buergermeister (X)?", "wer sind die Buergermeister von (X)?", "wer war der Buergermeister (X)?", "wer war der Buergermeister von (X)?", "wer waren die Buergermeister (X)?", "wer waren die Buergermeister von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/mayor> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "44",
    "lexicalEntryUri" : "http://localhost:8080#Buergermeister_von_1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "City", "Person" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Buergermeister von (X).", "sind (X) die Buergermeister von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/mayor> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "45",
    "lexicalEntryUri" : "http://localhost:8080#Buergermeister_von_1",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "City" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Buergermeister von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/mayor> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "46",
    "lexicalEntryUri" : "http://localhost:8080#Geburtsname_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Person" ],
    "returnType" : [ "Thing" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Geburtsnamen von (X).", "Gib mir die Geburtsname von (X).", "Gib mir die Geburtsnamen von (X).", "Liste alle Geburtsnamen von (X) auf.", "Liste alle Geburtsnamen von (X).", "Liste die Geburtsnamen von (X) auf.", "was ist die Geburtsname (X)?", "was ist die Geburtsname von (X)?", "was sind die Geburtsnamen (X)?", "was sind die Geburtsnamen von (X)?", "was war die Geburtsname (X)?", "was war die Geburtsname von (X)?", "was waren die Geburtsnamen (X)?", "was waren die Geburtsnamen von (X)?", "welche (Y) sind die Geburtsname von (X)?", "welche (Y) waren die Geburtsname von (X)?", "welcher (Y) ist die Geburtsname von (X)?", "welcher (Y) war die Geburtsname von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/property/birthName> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "47",
    "lexicalEntryUri" : "http://localhost:8080#Geburtsname_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Person", "Thing" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Geburtsname von (X).", "sind (X) die Geburtsnamen von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/property/birthName> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "48",
    "lexicalEntryUri" : "http://localhost:8080#Geburtsname_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Person" ],
    "returnType" : [ "Thing" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Geburtsname von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/property/birthName> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "49",
    "lexicalEntryUri" : "http://localhost:8080#Geburt_Name_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Person" ],
    "returnType" : [ "Thing" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Geburt Namen von (X).", "Gib mir die Geburt Name von (X).", "Gib mir die Geburt Namen von (X).", "Liste alle Geburt Namen von (X) auf.", "Liste alle Geburt Namen von (X).", "Liste die Geburt Namen von (X) auf.", "was ist die Geburt Name (X)?", "was ist die Geburt Name von (X)?", "was sind die Geburt Namen (X)?", "was sind die Geburt Namen von (X)?", "was war die Geburt Name (X)?", "was war die Geburt Name von (X)?", "was waren die Geburt Namen (X)?", "was waren die Geburt Namen von (X)?", "welche (Y) sind die Geburt Name von (X)?", "welche (Y) waren die Geburt Name von (X)?", "welcher (Y) ist die Geburt Name von (X)?", "welcher (Y) war die Geburt Name von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/birthName> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "50",
    "lexicalEntryUri" : "http://localhost:8080#Geburt_Name_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Person", "Thing" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Geburt Name von (X).", "sind (X) die Geburt Namen von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/birthName> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "51",
    "lexicalEntryUri" : "http://localhost:8080#Geburt_Name_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Person" ],
    "returnType" : [ "Thing" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Geburt Name von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/birthName> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "52",
    "lexicalEntryUri" : "http://localhost:8080#spitzname_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "City" ],
    "returnType" : [ "Thing" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Spitznamen von (X).", "Gib mir den Spitzname von (X).", "Gib mir die Spitznamen von (X).", "Liste alle Spitznamen von (X) auf.", "Liste alle Spitznamen von (X).", "Liste die Spitznamen von (X) auf.", "was ist der Spitzname (X)?", "was ist der Spitzname von (X)?", "was sind die Spitznamen (X)?", "was sind die Spitznamen von (X)?", "was war der Spitzname (X)?", "was war der Spitzname von (X)?", "was waren die Spitznamen (X)?", "was waren die Spitznamen von (X)?", "welche (Y) sind die Spitzname von (X)?", "welche (Y) waren die Spitzname von (X)?", "welcher (Y) ist die Spitzname von (X)?", "welcher (Y) war die Spitzname von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/property/nickname> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "53",
    "lexicalEntryUri" : "http://localhost:8080#spitzname_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "City", "Thing" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Spitzname von (X).", "sind (X) die Spitznamen von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/property/nickname> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "54",
    "lexicalEntryUri" : "http://localhost:8080#spitzname_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "City" ],
    "returnType" : [ "Thing" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Spitzname von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/property/nickname> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "55",
    "lexicalEntryUri" : "http://localhost:8080#Gesamteinwohnerzahl_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Location" ],
    "returnType" : [ "Number" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir die Gesamteinwohnerzahl von (X).", "was ist die Gesamteinwohnerzahl (X)?", "was ist die Gesamteinwohnerzahl von (X)?", "was war die Gesamteinwohnerzahl (X)?", "was war die Gesamteinwohnerzahl von (X)?", "welche (Y) sind die Gesamteinwohnerzahl von (X)?", "welche (Y) waren die Gesamteinwohnerzahl von (X)?", "welcher (Y) ist die Gesamteinwohnerzahl von (X)?", "welcher (Y) war die Gesamteinwohnerzahl von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/populationTotal> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "56",
    "lexicalEntryUri" : "http://localhost:8080#Gesamteinwohnerzahl_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Location", "Number" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Gesamteinwohnerzahl von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/populationTotal> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "57",
    "lexicalEntryUri" : "http://localhost:8080#Gesamteinwohnerzahl_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Location" ],
    "returnType" : [ "Number" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Gesamteinwohnerzahl von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/populationTotal> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "58",
    "lexicalEntryUri" : "http://localhost:8080#gesamt_Bereich_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Country" ],
    "returnType" : [ "Number" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle gesamt Bereiche von (X).", "Gib mir den gesamt Bereich von (X).", "Gib mir die gesamt Bereiche von (X).", "Liste alle gesamt Bereiche von (X) auf.", "Liste alle gesamt Bereiche von (X).", "Liste die gesamt Bereiche von (X) auf.", "was ist der gesamt Bereich (X)?", "was ist der gesamt Bereich von (X)?", "was sind die gesamt Bereiche (X)?", "was sind die gesamt Bereiche von (X)?", "was war der gesamt Bereich (X)?", "was war der gesamt Bereich von (X)?", "was waren die gesamt Bereiche (X)?", "was waren die gesamt Bereiche von (X)?", "welche (Y) sind die gesamt Bereich von (X)?", "welche (Y) waren die gesamt Bereich von (X)?", "welcher (Y) ist die gesamt Bereich von (X)?", "welcher (Y) war die gesamt Bereich von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/areaTotal> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "59",
    "lexicalEntryUri" : "http://localhost:8080#gesamt_Bereich_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Country", "Number" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die gesamt Bereich von (X).", "sind (X) die gesamt Bereiche von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/areaTotal> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "60",
    "lexicalEntryUri" : "http://localhost:8080#gesamt_Bereich_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Country" ],
    "returnType" : [ "Number" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die gesamt Bereich von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/areaTotal> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "61",
    "lexicalEntryUri" : "http://localhost:8080#Manager_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Agent" ],
    "returnType" : [ "SoccerManager" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Manager von (X).", "Gib mir den Manager von (X).", "Gib mir die Manager von (X).", "Liste alle Manager von (X) auf.", "Liste alle Manager von (X).", "Liste die Manager von (X) auf.", "welche (Y) sind die Manager von (X)?", "welche (Y) waren die Manager von (X)?", "welcher (Y) ist die Manager von (X)?", "welcher (Y) war die Manager von (X)?", "wer ist der Manager (X)?", "wer ist der Manager von (X)?", "wer sind die Manager (X)?", "wer sind die Manager von (X)?", "wer war der Manager (X)?", "wer war der Manager von (X)?", "wer waren die Manager (X)?", "wer waren die Manager von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/manager> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "62",
    "lexicalEntryUri" : "http://localhost:8080#Manager_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Agent", "SoccerManager" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Manager von (X).", "sind (X) die Manager von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/manager> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "63",
    "lexicalEntryUri" : "http://localhost:8080#Manager_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Agent" ],
    "returnType" : [ "SoccerManager" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Manager von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/manager> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "64",
    "lexicalEntryUri" : "http://localhost:8080#Ehefrau_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Person" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Ehefrauen von (X).", "Gib mir die Ehefrau von (X).", "Gib mir die Ehefrauen von (X).", "Liste alle Ehefrauen von (X) auf.", "Liste alle Ehefrauen von (X).", "Liste die Ehefrauen von (X) auf.", "welche (Y) sind die Ehefrau von (X)?", "welche (Y) waren die Ehefrau von (X)?", "welcher (Y) ist die Ehefrau von (X)?", "welcher (Y) war die Ehefrau von (X)?", "wer ist die Ehefrau (X)?", "wer ist die Ehefrau von (X)?", "wer sind die Ehefrauen (X)?", "wer sind die Ehefrauen von (X)?", "wer war die Ehefrau (X)?", "wer war die Ehefrau von (X)?", "wer waren die Ehefrauen (X)?", "wer waren die Ehefrauen von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/spouse> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "65",
    "lexicalEntryUri" : "http://localhost:8080#Ehefrau_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Person", "Person" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Ehefrau von (X).", "sind (X) die Ehefrauen von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/spouse> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "66",
    "lexicalEntryUri" : "http://localhost:8080#Ehefrau_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Person" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Ehefrau von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/spouse> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "67",
    "lexicalEntryUri" : "http://localhost:8080#Buergermeisterin_von_3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "City" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Buergermeisterin von (X).", "Gib mir den Buergermeisterin von (X).", "Gib mir die Buergermeisterin von (X).", "Liste alle Buergermeisterin von (X) auf.", "Liste alle Buergermeisterin von (X).", "Liste die Buergermeisterin von (X) auf.", "welche (Y) sind die Buergermeisterin von (X)?", "welche (Y) waren die Buergermeisterin von (X)?", "welcher (Y) ist die Buergermeisterin von (X)?", "welcher (Y) war die Buergermeisterin von (X)?", "wer ist der Buergermeisterin (X)?", "wer ist der Buergermeisterin von (X)?", "wer sind die Buergermeisterin (X)?", "wer sind die Buergermeisterin von (X)?", "wer war der Buergermeisterin (X)?", "wer war der Buergermeisterin von (X)?", "wer waren die Buergermeisterin (X)?", "wer waren die Buergermeisterin von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/leaderName> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "68",
    "lexicalEntryUri" : "http://localhost:8080#Buergermeisterin_von_3",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "City", "Person" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Buergermeisterin von (X).", "sind (X) die Buergermeisterin von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/leaderName> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "69",
    "lexicalEntryUri" : "http://localhost:8080#Buergermeisterin_von_3",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "City" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Buergermeisterin von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/leaderName> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "70",
    "lexicalEntryUri" : "http://localhost:8080#tocher_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Person" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Töchter von (X).", "Gib mir die Tochter von (X).", "Gib mir die Töchter von (X).", "Liste alle Töchter von (X) auf.", "Liste alle Töchter von (X).", "Liste die Töchter von (X) auf.", "welche (Y) sind die Tochter von (X)?", "welche (Y) waren die Tochter von (X)?", "welcher (Y) ist die Tochter von (X)?", "welcher (Y) war die Tochter von (X)?", "wer ist die Tochter (X)?", "wer ist die Tochter von (X)?", "wer sind die Töchter (X)?", "wer sind die Töchter von (X)?", "wer war die Tochter (X)?", "wer war die Tochter von (X)?", "wer waren die Töchter (X)?", "wer waren die Töchter von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/child> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "71",
    "lexicalEntryUri" : "http://localhost:8080#tocher_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Person", "Person" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Tochter von (X).", "sind (X) die Töchter von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/child> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "72",
    "lexicalEntryUri" : "http://localhost:8080#tocher_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Person" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Tochter von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/child> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "73",
    "lexicalEntryUri" : "http://localhost:8080#sohn_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Person" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Söhne von (X).", "Gib mir die Sohn von (X).", "Gib mir die Söhne von (X).", "Liste alle Söhne von (X) auf.", "Liste alle Söhne von (X).", "Liste die Söhne von (X) auf.", "welche (Y) sind die Sohn von (X)?", "welche (Y) waren die Sohn von (X)?", "welcher (Y) ist die Sohn von (X)?", "welcher (Y) war die Sohn von (X)?", "wer ist die Sohn (X)?", "wer ist die Sohn von (X)?", "wer sind die Söhne (X)?", "wer sind die Söhne von (X)?", "wer war die Sohn (X)?", "wer war die Sohn von (X)?", "wer waren die Söhne (X)?", "wer waren die Söhne von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/child> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "74",
    "lexicalEntryUri" : "http://localhost:8080#sohn_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Person", "Person" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Sohn von (X).", "sind (X) die Söhne von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/child> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "75",
    "lexicalEntryUri" : "http://localhost:8080#sohn_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Person" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Sohn von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/child> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "76",
    "lexicalEntryUri" : "http://localhost:8080#praesident_von_2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Person" ],
    "returnType" : [ "Thing" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle praesidenten von (X).", "Gib mir den praesident von (X).", "Gib mir die praesidenten von (X).", "Liste alle praesidenten von (X) auf.", "Liste alle praesidenten von (X).", "Liste die praesidenten von (X) auf.", "was ist der praesident (X)?", "was ist der praesident von (X)?", "was sind die praesidenten (X)?", "was sind die praesidenten von (X)?", "was war der praesident (X)?", "was war der praesident von (X)?", "was waren die praesidenten (X)?", "was waren die praesidenten von (X)?", "welche (Y) sind die praesident von (X)?", "welche (Y) waren die praesident von (X)?", "welcher (Y) ist die praesident von (X)?", "welcher (Y) war die praesident von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/leaderTitle> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "77",
    "lexicalEntryUri" : "http://localhost:8080#praesident_von_2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Person", "Thing" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die praesident von (X).", "sind (X) die praesidenten von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/leaderTitle> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "78",
    "lexicalEntryUri" : "http://localhost:8080#praesident_von_2",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Person" ],
    "returnType" : [ "Thing" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die praesident von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/leaderTitle> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "79",
    "lexicalEntryUri" : "http://localhost:8080#vorwahl_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Place" ],
    "returnType" : [ "Thing" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Vorwahl von (X).", "Gib mir die Vorwahl von (X).", "Liste alle Vorwahl von (X) auf.", "Liste alle Vorwahl von (X).", "Liste die Vorwahl von (X) auf.", "was ist die Vorwahl (X)?", "was ist die Vorwahl von (X)?", "was sind die Vorwahl (X)?", "was sind die Vorwahl von (X)?", "was war die Vorwahl (X)?", "was war die Vorwahl von (X)?", "was waren die Vorwahl (X)?", "was waren die Vorwahl von (X)?", "welche (Y) sind die Vorwahl von (X)?", "welche (Y) waren die Vorwahl von (X)?", "welcher (Y) ist die Vorwahl von (X)?", "welcher (Y) war die Vorwahl von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/areaCode> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "80",
    "lexicalEntryUri" : "http://localhost:8080#vorwahl_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Place", "Thing" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Vorwahl von (X).", "sind (X) die Vorwahl von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/areaCode> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "81",
    "lexicalEntryUri" : "http://localhost:8080#vorwahl_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Place" ],
    "returnType" : [ "Thing" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Vorwahl von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/areaCode> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "82",
    "lexicalEntryUri" : "http://localhost:8080#nachfolger_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Politician" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Nachfolger von (X).", "Gib mir den Nachfolger von (X).", "Gib mir die Nachfolger von (X).", "Liste alle Nachfolger von (X) auf.", "Liste alle Nachfolger von (X).", "Liste die Nachfolger von (X) auf.", "welche (Y) sind die Nachfolger von (X)?", "welche (Y) waren die Nachfolger von (X)?", "welcher (Y) ist die Nachfolger von (X)?", "welcher (Y) war die Nachfolger von (X)?", "wer ist der Nachfolger (X)?", "wer ist der Nachfolger von (X)?", "wer sind die Nachfolger (X)?", "wer sind die Nachfolger von (X)?", "wer war der Nachfolger (X)?", "wer war der Nachfolger von (X)?", "wer waren die Nachfolger (X)?", "wer waren die Nachfolger von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/successor> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "83",
    "lexicalEntryUri" : "http://localhost:8080#nachfolger_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Politician", "Person" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Nachfolger von (X).", "sind (X) die Nachfolger von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/successor> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "84",
    "lexicalEntryUri" : "http://localhost:8080#nachfolger_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Politician" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Nachfolger von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/successor> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "85",
    "lexicalEntryUri" : "http://localhost:8080#Koenige_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Agent" ],
    "returnType" : [ "City" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Koenige von (X).", "Gib mir den Koenig von (X).", "Gib mir die Koenige von (X).", "Liste alle Koenige von (X) auf.", "Liste alle Koenige von (X).", "Liste die Koenige von (X) auf.", "was ist der Koenig (X)?", "was ist der Koenig von (X)?", "was sind die Koenige (X)?", "was sind die Koenige von (X)?", "was war der Koenig (X)?", "was war der Koenig von (X)?", "was waren die Koenige (X)?", "was waren die Koenige von (X)?", "welche (Y) sind die Koenig von (X)?", "welche (Y) waren die Koenig von (X)?", "welcher (Y) ist die Koenig von (X)?", "welcher (Y) war die Koenig von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/property/title> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "86",
    "lexicalEntryUri" : "http://localhost:8080#Koenige_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Agent", "City" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Koenig von (X).", "sind (X) die Koenige von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/property/title> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "87",
    "lexicalEntryUri" : "http://localhost:8080#Koenige_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Agent" ],
    "returnType" : [ "City" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Koenig von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/property/title> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "88",
    "lexicalEntryUri" : "http://localhost:8080#vater_von_1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Person" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Väter von (X).", "Gib mir die Vater von (X).", "Gib mir die Väter von (X).", "Liste alle Väter von (X) auf.", "Liste alle Väter von (X).", "Liste die Väter von (X) auf.", "welche (Y) sind die Vater von (X)?", "welche (Y) waren die Vater von (X)?", "welcher (Y) ist die Vater von (X)?", "welcher (Y) war die Vater von (X)?", "wer ist die Vater (X)?", "wer ist die Vater von (X)?", "wer sind die Väter (X)?", "wer sind die Väter von (X)?", "wer war die Vater (X)?", "wer war die Vater von (X)?", "wer waren die Väter (X)?", "wer waren die Väter von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/property/father> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "89",
    "lexicalEntryUri" : "http://localhost:8080#vater_von_1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Person", "Person" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Vater von (X).", "sind (X) die Väter von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/property/father> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "90",
    "lexicalEntryUri" : "http://localhost:8080#vater_von_1",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Person" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Vater von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/property/father> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "91",
    "lexicalEntryUri" : "http://localhost:8080#Elternteil_of",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Person" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Elternteile von (X).", "Gib mir den Elternteil von (X).", "Gib mir die Elternteile von (X).", "Liste alle Elternteile von (X) auf.", "Liste alle Elternteile von (X).", "Liste die Elternteile von (X) auf.", "welche (Y) sind die Elternteil von (X)?", "welche (Y) waren die Elternteil von (X)?", "welcher (Y) ist die Elternteil von (X)?", "welcher (Y) war die Elternteil von (X)?", "wer ist der Elternteil (X)?", "wer ist der Elternteil von (X)?", "wer sind die Elternteile (X)?", "wer sind die Elternteile von (X)?", "wer war der Elternteil (X)?", "wer war der Elternteil von (X)?", "wer waren die Elternteile (X)?", "wer waren die Elternteile von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/parent> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "92",
    "lexicalEntryUri" : "http://localhost:8080#Elternteil_of",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Person", "Person" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Elternteil von (X).", "sind (X) die Elternteile von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/parent> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "93",
    "lexicalEntryUri" : "http://localhost:8080#Elternteil_of",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Person" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Elternteil von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/parent> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "94",
    "lexicalEntryUri" : "http://localhost:8080#Stadtteile_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Country" ],
    "returnType" : [ "Town" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Stadtteile von (X).", "Gib mir die Stadtteil von (X).", "Gib mir die Stadtteile von (X).", "Liste alle Stadtteile von (X) auf.", "Liste alle Stadtteile von (X).", "Liste die Stadtteile von (X) auf.", "was ist die Stadtteil (X)?", "was ist die Stadtteil von (X)?", "was sind die Stadtteile (X)?", "was sind die Stadtteile von (X)?", "was war die Stadtteil (X)?", "was war die Stadtteil von (X)?", "was waren die Stadtteile (X)?", "was waren die Stadtteile von (X)?", "welche (Y) sind die Stadtteil von (X)?", "welche (Y) waren die Stadtteil von (X)?", "welcher (Y) ist die Stadtteil von (X)?", "welcher (Y) war die Stadtteil von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/governmentType> ?objOfProp .}",
    "bindingSparql" : null,
    "returnVariable" : "subjOfProp"
  }, {
    "id" : "95",
    "lexicalEntryUri" : "http://localhost:8080#Stadtteile_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Country", "Town" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Stadtteil von (X).", "sind (X) die Stadtteile von (X)." ],
    "sparqlQuery" : "ASK WHERE {?Answer <http://dbpedia.org/ontology/governmentType> ?objOfProp .}",
    "bindingSparql" : null,
    "returnVariable" : "subjOfProp"
  }, {
    "id" : "96",
    "lexicalEntryUri" : "http://localhost:8080#Stadtteile_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Country" ],
    "returnType" : [ "Town" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Stadtteil von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/governmentType> ?objOfProp .}",
    "bindingSparql" : null,
    "returnVariable" : "subjOfProp"
  }, {
    "id" : "97",
    "lexicalEntryUri" : "http://localhost:8080#Zeitzone_von_2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "City" ],
    "returnType" : [ "Thing" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Zeitzonen von (X).", "Gib mir die Zeitzone von (X).", "Gib mir die Zeitzonen von (X).", "Liste alle Zeitzonen von (X) auf.", "Liste alle Zeitzonen von (X).", "Liste die Zeitzonen von (X) auf.", "was ist die Zeitzone (X)?", "was ist die Zeitzone von (X)?", "was sind die Zeitzonen (X)?", "was sind die Zeitzonen von (X)?", "was war die Zeitzone (X)?", "was war die Zeitzone von (X)?", "was waren die Zeitzonen (X)?", "was waren die Zeitzonen von (X)?", "welche (Y) sind die Zeitzone von (X)?", "welche (Y) waren die Zeitzone von (X)?", "welcher (Y) ist die Zeitzone von (X)?", "welcher (Y) war die Zeitzone von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/property/timezone> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "98",
    "lexicalEntryUri" : "http://localhost:8080#Zeitzone_von_2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "City", "Thing" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Zeitzone von (X).", "sind (X) die Zeitzonen von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/property/timezone> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "99",
    "lexicalEntryUri" : "http://localhost:8080#Zeitzone_von_2",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "City" ],
    "returnType" : [ "Thing" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Zeitzone von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/property/timezone> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "100",
    "lexicalEntryUri" : "http://localhost:8080#Trainer_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "IceHockeyLeague" ],
    "returnType" : [ "CollegeCoach" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Trainer von (X).", "Gib mir den Trainer von (X).", "Gib mir die Trainer von (X).", "Liste alle Trainer von (X) auf.", "Liste alle Trainer von (X).", "Liste die Trainer von (X) auf.", "welche (Y) sind die Trainer von (X)?", "welche (Y) waren die Trainer von (X)?", "welcher (Y) ist die Trainer von (X)?", "welcher (Y) war die Trainer von (X)?", "wer ist der Trainer (X)?", "wer ist der Trainer von (X)?", "wer sind die Trainer (X)?", "wer sind die Trainer von (X)?", "wer war der Trainer (X)?", "wer war der Trainer von (X)?", "wer waren die Trainer (X)?", "wer waren die Trainer von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/coach> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "101",
    "lexicalEntryUri" : "http://localhost:8080#Trainer_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "IceHockeyLeague", "CollegeCoach" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Trainer von (X).", "sind (X) die Trainer von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/coach> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "102",
    "lexicalEntryUri" : "http://localhost:8080#Trainer_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "IceHockeyLeague" ],
    "returnType" : [ "CollegeCoach" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Trainer von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/coach> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "103",
    "lexicalEntryUri" : "http://localhost:8080#Frau_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Person" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Frauen von (X).", "Gib mir die Frau von (X).", "Gib mir die Frauen von (X).", "Liste alle Frauen von (X) auf.", "Liste alle Frauen von (X).", "Liste die Frauen von (X) auf.", "welche (Y) sind die Frau von (X)?", "welche (Y) waren die Frau von (X)?", "welcher (Y) ist die Frau von (X)?", "welcher (Y) war die Frau von (X)?", "wer ist die Frau (X)?", "wer ist die Frau von (X)?", "wer sind die Frauen (X)?", "wer sind die Frauen von (X)?", "wer war die Frau (X)?", "wer war die Frau von (X)?", "wer waren die Frauen (X)?", "wer waren die Frauen von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/spouse> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "104",
    "lexicalEntryUri" : "http://localhost:8080#Frau_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Person", "Person" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Frau von (X).", "sind (X) die Frauen von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/spouse> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "105",
    "lexicalEntryUri" : "http://localhost:8080#Frau_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Person" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Frau von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/spouse> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "106",
    "lexicalEntryUri" : "http://localhost:8080#Herausgeber_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "WrittenWork" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Herausgeber von (X).", "Gib mir den Herausgeber von (X).", "Gib mir die Herausgeber von (X).", "Liste alle Herausgeber von (X) auf.", "Liste alle Herausgeber von (X).", "Liste die Herausgeber von (X) auf.", "welche (Y) sind die Herausgeber von (X)?", "welche (Y) waren die Herausgeber von (X)?", "welcher (Y) ist die Herausgeber von (X)?", "welcher (Y) war die Herausgeber von (X)?", "wer ist der Herausgeber (X)?", "wer ist der Herausgeber von (X)?", "wer sind die Herausgeber (X)?", "wer sind die Herausgeber von (X)?", "wer war der Herausgeber (X)?", "wer war der Herausgeber von (X)?", "wer waren die Herausgeber (X)?", "wer waren die Herausgeber von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/editor> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "107",
    "lexicalEntryUri" : "http://localhost:8080#Herausgeber_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "WrittenWork", "Person" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Herausgeber von (X).", "sind (X) die Herausgeber von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/editor> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "108",
    "lexicalEntryUri" : "http://localhost:8080#Herausgeber_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "WrittenWork" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Herausgeber von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/editor> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "109",
    "lexicalEntryUri" : "http://localhost:8080#Folge_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "TelevisionShow" ],
    "returnType" : [ "date" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Folgen von (X).", "Gib mir die Folge von (X).", "Gib mir die Folgen von (X).", "Liste alle Folgen von (X) auf.", "Liste alle Folgen von (X).", "Liste die Folgen von (X) auf.", "was ist die Folge (X)?", "was ist die Folge von (X)?", "was sind die Folgen (X)?", "was sind die Folgen von (X)?", "was war die Folge (X)?", "was war die Folge von (X)?", "was waren die Folgen (X)?", "was waren die Folgen von (X)?", "welche (Y) sind die Folge von (X)?", "welche (Y) waren die Folge von (X)?", "welcher (Y) ist die Folge von (X)?", "welcher (Y) war die Folge von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/completionDate> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "110",
    "lexicalEntryUri" : "http://localhost:8080#Folge_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "TelevisionShow", "date" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Folge von (X).", "sind (X) die Folgen von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/completionDate> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "111",
    "lexicalEntryUri" : "http://localhost:8080#Folge_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "TelevisionShow" ],
    "returnType" : [ "date" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Folge von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/completionDate> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "112",
    "lexicalEntryUri" : "http://localhost:8080#koenig_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Legislature" ],
    "returnType" : [ "Royalty" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle König von (X).", "Gib mir den König von (X).", "Gib mir die König von (X).", "Liste alle König von (X) auf.", "Liste alle König von (X).", "Liste die König von (X) auf.", "was ist der König (X)?", "was ist der König von (X)?", "was sind die König (X)?", "was sind die König von (X)?", "was war der König (X)?", "was war der König von (X)?", "was waren die König (X)?", "was waren die König von (X)?", "welche (Y) sind die König von (X)?", "welche (Y) waren die König von (X)?", "welcher (Y) ist die König von (X)?", "welcher (Y) war die König von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/leader> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "113",
    "lexicalEntryUri" : "http://localhost:8080#koenig_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Legislature", "Royalty" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die König von (X).", "sind (X) die König von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/leader> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "114",
    "lexicalEntryUri" : "http://localhost:8080#koenig_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Legislature" ],
    "returnType" : [ "Royalty" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die König von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/leader> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "115",
    "lexicalEntryUri" : "http://localhost:8080#vizepräsident_unter",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Politician" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Vizepräsidenten unter (X).", "Gib mir den Vizepräsident unter (X).", "Gib mir die Vizepräsidenten unter (X).", "Liste alle Vizepräsidenten unter (X) auf.", "Liste alle Vizepräsidenten unter (X).", "Liste die Vizepräsidenten unter (X) auf.", "welche (Y) sind die Vizepräsident unter (X)?", "welche (Y) waren die Vizepräsident unter (X)?", "welcher (Y) ist die Vizepräsident unter (X)?", "welcher (Y) war die Vizepräsident unter (X)?", "wer ist der Vizepräsident (X)?", "wer ist der Vizepräsident unter (X)?", "wer sind die Vizepräsidenten (X)?", "wer sind die Vizepräsidenten unter (X)?", "wer war der Vizepräsident (X)?", "wer war der Vizepräsident unter (X)?", "wer waren die Vizepräsidenten (X)?", "wer waren die Vizepräsidenten unter (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/vicePresident> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "116",
    "lexicalEntryUri" : "http://localhost:8080#vizepräsident_unter",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Politician", "Person" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Vizepräsident unter (X).", "sind (X) die Vizepräsidenten unter (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/vicePresident> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "117",
    "lexicalEntryUri" : "http://localhost:8080#vizepräsident_unter",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Politician" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Vizepräsident unter (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/vicePresident> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "118",
    "lexicalEntryUri" : "http://localhost:8080#Laufzeit_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Work" ],
    "returnType" : [ "Thing" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Laufzeiten von (X).", "Gib mir die Laufzeit von (X).", "Gib mir die Laufzeiten von (X).", "Liste alle Laufzeiten von (X) auf.", "Liste alle Laufzeiten von (X).", "Liste die Laufzeiten von (X) auf.", "was ist die Laufzeit (X)?", "was ist die Laufzeit von (X)?", "was sind die Laufzeiten (X)?", "was sind die Laufzeiten von (X)?", "was war die Laufzeit (X)?", "was war die Laufzeit von (X)?", "was waren die Laufzeiten (X)?", "was waren die Laufzeiten von (X)?", "welche (Y) sind die Laufzeit von (X)?", "welche (Y) waren die Laufzeit von (X)?", "welcher (Y) ist die Laufzeit von (X)?", "welcher (Y) war die Laufzeit von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/runtime> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "119",
    "lexicalEntryUri" : "http://localhost:8080#Laufzeit_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Work", "Thing" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Laufzeit von (X).", "sind (X) die Laufzeiten von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/runtime> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "120",
    "lexicalEntryUri" : "http://localhost:8080#Laufzeit_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Work" ],
    "returnType" : [ "Thing" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Laufzeit von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/runtime> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "121",
    "lexicalEntryUri" : "http://localhost:8080#Autor_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Book" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Autorev von (X).", "Gib mir die Autor von (X).", "Gib mir die Autorev von (X).", "Liste alle Autorev von (X) auf.", "Liste alle Autorev von (X).", "Liste die Autorev von (X) auf.", "welche (Y) sind die Autor von (X)?", "welche (Y) waren die Autor von (X)?", "welcher (Y) ist die Autor von (X)?", "welcher (Y) war die Autor von (X)?", "wer ist die Autor (X)?", "wer ist die Autor von (X)?", "wer sind die Autorev (X)?", "wer sind die Autorev von (X)?", "wer war die Autor (X)?", "wer war die Autor von (X)?", "wer waren die Autorev (X)?", "wer waren die Autorev von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/author> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "122",
    "lexicalEntryUri" : "http://localhost:8080#Autor_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Book", "Person" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Autor von (X).", "sind (X) die Autorev von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/author> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "123",
    "lexicalEntryUri" : "http://localhost:8080#Autor_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Book" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Autor von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/author> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "124",
    "lexicalEntryUri" : "http://localhost:8080#Geburtsort_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Person" ],
    "returnType" : [ "Country" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Geburtsorte von (X).", "Gib mir die Geburtsort von (X).", "Gib mir die Geburtsorte von (X).", "Liste alle Geburtsorte von (X) auf.", "Liste alle Geburtsorte von (X).", "Liste die Geburtsorte von (X) auf.", "was ist die Geburtsort (X)?", "was ist die Geburtsort von (X)?", "was sind die Geburtsorte (X)?", "was sind die Geburtsorte von (X)?", "was war die Geburtsort (X)?", "was war die Geburtsort von (X)?", "was waren die Geburtsorte (X)?", "was waren die Geburtsorte von (X)?", "welche (Y) sind die Geburtsort von (X)?", "welche (Y) waren die Geburtsort von (X)?", "welcher (Y) ist die Geburtsort von (X)?", "welcher (Y) war die Geburtsort von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/birthPlace> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "125",
    "lexicalEntryUri" : "http://localhost:8080#Geburtsort_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Person", "Country" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Geburtsort von (X).", "sind (X) die Geburtsorte von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/birthPlace> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "126",
    "lexicalEntryUri" : "http://localhost:8080#Geburtsort_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Person" ],
    "returnType" : [ "Country" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Geburtsort von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/birthPlace> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "127",
    "lexicalEntryUri" : "http://localhost:8080#Premierminister_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Legislature" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Premierminister von (X).", "Gib mir den Premierminister von (X).", "Gib mir die Premierminister von (X).", "Liste alle Premierminister von (X) auf.", "Liste alle Premierminister von (X).", "Liste die Premierminister von (X) auf.", "welche (Y) sind die Premierminister von (X)?", "welche (Y) waren die Premierminister von (X)?", "welcher (Y) ist die Premierminister von (X)?", "welcher (Y) war die Premierminister von (X)?", "wer ist der Premierminister (X)?", "wer ist der Premierminister von (X)?", "wer sind die Premierminister (X)?", "wer sind die Premierminister von (X)?", "wer war der Premierminister (X)?", "wer war der Premierminister von (X)?", "wer waren die Premierminister (X)?", "wer waren die Premierminister von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/leader> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "128",
    "lexicalEntryUri" : "http://localhost:8080#Premierminister_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Legislature", "Person" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Premierminister von (X).", "sind (X) die Premierminister von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/leader> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "129",
    "lexicalEntryUri" : "http://localhost:8080#Premierminister_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Legislature" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Premierminister von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/leader> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "130",
    "lexicalEntryUri" : "http://localhost:8080#richtiger_Name_of",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "FictionalCharacter" ],
    "returnType" : [ "Thing" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle richtiger Name von (X).", "Gib mir die richtiger Name von (X).", "Liste alle richtiger Name von (X) auf.", "Liste alle richtiger Name von (X).", "Liste die richtiger Name von (X) auf.", "was ist die richtiger Name (X)?", "was ist die richtiger Name von (X)?", "was sind die richtiger Name (X)?", "was sind die richtiger Name von (X)?", "was war die richtiger Name (X)?", "was war die richtiger Name von (X)?", "was waren die richtiger Name (X)?", "was waren die richtiger Name von (X)?", "welche (Y) sind die richtiger Name von (X)?", "welche (Y) waren die richtiger Name von (X)?", "welcher (Y) ist die richtiger Name von (X)?", "welcher (Y) war die richtiger Name von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/property/alterEgo> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "131",
    "lexicalEntryUri" : "http://localhost:8080#richtiger_Name_of",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "FictionalCharacter", "Thing" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die richtiger Name von (X).", "sind (X) die richtiger Name von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/property/alterEgo> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "132",
    "lexicalEntryUri" : "http://localhost:8080#richtiger_Name_of",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "FictionalCharacter" ],
    "returnType" : [ "Thing" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die richtiger Name von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/property/alterEgo> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "133",
    "lexicalEntryUri" : "http://localhost:8080#Amtssprache_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Country" ],
    "returnType" : [ "Language" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Amtssprachen von (X).", "Gib mir die Amtssprache von (X).", "Gib mir die Amtssprachen von (X).", "Liste alle Amtssprachen von (X) auf.", "Liste alle Amtssprachen von (X).", "Liste die Amtssprachen von (X) auf.", "was ist die Amtssprache (X)?", "was ist die Amtssprache von (X)?", "was sind die Amtssprachen (X)?", "was sind die Amtssprachen von (X)?", "was war die Amtssprache (X)?", "was war die Amtssprache von (X)?", "was waren die Amtssprachen (X)?", "was waren die Amtssprachen von (X)?", "welche (Y) sind die Amtssprache von (X)?", "welche (Y) waren die Amtssprache von (X)?", "welcher (Y) ist die Amtssprache von (X)?", "welcher (Y) war die Amtssprache von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/officialLanguage> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "134",
    "lexicalEntryUri" : "http://localhost:8080#Amtssprache_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Country", "Language" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Amtssprache von (X).", "sind (X) die Amtssprachen von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/officialLanguage> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "135",
    "lexicalEntryUri" : "http://localhost:8080#Amtssprache_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Country" ],
    "returnType" : [ "Language" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Amtssprache von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/officialLanguage> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "136",
    "lexicalEntryUri" : "http://localhost:8080#Finale_Spiel_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Event" ],
    "returnType" : [ "date" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Spiele von (X).", "Gib mir das Spiel von (X).", "Gib mir die Spiele von (X).", "Liste alle Spiele von (X) auf.", "Liste alle Spiele von (X).", "Liste d Spiele von (X) auf.", "was ist das Spiel (X)?", "was ist das Spiel von (X)?", "was sind d Spiele (X)?", "was sind d Spiele von (X)?", "was war das Spiel (X)?", "was war das Spiel von (X)?", "was waren d Spiele (X)?", "was waren d Spiele von (X)?", "welche (Y) sind das Spiel von (X)?", "welche (Y) waren das Spiel von (X)?", "welcher (Y) ist das Spiel von (X)?", "welcher (Y) war das Spiel von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/property/date> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "137",
    "lexicalEntryUri" : "http://localhost:8080#Finale_Spiel_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Event", "date" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) das Spiel von (X).", "sind (X) d Spiele von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/property/date> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "138",
    "lexicalEntryUri" : "http://localhost:8080#Finale_Spiel_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Event" ],
    "returnType" : [ "date" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "das Spiel von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/property/date> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "139",
    "lexicalEntryUri" : "http://localhost:8080#Population_Dichte_Rang_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Country" ],
    "returnType" : [ "Thing" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Population Dichte Rang von (X).", "Gib mir den Population Dichte Rang von (X).", "Gib mir die Population Dichte Rang von (X).", "Liste alle Population Dichte Rang von (X) auf.", "Liste alle Population Dichte Rang von (X).", "Liste die Population Dichte Rang von (X) auf.", "was ist der Population Dichte Rang (X)?", "was ist der Population Dichte Rang von (X)?", "was sind die Population Dichte Rang (X)?", "was sind die Population Dichte Rang von (X)?", "was war der Population Dichte Rang (X)?", "was war der Population Dichte Rang von (X)?", "was waren die Population Dichte Rang (X)?", "was waren die Population Dichte Rang von (X)?", "welche (Y) sind die Population Dichte Rang von (X)?", "welche (Y) waren die Population Dichte Rang von (X)?", "welcher (Y) ist die Population Dichte Rang von (X)?", "welcher (Y) war die Population Dichte Rang von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/property/populationDensityRank> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "140",
    "lexicalEntryUri" : "http://localhost:8080#Population_Dichte_Rang_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Country", "Thing" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Population Dichte Rang von (X).", "sind (X) die Population Dichte Rang von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/property/populationDensityRank> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "141",
    "lexicalEntryUri" : "http://localhost:8080#Population_Dichte_Rang_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Country" ],
    "returnType" : [ "Thing" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Population Dichte Rang von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/property/populationDensityRank> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "142",
    "lexicalEntryUri" : "http://localhost:8080#Zeitzone_von_1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Town" ],
    "returnType" : [ "Thing" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Zeitzonen von (X).", "Gib mir die Zeitzone von (X).", "Gib mir die Zeitzonen von (X).", "Liste alle Zeitzonen von (X) auf.", "Liste alle Zeitzonen von (X).", "Liste die Zeitzonen von (X) auf.", "was ist die Zeitzone (X)?", "was ist die Zeitzone von (X)?", "was sind die Zeitzonen (X)?", "was sind die Zeitzonen von (X)?", "was war die Zeitzone (X)?", "was war die Zeitzone von (X)?", "was waren die Zeitzonen (X)?", "was waren die Zeitzonen von (X)?", "welche (Y) sind die Zeitzone von (X)?", "welche (Y) waren die Zeitzone von (X)?", "welcher (Y) ist die Zeitzone von (X)?", "welcher (Y) war die Zeitzone von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/timeZone> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "143",
    "lexicalEntryUri" : "http://localhost:8080#Zeitzone_von_1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Town", "Thing" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Zeitzone von (X).", "sind (X) die Zeitzonen von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/timeZone> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "144",
    "lexicalEntryUri" : "http://localhost:8080#Zeitzone_von_1",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Town" ],
    "returnType" : [ "Thing" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Zeitzone von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/timeZone> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "145",
    "lexicalEntryUri" : "http://localhost:8080#Buch_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Book" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Buecher von (X).", "Gib mir die Buch von (X).", "Gib mir die Buecher von (X).", "Liste alle Buecher von (X) auf.", "Liste alle Buecher von (X).", "Liste die Buecher von (X) auf.", "welche (Y) sind die Buch von (X)?", "welche (Y) waren die Buch von (X)?", "welcher (Y) ist die Buch von (X)?", "welcher (Y) war die Buch von (X)?", "wer ist die Buch (X)?", "wer ist die Buch von (X)?", "wer sind die Buecher (X)?", "wer sind die Buecher von (X)?", "wer war die Buch (X)?", "wer war die Buch von (X)?", "wer waren die Buecher (X)?", "wer waren die Buecher von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/author> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "146",
    "lexicalEntryUri" : "http://localhost:8080#Buch_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Book", "Person" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Buch von (X).", "sind (X) die Buecher von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/author> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "147",
    "lexicalEntryUri" : "http://localhost:8080#Buch_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Book" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Buch von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/author> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "148",
    "lexicalEntryUri" : "http://localhost:8080#Ursprung_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Company" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Urspruenge von (X).", "Gib mir den Ursprung von (X).", "Gib mir die Urspruenge von (X).", "Liste alle Urspruenge von (X) auf.", "Liste alle Urspruenge von (X).", "Liste die Urspruenge von (X) auf.", "welche (Y) sind die Ursprung von (X)?", "welche (Y) waren die Ursprung von (X)?", "welcher (Y) ist die Ursprung von (X)?", "welcher (Y) war die Ursprung von (X)?", "wer ist der Ursprung (X)?", "wer ist der Ursprung von (X)?", "wer sind die Urspruenge (X)?", "wer sind die Urspruenge von (X)?", "wer war der Ursprung (X)?", "wer war der Ursprung von (X)?", "wer waren die Urspruenge (X)?", "wer waren die Urspruenge von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/owner> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "149",
    "lexicalEntryUri" : "http://localhost:8080#Ursprung_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Company", "Person" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Ursprung von (X).", "sind (X) die Urspruenge von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/owner> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "150",
    "lexicalEntryUri" : "http://localhost:8080#Ursprung_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Company" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Ursprung von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/owner> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "151",
    "lexicalEntryUri" : "http://localhost:8080#Gouverneur_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Place" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Gouverneur von (X).", "Gib mir den Gouverneur von (X).", "Gib mir die Gouverneur von (X).", "Liste alle Gouverneur von (X) auf.", "Liste alle Gouverneur von (X).", "Liste die Gouverneur von (X) auf.", "welche (Y) sind die Gouverneur von (X)?", "welche (Y) waren die Gouverneur von (X)?", "welcher (Y) ist die Gouverneur von (X)?", "welcher (Y) war die Gouverneur von (X)?", "wer ist der Gouverneur (X)?", "wer ist der Gouverneur von (X)?", "wer sind die Gouverneur (X)?", "wer sind die Gouverneur von (X)?", "wer war der Gouverneur (X)?", "wer war der Gouverneur von (X)?", "wer waren die Gouverneur (X)?", "wer waren die Gouverneur von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/governor> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "152",
    "lexicalEntryUri" : "http://localhost:8080#Gouverneur_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Place", "Person" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Gouverneur von (X).", "sind (X) die Gouverneur von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/governor> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "153",
    "lexicalEntryUri" : "http://localhost:8080#Gouverneur_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Place" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Gouverneur von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/governor> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "154",
    "lexicalEntryUri" : "http://localhost:8080#Arbeit_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Book" ],
    "returnType" : [ "date" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Arbeiten von (X).", "Gib mir die Arbeit von (X).", "Gib mir die Arbeiten von (X).", "Liste alle Arbeiten von (X) auf.", "Liste alle Arbeiten von (X).", "Liste die Arbeiten von (X) auf.", "was ist die Arbeit (X)?", "was ist die Arbeit von (X)?", "was sind die Arbeiten (X)?", "was sind die Arbeiten von (X)?", "was war die Arbeit (X)?", "was war die Arbeit von (X)?", "was waren die Arbeiten (X)?", "was waren die Arbeiten von (X)?", "welche (Y) sind die Arbeit von (X)?", "welche (Y) waren die Arbeit von (X)?", "welcher (Y) ist die Arbeit von (X)?", "welcher (Y) war die Arbeit von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/releaseDate> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "155",
    "lexicalEntryUri" : "http://localhost:8080#Arbeit_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Book", "date" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Arbeit von (X).", "sind (X) die Arbeiten von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/releaseDate> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "156",
    "lexicalEntryUri" : "http://localhost:8080#Arbeit_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Book" ],
    "returnType" : [ "date" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Arbeit von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/releaseDate> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "157",
    "lexicalEntryUri" : "http://localhost:8080#Videospiele_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Company" ],
    "returnType" : [ "VideoGame" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Videospiele von (X).", "Gib mir das Videospiel von (X).", "Gib mir die Videospiele von (X).", "Liste alle Videospiele von (X) auf.", "Liste alle Videospiele von (X).", "Liste d Videospiele von (X) auf.", "was ist das Videospiel (X)?", "was ist das Videospiel von (X)?", "was sind d Videospiele (X)?", "was sind d Videospiele von (X)?", "was war das Videospiel (X)?", "was war das Videospiel von (X)?", "was waren d Videospiele (X)?", "was waren d Videospiele von (X)?", "welche (Y) sind das Videospiel von (X)?", "welche (Y) waren das Videospiel von (X)?", "welcher (Y) ist das Videospiel von (X)?", "welcher (Y) war das Videospiel von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/publisher> ?objOfProp .}",
    "bindingSparql" : null,
    "returnVariable" : "subjOfProp"
  }, {
    "id" : "158",
    "lexicalEntryUri" : "http://localhost:8080#Videospiele_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Company", "VideoGame" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) das Videospiel von (X).", "sind (X) d Videospiele von (X)." ],
    "sparqlQuery" : "ASK WHERE {?Answer <http://dbpedia.org/ontology/publisher> ?objOfProp .}",
    "bindingSparql" : null,
    "returnVariable" : "subjOfProp"
  }, {
    "id" : "159",
    "lexicalEntryUri" : "http://localhost:8080#Videospiele_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Company" ],
    "returnType" : [ "VideoGame" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "das Videospiel von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/publisher> ?objOfProp .}",
    "bindingSparql" : null,
    "returnVariable" : "subjOfProp"
  }, {
    "id" : "160",
    "lexicalEntryUri" : "http://localhost:8080#größtHauptstadt_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Country" ],
    "returnType" : [ "City" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle größte Städte in (X).", "Gib mir die größte Stadt in (X).", "Gib mir die größte Städte in (X).", "Liste alle größte Städte in (X) auf.", "Liste alle größte Städte in (X).", "Liste die größte Städte in (X) auf.", "was ist die größte Stadt (X)?", "was ist die größte Stadt in (X)?", "was sind die größte Städte (X)?", "was sind die größte Städte in (X)?", "was war die größte Stadt (X)?", "was war die größte Stadt in (X)?", "was waren die größte Städte (X)?", "was waren die größte Städte in (X)?", "welche (Y) sind die größte Stadt in (X)?", "welche (Y) waren die größte Stadt in (X)?", "welcher (Y) ist die größte Stadt in (X)?", "welcher (Y) war die größte Stadt in (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/largestCity> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "161",
    "lexicalEntryUri" : "http://localhost:8080#größtHauptstadt_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Country", "City" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die größte Stadt in (X).", "sind (X) die größte Städte in (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/largestCity> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "162",
    "lexicalEntryUri" : "http://localhost:8080#größtHauptstadt_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Country" ],
    "returnType" : [ "City" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die größte Stadt in (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/largestCity> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "163",
    "lexicalEntryUri" : "http://localhost:8080#Tod_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Person" ],
    "returnType" : [ "date" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Tode von (X).", "Gib mir den Tod von (X).", "Gib mir die Tode von (X).", "Liste alle Tode von (X) auf.", "Liste alle Tode von (X).", "Liste die Tode von (X) auf.", "was ist der Tod (X)?", "was ist der Tod von (X)?", "was sind die Tode (X)?", "was sind die Tode von (X)?", "was war der Tod (X)?", "was war der Tod von (X)?", "was waren die Tode (X)?", "was waren die Tode von (X)?", "welche (Y) sind die Tod von (X)?", "welche (Y) waren die Tod von (X)?", "welcher (Y) ist die Tod von (X)?", "welcher (Y) war die Tod von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/deathDate> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "164",
    "lexicalEntryUri" : "http://localhost:8080#Tod_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Person", "date" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Tod von (X).", "sind (X) die Tode von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/deathDate> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "165",
    "lexicalEntryUri" : "http://localhost:8080#Tod_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Person" ],
    "returnType" : [ "date" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Tod von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/deathDate> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "166",
    "lexicalEntryUri" : "http://localhost:8080#Musik_von_2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Person" ],
    "returnType" : [ "Musical" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Musiken von (X).", "Gib mir die Musik von (X).", "Gib mir die Musiken von (X).", "Liste alle Musiken von (X) auf.", "Liste alle Musiken von (X).", "Liste die Musiken von (X) auf.", "was ist die Musik (X)?", "was ist die Musik von (X)?", "was sind die Musiken (X)?", "was sind die Musiken von (X)?", "was war die Musik (X)?", "was war die Musik von (X)?", "was waren die Musiken (X)?", "was waren die Musiken von (X)?", "welche (Y) sind die Musik von (X)?", "welche (Y) waren die Musik von (X)?", "welcher (Y) ist die Musik von (X)?", "welcher (Y) war die Musik von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/musicBy> ?objOfProp .}",
    "bindingSparql" : null,
    "returnVariable" : "subjOfProp"
  }, {
    "id" : "167",
    "lexicalEntryUri" : "http://localhost:8080#Musik_von_2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Person", "Musical" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Musik von (X).", "sind (X) die Musiken von (X)." ],
    "sparqlQuery" : "ASK WHERE {?Answer <http://dbpedia.org/ontology/musicBy> ?objOfProp .}",
    "bindingSparql" : null,
    "returnVariable" : "subjOfProp"
  }, {
    "id" : "168",
    "lexicalEntryUri" : "http://localhost:8080#Musik_von_2",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Person" ],
    "returnType" : [ "Musical" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Musik von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/musicBy> ?objOfProp .}",
    "bindingSparql" : null,
    "returnVariable" : "subjOfProp"
  }, {
    "id" : "169",
    "lexicalEntryUri" : "http://localhost:8080#Regierungsform_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Country" ],
    "returnType" : [ "GovernmentType" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Regierungsform von (X).", "Gib mir die Regierungsform von (X).", "Liste alle Regierungsform von (X) auf.", "Liste alle Regierungsform von (X).", "Liste die Regierungsform von (X) auf.", "was ist die Regierungsform (X)?", "was ist die Regierungsform von (X)?", "was sind die Regierungsform (X)?", "was sind die Regierungsform von (X)?", "was war die Regierungsform (X)?", "was war die Regierungsform von (X)?", "was waren die Regierungsform (X)?", "was waren die Regierungsform von (X)?", "welche (Y) sind die Regierungsform von (X)?", "welche (Y) waren die Regierungsform von (X)?", "welcher (Y) ist die Regierungsform von (X)?", "welcher (Y) war die Regierungsform von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/governmentType> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "170",
    "lexicalEntryUri" : "http://localhost:8080#Regierungsform_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Country", "GovernmentType" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Regierungsform von (X).", "sind (X) die Regierungsform von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/governmentType> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "171",
    "lexicalEntryUri" : "http://localhost:8080#Regierungsform_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Country" ],
    "returnType" : [ "GovernmentType" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Regierungsform von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/governmentType> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "172",
    "lexicalEntryUri" : "http://localhost:8080#Doktorvater_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Person" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Doktorväter von (X).", "Gib mir den Doktorvater von (X).", "Gib mir die Doktorväter von (X).", "Liste alle Doktorväter von (X) auf.", "Liste alle Doktorväter von (X).", "Liste die Doktorväter von (X) auf.", "welche (Y) sind die Doktorvater von (X)?", "welche (Y) waren die Doktorvater von (X)?", "welcher (Y) ist die Doktorvater von (X)?", "welcher (Y) war die Doktorvater von (X)?", "wer ist der Doktorvater (X)?", "wer ist der Doktorvater von (X)?", "wer sind die Doktorväter (X)?", "wer sind die Doktorväter von (X)?", "wer war der Doktorvater (X)?", "wer war der Doktorvater von (X)?", "wer waren die Doktorväter (X)?", "wer waren die Doktorväter von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/doctoralAdvisor> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "173",
    "lexicalEntryUri" : "http://localhost:8080#Doktorvater_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Person", "Person" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Doktorvater von (X).", "sind (X) die Doktorväter von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/doctoralAdvisor> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "174",
    "lexicalEntryUri" : "http://localhost:8080#Doktorvater_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Person" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Doktorvater von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/doctoralAdvisor> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "175",
    "lexicalEntryUri" : "http://localhost:8080#nettogewinn_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Company" ],
    "returnType" : [ "Thing" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Nettogewinn von (X).", "Gib mir den Nettogewinn von (X).", "Gib mir die Nettogewinn von (X).", "Liste alle Nettogewinn von (X) auf.", "Liste alle Nettogewinn von (X).", "Liste die Nettogewinn von (X) auf.", "was ist der Nettogewinn (X)?", "was ist der Nettogewinn von (X)?", "was sind die Nettogewinn (X)?", "was sind die Nettogewinn von (X)?", "was war der Nettogewinn (X)?", "was war der Nettogewinn von (X)?", "was waren die Nettogewinn (X)?", "was waren die Nettogewinn von (X)?", "welche (Y) sind die Nettogewinn von (X)?", "welche (Y) waren die Nettogewinn von (X)?", "welcher (Y) ist die Nettogewinn von (X)?", "welcher (Y) war die Nettogewinn von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/netIncome> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "176",
    "lexicalEntryUri" : "http://localhost:8080#nettogewinn_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Company", "Thing" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Nettogewinn von (X).", "sind (X) die Nettogewinn von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/netIncome> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "177",
    "lexicalEntryUri" : "http://localhost:8080#nettogewinn_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Company" ],
    "returnType" : [ "Thing" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Nettogewinn von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/netIncome> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "178",
    "lexicalEntryUri" : "http://localhost:8080#gesamt_Population_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Place" ],
    "returnType" : [ "Number" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle gesamt Populationen von (X).", "Gib mir die gesamt Population von (X).", "Gib mir die gesamt Populationen von (X).", "Liste alle gesamt Populationen von (X) auf.", "Liste alle gesamt Populationen von (X).", "Liste die gesamt Populationen von (X) auf.", "was ist die gesamt Population (X)?", "was ist die gesamt Population von (X)?", "was sind die gesamt Populationen (X)?", "was sind die gesamt Populationen von (X)?", "was war die gesamt Population (X)?", "was war die gesamt Population von (X)?", "was waren die gesamt Populationen (X)?", "was waren die gesamt Populationen von (X)?", "welche (Y) sind die gesamt Population von (X)?", "welche (Y) waren die gesamt Population von (X)?", "welcher (Y) ist die gesamt Population von (X)?", "welcher (Y) war die gesamt Population von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/populationTotal> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "179",
    "lexicalEntryUri" : "http://localhost:8080#gesamt_Population_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Place", "Number" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die gesamt Population von (X).", "sind (X) die gesamt Populationen von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/populationTotal> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "180",
    "lexicalEntryUri" : "http://localhost:8080#gesamt_Population_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Place" ],
    "returnType" : [ "Number" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die gesamt Population von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/populationTotal> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "181",
    "lexicalEntryUri" : "http://localhost:8080#Alma_mater_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Place" ],
    "returnType" : [ "Number" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Almae matrum von (X).", "Gib mir den Alma mater von (X).", "Gib mir die Almae matrum von (X).", "Liste alle Almae matrum von (X) auf.", "Liste alle Almae matrum von (X).", "Liste die Almae matrum von (X) auf.", "was ist der Alma mater (X)?", "was ist der Alma mater von (X)?", "was sind die Almae matrum (X)?", "was sind die Almae matrum von (X)?", "was war der Alma mater (X)?", "was war der Alma mater von (X)?", "was waren die Almae matrum (X)?", "was waren die Almae matrum von (X)?", "welche (Y) sind die Alma mater von (X)?", "welche (Y) waren die Alma mater von (X)?", "welcher (Y) ist die Alma mater von (X)?", "welcher (Y) war die Alma mater von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/areaTotal> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "182",
    "lexicalEntryUri" : "http://localhost:8080#Alma_mater_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Place", "Number" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Alma mater von (X).", "sind (X) die Almae matrum von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/areaTotal> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "183",
    "lexicalEntryUri" : "http://localhost:8080#Alma_mater_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Place" ],
    "returnType" : [ "Number" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Alma mater von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/areaTotal> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "184",
    "lexicalEntryUri" : "http://localhost:8080#Musik_von_1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Person" ],
    "returnType" : [ "Musical" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Musiken von (X).", "Gib mir die Musik von (X).", "Gib mir die Musiken von (X).", "Liste alle Musiken von (X) auf.", "Liste alle Musiken von (X).", "Liste die Musiken von (X) auf.", "was ist die Musik (X)?", "was ist die Musik von (X)?", "was sind die Musiken (X)?", "was sind die Musiken von (X)?", "was war die Musik (X)?", "was war die Musik von (X)?", "was waren die Musiken (X)?", "was waren die Musiken von (X)?", "welche (Y) sind die Musik von (X)?", "welche (Y) waren die Musik von (X)?", "welcher (Y) ist die Musik von (X)?", "welcher (Y) war die Musik von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/musicBy> ?objOfProp .}",
    "bindingSparql" : null,
    "returnVariable" : "subjOfProp"
  }, {
    "id" : "185",
    "lexicalEntryUri" : "http://localhost:8080#Musik_von_1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Person", "Musical" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Musik von (X).", "sind (X) die Musiken von (X)." ],
    "sparqlQuery" : "ASK WHERE {?Answer <http://dbpedia.org/ontology/musicBy> ?objOfProp .}",
    "bindingSparql" : null,
    "returnVariable" : "subjOfProp"
  }, {
    "id" : "186",
    "lexicalEntryUri" : "http://localhost:8080#Musik_von_1",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Person" ],
    "returnType" : [ "Musical" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Musik von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/musicBy> ?objOfProp .}",
    "bindingSparql" : null,
    "returnVariable" : "subjOfProp"
  }, {
    "id" : "187",
    "lexicalEntryUri" : "http://localhost:8080#Staatsangehörigkeit_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Person" ],
    "returnType" : [ "Country" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Staatsangehörigkeit von (X).", "Gib mir die Staatsangehörigkeit von (X).", "Liste alle Staatsangehörigkeit von (X) auf.", "Liste alle Staatsangehörigkeit von (X).", "Liste die Staatsangehörigkeit von (X) auf.", "was ist die Staatsangehörigkeit (X)?", "was ist die Staatsangehörigkeit von (X)?", "was sind die Staatsangehörigkeit (X)?", "was sind die Staatsangehörigkeit von (X)?", "was war die Staatsangehörigkeit (X)?", "was war die Staatsangehörigkeit von (X)?", "was waren die Staatsangehörigkeit (X)?", "was waren die Staatsangehörigkeit von (X)?", "welche (Y) sind die Staatsangehörigkeit von (X)?", "welche (Y) waren die Staatsangehörigkeit von (X)?", "welcher (Y) ist die Staatsangehörigkeit von (X)?", "welcher (Y) war die Staatsangehörigkeit von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/nationality> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "188",
    "lexicalEntryUri" : "http://localhost:8080#Staatsangehörigkeit_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Person", "Country" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Staatsangehörigkeit von (X).", "sind (X) die Staatsangehörigkeit von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/nationality> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "189",
    "lexicalEntryUri" : "http://localhost:8080#Staatsangehörigkeit_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Person" ],
    "returnType" : [ "Country" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Staatsangehörigkeit von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/nationality> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "190",
    "lexicalEntryUri" : "http://localhost:8080#Buergermeister_von_2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "City" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Buergermeister von (X).", "Gib mir den Buergermeister von (X).", "Gib mir die Buergermeister von (X).", "Liste alle Buergermeister von (X) auf.", "Liste alle Buergermeister von (X).", "Liste die Buergermeister von (X) auf.", "welche (Y) sind die Buergermeister von (X)?", "welche (Y) waren die Buergermeister von (X)?", "welcher (Y) ist die Buergermeister von (X)?", "welcher (Y) war die Buergermeister von (X)?", "wer ist der Buergermeister (X)?", "wer ist der Buergermeister von (X)?", "wer sind die Buergermeister (X)?", "wer sind die Buergermeister von (X)?", "wer war der Buergermeister (X)?", "wer war der Buergermeister von (X)?", "wer waren die Buergermeister (X)?", "wer waren die Buergermeister von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/leaderName> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "191",
    "lexicalEntryUri" : "http://localhost:8080#Buergermeister_von_2",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "City", "Person" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Buergermeister von (X).", "sind (X) die Buergermeister von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/leaderName> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "192",
    "lexicalEntryUri" : "http://localhost:8080#Buergermeister_von_2",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "City" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Buergermeister von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/leaderName> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "193",
    "lexicalEntryUri" : "http://localhost:8080#vizepräsident_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Person" ],
    "returnType" : [ "Country" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Vizepräsidenten von (X).", "Gib mir den Vizepräsident von (X).", "Gib mir die Vizepräsidenten von (X).", "Liste alle Vizepräsidenten von (X) auf.", "Liste alle Vizepräsidenten von (X).", "Liste die Vizepräsidenten von (X) auf.", "was ist der Vizepräsident (X)?", "was ist der Vizepräsident von (X)?", "was sind die Vizepräsidenten (X)?", "was sind die Vizepräsidenten von (X)?", "was war der Vizepräsident (X)?", "was war der Vizepräsident von (X)?", "was waren die Vizepräsidenten (X)?", "was waren die Vizepräsidenten von (X)?", "welche (Y) sind die Vizepräsident von (X)?", "welche (Y) waren die Vizepräsident von (X)?", "welcher (Y) ist die Vizepräsident von (X)?", "welcher (Y) war die Vizepräsident von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/vicePresident> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "194",
    "lexicalEntryUri" : "http://localhost:8080#vizepräsident_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Person", "Country" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Vizepräsident von (X).", "sind (X) die Vizepräsidenten von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/vicePresident> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "195",
    "lexicalEntryUri" : "http://localhost:8080#vizepräsident_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Person" ],
    "returnType" : [ "Country" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Vizepräsident von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/vicePresident> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "196",
    "lexicalEntryUri" : "http://localhost:8080#Schöpfer_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "FictionalCharacter" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Schöpfer von (X).", "Gib mir den Schöpfer von (X).", "Gib mir die Schöpfer von (X).", "Liste alle Schöpfer von (X) auf.", "Liste alle Schöpfer von (X).", "Liste die Schöpfer von (X) auf.", "welche (Y) sind die Schöpfer von (X)?", "welche (Y) waren die Schöpfer von (X)?", "welcher (Y) ist die Schöpfer von (X)?", "welcher (Y) war die Schöpfer von (X)?", "wer ist der Schöpfer (X)?", "wer ist der Schöpfer von (X)?", "wer sind die Schöpfer (X)?", "wer sind die Schöpfer von (X)?", "wer war der Schöpfer (X)?", "wer war der Schöpfer von (X)?", "wer waren die Schöpfer (X)?", "wer waren die Schöpfer von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/creator> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "197",
    "lexicalEntryUri" : "http://localhost:8080#Schöpfer_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "FictionalCharacter", "Person" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Schöpfer von (X).", "sind (X) die Schöpfer von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/creator> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "198",
    "lexicalEntryUri" : "http://localhost:8080#Schöpfer_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "FictionalCharacter" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Schöpfer von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/creator> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "199",
    "lexicalEntryUri" : "http://localhost:8080#Entwickler_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Software" ],
    "returnType" : [ "University" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Entwickler von (X).", "Gib mir den Entwickler von (X).", "Gib mir die Entwickler von (X).", "Liste alle Entwickler von (X) auf.", "Liste alle Entwickler von (X).", "Liste die Entwickler von (X) auf.", "welche (Y) sind die Entwickler von (X)?", "welche (Y) waren die Entwickler von (X)?", "welcher (Y) ist die Entwickler von (X)?", "welcher (Y) war die Entwickler von (X)?", "wer ist der Entwickler (X)?", "wer ist der Entwickler von (X)?", "wer sind die Entwickler (X)?", "wer sind die Entwickler von (X)?", "wer war der Entwickler (X)?", "wer war der Entwickler von (X)?", "wer waren die Entwickler (X)?", "wer waren die Entwickler von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/developer> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "200",
    "lexicalEntryUri" : "http://localhost:8080#Entwickler_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Software", "University" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Entwickler von (X).", "sind (X) die Entwickler von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/developer> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "201",
    "lexicalEntryUri" : "http://localhost:8080#Entwickler_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Software" ],
    "returnType" : [ "University" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Entwickler von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/developer> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "202",
    "lexicalEntryUri" : "http://localhost:8080#Partei-von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Politician" ],
    "returnType" : [ "Thing" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Parteien von (X).", "Gib mir die Partei von (X).", "Gib mir die Parteien von (X).", "Liste alle Parteien von (X) auf.", "Liste alle Parteien von (X).", "Liste die Parteien von (X) auf.", "was ist die Partei (X)?", "was ist die Partei von (X)?", "was sind die Parteien (X)?", "was sind die Parteien von (X)?", "was war die Partei (X)?", "was war die Partei von (X)?", "was waren die Parteien (X)?", "was waren die Parteien von (X)?", "welche (Y) sind die Partei von (X)?", "welche (Y) waren die Partei von (X)?", "welcher (Y) ist die Partei von (X)?", "welcher (Y) war die Partei von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/party> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "203",
    "lexicalEntryUri" : "http://localhost:8080#Partei-von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Politician", "Thing" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Partei von (X).", "sind (X) die Parteien von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/party> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "204",
    "lexicalEntryUri" : "http://localhost:8080#Partei-von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Politician" ],
    "returnType" : [ "Thing" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Partei von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/party> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "205",
    "lexicalEntryUri" : "http://localhost:8080#Schauspieler_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Film" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Schauspieler von (X).", "Gib mir den Schauspieler von (X).", "Gib mir die Schauspieler von (X).", "Liste alle Schauspieler von (X) auf.", "Liste alle Schauspieler von (X).", "Liste die Schauspieler von (X) auf.", "welche (Y) sind die Schauspieler von (X)?", "welche (Y) waren die Schauspieler von (X)?", "welcher (Y) ist die Schauspieler von (X)?", "welcher (Y) war die Schauspieler von (X)?", "wer ist der Schauspieler (X)?", "wer ist der Schauspieler von (X)?", "wer sind die Schauspieler (X)?", "wer sind die Schauspieler von (X)?", "wer war der Schauspieler (X)?", "wer war der Schauspieler von (X)?", "wer waren die Schauspieler (X)?", "wer waren die Schauspieler von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/starring> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "206",
    "lexicalEntryUri" : "http://localhost:8080#Schauspieler_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Film", "Person" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Schauspieler von (X).", "sind (X) die Schauspieler von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/starring> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "207",
    "lexicalEntryUri" : "http://localhost:8080#Schauspieler_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Film" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Schauspieler von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/starring> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "208",
    "lexicalEntryUri" : "http://localhost:8080#praesident_von_1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Legislature" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle praesidenten von (X).", "Gib mir den praesident von (X).", "Gib mir die praesidenten von (X).", "Liste alle praesidenten von (X) auf.", "Liste alle praesidenten von (X).", "Liste die praesidenten von (X) auf.", "welche (Y) sind die praesident von (X)?", "welche (Y) waren die praesident von (X)?", "welcher (Y) ist die praesident von (X)?", "welcher (Y) war die praesident von (X)?", "wer ist der praesident (X)?", "wer ist der praesident von (X)?", "wer sind die praesidenten (X)?", "wer sind die praesidenten von (X)?", "wer war der praesident (X)?", "wer war der praesident von (X)?", "wer waren die praesidenten (X)?", "wer waren die praesidenten von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/leader> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "209",
    "lexicalEntryUri" : "http://localhost:8080#praesident_von_1",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Legislature", "Person" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die praesident von (X).", "sind (X) die praesidenten von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/leader> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "210",
    "lexicalEntryUri" : "http://localhost:8080#praesident_von_1",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Legislature" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die praesident von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/leader> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "211",
    "lexicalEntryUri" : "http://localhost:8080#Minister_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Organisation" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Minister von (X).", "Gib mir den Minister von (X).", "Gib mir die Minister von (X).", "Liste alle Minister von (X) auf.", "Liste alle Minister von (X).", "Liste die Minister von (X) auf.", "welche (Y) sind die Minister von (X)?", "welche (Y) waren die Minister von (X)?", "welcher (Y) ist die Minister von (X)?", "welcher (Y) war die Minister von (X)?", "wer ist der Minister (X)?", "wer ist der Minister von (X)?", "wer sind die Minister (X)?", "wer sind die Minister von (X)?", "wer war der Minister (X)?", "wer war der Minister von (X)?", "wer waren die Minister (X)?", "wer waren die Minister von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/leader> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "212",
    "lexicalEntryUri" : "http://localhost:8080#Minister_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Organisation", "Person" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Minister von (X).", "sind (X) die Minister von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/leader> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "213",
    "lexicalEntryUri" : "http://localhost:8080#Minister_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Organisation" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Minister von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/leader> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "214",
    "lexicalEntryUri" : "http://localhost:8080#Spiele_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Company" ],
    "returnType" : [ "Publisher" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Spiele von (X).", "Gib mir das Spiel von (X).", "Gib mir die Spiele von (X).", "Liste alle Spiele von (X) auf.", "Liste alle Spiele von (X).", "Liste d Spiele von (X) auf.", "was ist das Spiel (X)?", "was ist das Spiel von (X)?", "was sind d Spiele (X)?", "was sind d Spiele von (X)?", "was war das Spiel (X)?", "was war das Spiel von (X)?", "was waren d Spiele (X)?", "was waren d Spiele von (X)?", "welche (Y) sind das Spiel von (X)?", "welche (Y) waren das Spiel von (X)?", "welcher (Y) ist das Spiel von (X)?", "welcher (Y) war das Spiel von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/publisher> ?objOfProp .}",
    "bindingSparql" : null,
    "returnVariable" : "subjOfProp"
  }, {
    "id" : "215",
    "lexicalEntryUri" : "http://localhost:8080#Spiele_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Company", "Publisher" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) das Spiel von (X).", "sind (X) d Spiele von (X)." ],
    "sparqlQuery" : "ASK WHERE {?Answer <http://dbpedia.org/ontology/publisher> ?objOfProp .}",
    "bindingSparql" : null,
    "returnVariable" : "subjOfProp"
  }, {
    "id" : "216",
    "lexicalEntryUri" : "http://localhost:8080#Spiele_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Company" ],
    "returnType" : [ "Publisher" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "das Spiel von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/publisher> ?objOfProp .}",
    "bindingSparql" : null,
    "returnVariable" : "subjOfProp"
  }, {
    "id" : "217",
    "lexicalEntryUri" : "http://localhost:8080#Bandmitglieder_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Band" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Bandmitglieder von (X).", "Gib mir den Bandmitglieder von (X).", "Gib mir die Bandmitglieder von (X).", "Liste alle Bandmitglieder von (X) auf.", "Liste alle Bandmitglieder von (X).", "Liste die Bandmitglieder von (X) auf.", "welche (Y) sind die Bandmitglieder von (X)?", "welche (Y) waren die Bandmitglieder von (X)?", "welcher (Y) ist die Bandmitglieder von (X)?", "welcher (Y) war die Bandmitglieder von (X)?", "wer ist der Bandmitglieder (X)?", "wer ist der Bandmitglieder von (X)?", "wer sind die Bandmitglieder (X)?", "wer sind die Bandmitglieder von (X)?", "wer war der Bandmitglieder (X)?", "wer war der Bandmitglieder von (X)?", "wer waren die Bandmitglieder (X)?", "wer waren die Bandmitglieder von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/bandMember> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "218",
    "lexicalEntryUri" : "http://localhost:8080#Bandmitglieder_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Band", "Person" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Bandmitglieder von (X).", "sind (X) die Bandmitglieder von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/bandMember> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "219",
    "lexicalEntryUri" : "http://localhost:8080#Bandmitglieder_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Band" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Bandmitglieder von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/bandMember> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "220",
    "lexicalEntryUri" : "http://localhost:8080#Bandmitglieder_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Band" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Bandmitglieder von (X).", "Gib mir den Bandmitglieder von (X).", "Gib mir die Bandmitglieder von (X).", "Liste alle Bandmitglieder von (X) auf.", "Liste alle Bandmitglieder von (X).", "Liste die Bandmitglieder von (X) auf.", "welche (Y) sind die Bandmitglieder von (X)?", "welche (Y) waren die Bandmitglieder von (X)?", "welcher (Y) ist die Bandmitglieder von (X)?", "welcher (Y) war die Bandmitglieder von (X)?", "wer ist der Bandmitglieder (X)?", "wer ist der Bandmitglieder von (X)?", "wer sind die Bandmitglieder (X)?", "wer sind die Bandmitglieder von (X)?", "wer war der Bandmitglieder (X)?", "wer war der Bandmitglieder von (X)?", "wer waren die Bandmitglieder (X)?", "wer waren die Bandmitglieder von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/bandMember> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "221",
    "lexicalEntryUri" : "http://localhost:8080#Bandmitglieder_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Band", "Person" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Bandmitglieder von (X).", "sind (X) die Bandmitglieder von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/bandMember> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "222",
    "lexicalEntryUri" : "http://localhost:8080#Bandmitglieder_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Band" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Bandmitglieder von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/bandMember> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "223",
    "lexicalEntryUri" : "http://localhost:8080#Population_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Place" ],
    "returnType" : [ "Number" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Populationen von (X).", "Gib mir die Population von (X).", "Gib mir die Populationen von (X).", "Liste alle Populationen von (X) auf.", "Liste alle Populationen von (X).", "Liste die Populationen von (X) auf.", "was ist die Population (X)?", "was ist die Population von (X)?", "was sind die Populationen (X)?", "was sind die Populationen von (X)?", "was war die Population (X)?", "was war die Population von (X)?", "was waren die Populationen (X)?", "was waren die Populationen von (X)?", "welche (Y) sind die Population von (X)?", "welche (Y) waren die Population von (X)?", "welcher (Y) ist die Population von (X)?", "welcher (Y) war die Population von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/populationTotal> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "224",
    "lexicalEntryUri" : "http://localhost:8080#Population_von",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Place", "Number" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Population von (X).", "sind (X) die Populationen von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/populationTotal> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "225",
    "lexicalEntryUri" : "http://localhost:8080#Population_von",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "Place" ],
    "returnType" : [ "Number" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Population von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/populationTotal> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "226",
    "lexicalEntryUri" : "http://localhost:8080#Buergermeisterin_von_4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "City" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "forward",
    "sentences" : [ "Gib mir alle Buergermeisterin von (X).", "Gib mir den Buergermeisterin von (X).", "Gib mir die Buergermeisterin von (X).", "Liste alle Buergermeisterin von (X) auf.", "Liste alle Buergermeisterin von (X).", "Liste die Buergermeisterin von (X) auf.", "welche (Y) sind die Buergermeisterin von (X)?", "welche (Y) waren die Buergermeisterin von (X)?", "welcher (Y) ist die Buergermeisterin von (X)?", "welcher (Y) war die Buergermeisterin von (X)?", "wer ist der Buergermeisterin (X)?", "wer ist der Buergermeisterin von (X)?", "wer sind die Buergermeisterin (X)?", "wer sind die Buergermeisterin von (X)?", "wer war der Buergermeisterin (X)?", "wer war der Buergermeisterin von (X)?", "wer waren die Buergermeisterin (X)?", "wer waren die Buergermeisterin von (X)?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/mayor> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "227",
    "lexicalEntryUri" : "http://localhost:8080#Buergermeisterin_von_4",
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "City", "Person" ],
    "returnType" : [ "BooleanFlag" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "booleanQuestion",
    "sentences" : [ "ist (X) die Buergermeisterin von (X).", "sind (X) die Buergermeisterin von (X)." ],
    "sparqlQuery" : "ASK WHERE {?subjOfProp <http://dbpedia.org/ontology/mayor> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "228",
    "lexicalEntryUri" : "http://localhost:8080#Buergermeisterin_von_4",
    "language" : "DE",
    "type" : "NP",
    "bindingType" : [ "City" ],
    "returnType" : [ "Person" ],
    "frameType" : "NPP",
    "sentenceTemplate" : "nounPhrase",
    "sentences" : [ "die Buergermeisterin von (X)" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <http://dbpedia.org/ontology/mayor> ?Answer .}",
    "bindingSparql" : null,
    "returnVariable" : "objOfProp"
  }, {
    "id" : "229",
    "lexicalEntryUri" : null,
    "language" : "DE",
    "type" : "SENTENCE",
    "bindingType" : [ "Location" ],
    "returnType" : [ "Location" ],
    "frameType" : "FULL_DATASET",
    "sentenceTemplate" : null,
    "sentences" : [ "Where is $x located?" ],
    "sparqlQuery" : "SELECT ?Answer WHERE { ?subjOfProp <null> ?objOfProp .}",
    "bindingSparql" : null,
    "returnVariable" : null
  } ]
}
