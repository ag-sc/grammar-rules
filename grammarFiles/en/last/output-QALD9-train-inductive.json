{
  "results" : [ {
    "id" : "1",
    "status" : "WORK",
    "sentence" : "List all boardgames by GMT.",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/publisher> <http://dbpedia.org/resource/GMT_Games> .}" ]
  }, {
    "id" : "2",
    "status" : "WORK",
    "sentence" : "Who developed Skype?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/product> <http://dbpedia.org/resource/Skype> .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Skype> <http://dbpedia.org/ontology/developer> ?Answer .}" ]
  }, {
    "id" : "3",
    "status" : "WORK",
    "sentence" : "Which people were born in Heraklion?",
    "givenSparql" : "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Person>. ?Answer <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Heraklion> .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Person>. ?Arg <http://dbpedia.org/ontology/birthDate> ?Answer .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Person>. ?Arg <http://dbpedia.org/ontology/birthYear> ?Answer .}" ]
  }, {
    "id" : "4",
    "status" : "N",
    "sentence" : "In which U.S. state is Area 51 located?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }",
    "sparqls" : [ ]
  }, {
    "id" : "5",
    "status" : "WORK",
    "sentence" : "Who is the mayor of New York City?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/leaderName> <http://dbpedia.org/resource/Republican_Party_of_New_York> .}", "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/mayor> <http://dbpedia.org/resource/New_Centre> .}" ]
  }, {
    "id" : "6",
    "status" : "N",
    "sentence" : "Which countries have places with more than two caves?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?cave rdf:type dbo:Cave ; dbo:location ?uri . ?uri rdf:type dbo:Country } GROUP BY ?uri HAVING ( COUNT(?cave) > 2 )",
    "sparqls" : [ ]
  }, {
    "id" : "7",
    "status" : "WORK",
    "sentence" : "Where did Abraham Lincoln die?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Abraham_Lincoln> <http://dbpedia.org/ontology/deathPlace> ?Answer .}" ]
  }, {
    "id" : "8",
    "status" : "WORK",
    "sentence" : "Which airports does Air China serve?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Airport>. ?Answer <http://dbpedia.org/ontology/targetAirport> <http://dbpedia.org/resource/China> .}" ]
  }, {
    "id" : "9",
    "status" : "WORK",
    "sentence" : "Give me all actors starring in movies directed by and starring William Shatner.",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Actor>. <http://dbpedia.org/resource/Roast_Beef_and_Movies> <http://dbpedia.org/ontology/starring> ?Answer .}" ]
  }, {
    "id" : "10",
    "status" : "WORK",
    "sentence" : "What are the official languages of the Philippines?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/officialLanguage> <http://dbpedia.org/resource/Federal_government_of_the_United_States> .}" ]
  }, {
    "id" : "11",
    "status" : "N",
    "sentence" : "Give me all Danish films.",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:country res:Denmark }",
    "sparqls" : [ ]
  }, {
    "id" : "12",
    "status" : "WORK",
    "sentence" : "Which movies starring Brad Pitt were directed by Guy Ritchie?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Brad_Pitt ; dbo:director res:Guy_Ritchie }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Guy_Ritchie> .}" ]
  }, {
    "id" : "13",
    "status" : "N",
    "sentence" : "Give me the grandchildren of Bruce Lee.",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Bruce_Lee dbo:child ?child . ?child <http://dbpedia.org/property/children> ?uri }",
    "sparqls" : [ ]
  }, {
    "id" : "14",
    "status" : "WORK",
    "sentence" : "Which other weapons did the designer of the Uzi develop?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Weapon ; dbp:designer ?x . res:Uzi dbp:designer ?x FILTER ( ?uri != res:Uzi ) }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Wizards_of_the_Coast> .}", "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/product> <http://dbpedia.org/resource/The_Typing_of_the_Dead> .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Yvon_of_the_Yukon> <http://dbpedia.org/ontology/developer> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Wizards_of_the_Coast> <http://dbpedia.org/ontology/product> ?Answer .}" ]
  }, {
    "id" : "15",
    "status" : "WORK",
    "sentence" : "Who is the owner of Universal Studios?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/owner> <http://dbpedia.org/resource/Universal_Studios> .}" ]
  }, {
    "id" : "16",
    "status" : "N",
    "sentence" : "Which state of the USA has the highest population density?",
    "givenSparql" : "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:densityrank ?rank } ORDER BY ASC(?rank) LIMIT 1",
    "sparqls" : [ ]
  }, {
    "id" : "17",
    "status" : "WORK",
    "sentence" : "Which monarchs were married to a German?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Monarch ; dbo:spouse ?spouse { ?spouse dbo:birthPlace res:Germany } UNION { ?spouse dbo:birthPlace ?p . ?p dbo:country res:Germany } }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Monarch>. ?Answer <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Mike_German> .}" ]
  }, {
    "id" : "18",
    "status" : "WORK",
    "sentence" : "Which organizations were founded in 1950?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, \"^1950\") }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/foundationPlace> \"1950\"^^<http://www.w3.org/2001/XMLSchema#gYear> .}", "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/govermentType> \"1950\"^^<http://www.w3.org/2001/XMLSchema#gYear> .}", "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/property/founded> \"1950\"^^<http://www.w3.org/2001/XMLSchema#gYear> .}", "SELECT ?Answer WHERE { \"1950\"^^<http://www.w3.org/2001/XMLSchema#gYear> <http://dbpedia.org/ontology/formationYear> ?Answer .}", "SELECT ?Answer WHERE { \"1950\"^^<http://www.w3.org/2001/XMLSchema#gYear> <http://dbpedia.org/ontology/founded> ?Answer .}", "SELECT ?Answer WHERE { \"1950\"^^<http://www.w3.org/2001/XMLSchema#gYear> <http://dbpedia.org/ontology/foundingYear> ?Answer .}" ]
  }, {
    "id" : "19",
    "status" : "WORK",
    "sentence" : "Who created the comic Captain America?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Captain_America dbo:creator ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Unscientific_America> <http://dbpedia.org/ontology/author> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Invasion_America> <http://dbpedia.org/ontology/creator> ?Answer .}", "SELECT ?Answer WHERE { ?Arg <http://dbpedia.org/ontology/notableWork> ?Answer .}" ]
  }, {
    "id" : "20",
    "status" : "WORK",
    "sentence" : "Give me the Apollo 14 astronauts.",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:mission res:Apollo_14 }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/mission> <http://dbpedia.org/resource/Apollo_14> .}" ]
  }, {
    "id" : "21",
    "status" : "WORK",
    "sentence" : "Who wrote the book The pillars of the Earth?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Unaccustomed_Earth> <http://dbpedia.org/ontology/author> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Earth_Seeker> <http://dbpedia.org/ontology/composer> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Yellow_Earth> <http://dbpedia.org/ontology/writer> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Target_Earth_(album)> <http://dbpedia.org/property/allLyrics> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Batman:_Earth_One> <http://dbpedia.org/property/editor> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/New_Earth> <http://dbpedia.org/property/writer> ?Answer .}" ]
  }, {
    "id" : "22",
    "status" : "N",
    "sentence" : "Which state of the United States of America has the highest density?",
    "givenSparql" : "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1",
    "sparqls" : [ ]
  }, {
    "id" : "23",
    "status" : "WORK",
    "sentence" : "Which spaceflights were launched from Baikonur?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/launchPad> res:Baikonur_Cosmodrome }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/property/launchPad> <http://dbpedia.org/resource/Baikonur_Cosmodrome> .}" ]
  }, {
    "id" : "24",
    "status" : "N",
    "sentence" : "Give me a list of all trumpet players that were bandleaders.",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }",
    "sparqls" : [ ]
  }, {
    "id" : "25",
    "status" : "N",
    "sentence" : "Which U.S. states are in the same timezone as Utah?",
    "givenSparql" : "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }",
    "sparqls" : [ ]
  }, {
    "id" : "26",
    "status" : "N",
    "sentence" : "Which U.S. states possess gold minerals?",
    "givenSparql" : "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:mineral ?mineral FILTER regex(?mineral, \"gold\", \"i\") }",
    "sparqls" : [ ]
  }, {
    "id" : "27",
    "status" : "WORK",
    "sentence" : "Who is the daughter of Ingrid Bergman married to?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Mats_Bergman> .}" ]
  }, {
    "id" : "28",
    "status" : "WORK",
    "sentence" : "How deep is Lake Placid?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?n WHERE { <http://dbpedia.org/resource/Lake_Placid_(Texas)> dbo:maximumDepth ?n }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Lake_Placid_(Texas)> <http://dbpedia.org/ontology/maximumDepth> ?Answer .}" ]
  }, {
    "id" : "29",
    "status" : "WORK",
    "sentence" : "Show me all museums in London.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Museum> ; <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/London> }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/London> .}", "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/property/museum> ?Arg .}" ]
  }, {
    "id" : "30",
    "status" : "N",
    "sentence" : "Which caves have more than 3 entrances?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Cave> ; <http://dbpedia.org/property/entranceCount> ?entrance FILTER ( ?entrance > 3 ) }",
    "sparqls" : [ ]
  }, {
    "id" : "31",
    "status" : "WORK",
    "sentence" : "Who is the tallest player of the Atlanta Falcons?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1",
    "sparqls" : [ "SELECT DISTINCT ?subjOfProp WHERE { ?subjOfProp <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> . ?subjOfProp <http://dbpedia.org/ontology/height> ?num . } ORDER BY DESC(?num) LIMIT 1" ]
  }, {
    "id" : "32",
    "status" : "N",
    "sentence" : "What are the top-10 action role-playing video games according to IGN?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri <http://purl.org/dc/terms/subject> <http://dbpedia.org/resource/Category:Action_role-playing_video_games> ; <http://dbpedia.org/property/ign> ?score } ORDER BY DESC(?score) LIMIT 10",
    "sparqls" : [ ]
  }, {
    "id" : "33",
    "status" : "WORK",
    "sentence" : "Give me all writers that won the Nobel Prize in literature.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Writer> ; <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Nobel_Prize_in_Literature> }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Writer>. ?Answer <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Nobel_Prize_in_Literature> .}" ]
  }, {
    "id" : "34",
    "status" : "WORK",
    "sentence" : "Show me all basketball players that are higher than 2 meters.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/BasketballPlayer> ; <http://dbpedia.org/ontology/height> ?n FILTER ( ?n > 2.0 ) }",
    "sparqls" : [ "SELECT DISTINCT ?subjOfProp WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/BasketballPlayer>. ?subjOfProp <http://dbpedia.org/ontology/elevation> ?Answer FILTER ( ?Answer > 2 ) }", "SELECT DISTINCT ?subjOfProp WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/BasketballPlayer>. ?subjOfProp <http://dbpedia.org/ontology/height> ?Answer FILTER ( ?Answer > 2 ) }" ]
  }, {
    "id" : "35",
    "status" : "N",
    "sentence" : "When was the Statue of Liberty built?",
    "givenSparql" : "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Statue_of_Liberty> <http://dbpedia.org/property/beginningDate> ?date }",
    "sparqls" : [ ]
  }, {
    "id" : "36",
    "status" : "WORK",
    "sentence" : "Which states border Illinois?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Illinois> <http://dbpedia.org/property/borderingstates> ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Illinois> <http://dbpedia.org/property/borderingstates> ?Answer .}" ]
  }, {
    "id" : "37",
    "status" : "WORK",
    "sentence" : "Who developed Minecraft?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Minecraft> <http://dbpedia.org/ontology/developer> ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/product> <http://dbpedia.org/resource/Minecraft> .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Minecraft> <http://dbpedia.org/ontology/developer> ?Answer .}" ]
  }, {
    "id" : "38",
    "status" : "WORK",
    "sentence" : "Where did Hillel Slovak die?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hillel_Slovak> <http://dbpedia.org/ontology/deathPlace> ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Hillel_Slovak> <http://dbpedia.org/ontology/deathPlace> ?Answer .}" ]
  }, {
    "id" : "39",
    "status" : "WORK",
    "sentence" : "What movies does Jesse Eisenberg play in?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jesse_Eisenberg> }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Film>. ?Answer <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jesse_Eisenberg> .}" ]
  }, {
    "id" : "40",
    "status" : "WORK",
    "sentence" : "Give all swimmers that were born in Moscow.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Swimmer> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Moscow> }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Swimmer>. ?Answer <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Moscow> .}" ]
  }, {
    "id" : "41",
    "status" : "N",
    "sentence" : "Give me all cosmonauts.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Astronaut> { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Russia> } UNION { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Soviet_Union> } }",
    "sparqls" : [ ]
  }, {
    "id" : "42",
    "status" : "N",
    "sentence" : "Give me all Swiss non-profit organizations.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/type> <http://dbpedia.org/resource/Nonprofit_organization> { ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Switzerland> } UNION { ?uri <http://dbpedia.org/ontology/location> ?x . ?x <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Switzerland> } }",
    "sparqls" : [ ]
  }, {
    "id" : "43",
    "status" : "WORK",
    "sentence" : "Which presidents were born in 1945?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/President> ; <http://dbpedia.org/ontology/birthDate> ?date FILTER regex(?date, \"^1945\") }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/President>. ?Answer <http://dbpedia.org/ontology/birthPlace> \"1945\"^^<http://www.w3.org/2001/XMLSchema#gYear> .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/President>. \"1945\"^^<http://www.w3.org/2001/XMLSchema#gYear> <http://dbpedia.org/ontology/birthDate> ?Answer .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/President>. \"1945\"^^<http://www.w3.org/2001/XMLSchema#gYear> <http://dbpedia.org/ontology/birthYear> ?Answer .}" ]
  }, {
    "id" : "44",
    "status" : "WORK",
    "sentence" : "What kind of music did Lou Reed play?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lou_Reed> <http://dbpedia.org/ontology/genre> ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Reed_Diamond> .}", "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Lou_Reed> .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Thelma_Lou> <http://dbpedia.org/ontology/portrayer> ?Answer .}" ]
  }, {
    "id" : "45",
    "status" : "N",
    "sentence" : "Where do the Red Sox play?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Boston_Red_Sox> <http://dbpedia.org/property/ballpark> ?uri }",
    "sparqls" : [ ]
  }, {
    "id" : "46",
    "status" : "N",
    "sentence" : "Show a list of soccer clubs that play in the Bundesliga.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerClub> ; <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/Bundesliga> }",
    "sparqls" : [ ]
  }, {
    "id" : "47",
    "status" : "N",
    "sentence" : "Which volcanos in Japan erupted since 2000?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Volcano> ; <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/Japan> ; <http://dbpedia.org/ontology/eruptionYear> ?date FILTER ( year(?date) >= 2000 ) }",
    "sparqls" : [ ]
  }, {
    "id" : "48",
    "status" : "WORK",
    "sentence" : "Which bridges cross the Seine?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Bridge> ; <http://dbpedia.org/ontology/crosses> <http://dbpedia.org/resource/Seine> }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Bridge>. ?Answer <http://dbpedia.org/ontology/crosses> <http://dbpedia.org/resource/Seine> .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Bridge>. ?Arg <http://dbpedia.org/ontology/crosses> ?Answer .}" ]
  }, {
    "id" : "49",
    "status" : "N",
    "sentence" : "What is the official color of the University of Oxford?",
    "givenSparql" : "SELECT DISTINCT ?string WHERE { <http://dbpedia.org/resource/University_of_Oxford> <http://dbpedia.org/ontology/officialSchoolColour> ?string }",
    "sparqls" : [ ]
  }, {
    "id" : "50",
    "status" : "N",
    "sentence" : "How many films did Hal Roach produce?",
    "givenSparql" : "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> }",
    "sparqls" : [ ]
  }, {
    "id" : "51",
    "status" : "WORK",
    "sentence" : "Give me all Danish movies.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Denmark> }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/starring> <Nora Danish> .}", "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Nora_Danish> .}" ]
  }, {
    "id" : "52",
    "status" : "N",
    "sentence" : "What is the most frequent cause of death?",
    "givenSparql" : "SELECT DISTINCT ?x WHERE { ?uri <http://dbpedia.org/ontology/deathCause> ?x . } ORDER BY DESC(COUNT(DISTINCT ?uri)) OFFSET 0 LIMIT 1",
    "sparqls" : [ ]
  }, {
    "id" : "53",
    "status" : "N",
    "sentence" : "Who are the four youngest MVP basketball players?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/BasketballPlayer> ; <http://dbpedia.org/ontology/birthDate> ?date ; <http://dbpedia.org/property/highlights> ?h FILTER regex(?h, \"MVP\") } ORDER BY DESC(?date) OFFSET 0 LIMIT 4",
    "sparqls" : [ ]
  }, {
    "id" : "54",
    "status" : "N",
    "sentence" : "Give me all companies in Munich.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Company> { ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Munich> } UNION { ?uri <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Munich> } UNION { ?uri <http://dbpedia.org/ontology/locationCity> <http://dbpedia.org/resource/Munich> } }",
    "sparqls" : [ ]
  }, {
    "id" : "55",
    "status" : "WORK",
    "sentence" : "Give me the capitals of all countries that the Himalayas run through.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Himalayas> <http://dbpedia.org/ontology/country> ?country . ?country <http://dbpedia.org/ontology/capital> ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/foundationPlace> <http://dbpedia.org/resource/University_of_Nottingham> .}" ]
  }, {
    "id" : "56",
    "status" : "N",
    "sentence" : "How many movies did Park Chan-wook direct?",
    "givenSparql" : "SELECT COUNT(DISTINCT ?uri AS ?uri) WHERE { ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Park_Chan-wook> . }",
    "sparqls" : [ ]
  }, {
    "id" : "57",
    "status" : "WORK",
    "sentence" : "Which rivers flow into a German lake?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/River> . ?x <http://dbpedia.org/ontology/inflow> ?uri ; a <http://dbpedia.org/ontology/Lake> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Germany> }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/River>. ?Answer <http://dbpedia.org/ontology/inflow> <http://dbpedia.org/resource/Waneta_Lake> .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/River>. <http://dbpedia.org/resource/Łańskie_Lake> <http://dbpedia.org/ontology/inflow> ?Answer .}" ]
  }, {
    "id" : "58",
    "status" : "N",
    "sentence" : "How many airlines are there?",
    "givenSparql" : "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Airline> }",
    "sparqls" : [ ]
  }, {
    "id" : "59",
    "status" : "N",
    "sentence" : "Give me all islands that belong to Japan.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Island> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Japan> }",
    "sparqls" : [ ]
  }, {
    "id" : "60",
    "status" : "N",
    "sentence" : "How many inhabitants does Maribor have?",
    "givenSparql" : "SELECT DISTINCT ?num WHERE { <http://dbpedia.org/resource/Maribor> <http://dbpedia.org/ontology/populationTotal> ?num }",
    "sparqls" : [ ]
  }, {
    "id" : "61",
    "status" : "WORK",
    "sentence" : "Give me all Apollo 14 astronauts.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/mission> <http://dbpedia.org/resource/Apollo_14> }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/mission> <http://dbpedia.org/resource/Apollo_14> .}" ]
  }, {
    "id" : "62",
    "status" : "N",
    "sentence" : "Which companies have more than 1 million employees?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Company> { ?uri <http://dbpedia.org/ontology/numberOfEmployees> ?n } UNION { ?uri <http://dbpedia.org/property/numEmployees> ?n } FILTER ( ?n > 1000000 ) }",
    "sparqls" : [ ]
  }, {
    "id" : "63",
    "status" : "WORK",
    "sentence" : "In which films directed by Garry Marshall was Julia Roberts starring?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Julia_Roberts> ; <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Garry_Marshall> }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Film>. <http://dbpedia.org/resource/Julia_Julia> <http://dbpedia.org/ontology/director> ?Answer .}" ]
  }, {
    "id" : "64",
    "status" : "N",
    "sentence" : "Give me all soccer clubs in the Premier League.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerClub> ; <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/Premier_League> }",
    "sparqls" : [ ]
  }, {
    "id" : "65",
    "status" : "N",
    "sentence" : "What is the highest place of the Urals?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ural_Mountains> <http://dbpedia.org/property/highest> ?uri }",
    "sparqls" : [ ]
  }, {
    "id" : "66",
    "status" : "WORK",
    "sentence" : "Who is the governor of Wyoming?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Wyoming> <http://dbpedia.org/property/governor> ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/governor> ?Arg .}", "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/property/governor> ?Arg .}" ]
  }, {
    "id" : "67",
    "status" : "WORK",
    "sentence" : "Where did the architect of the Eiffel Tower study?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Eiffel_Tower> <http://dbpedia.org/ontology/architect> ?x . ?x <http://dbpedia.org/property/almaMater> ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/architect> <http://dbpedia.org/resource/The_Parkinsons> .}" ]
  }, {
    "id" : "68",
    "status" : "N",
    "sentence" : "Give me all world heritage sites designated within the past two years.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WorldHeritageSite> . { ?uri <http://dbpedia.org/property/year> '2013'^^xsd:integer . } UNION { ?uri <http://dbpedia.org/property/year> '2014'^^xsd:integer . } }",
    "sparqls" : [ ]
  }, {
    "id" : "69",
    "status" : "N",
    "sentence" : "Give me all actors who were born in Paris after 1950.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Actor> . ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Paris> . ?uri <http://dbpedia.org/ontology/birthDate> ?date . FILTER ( ?date >= xsd:dateTime('1950-12-31T00:00:00Z')) }",
    "sparqls" : [ ]
  }, {
    "id" : "70",
    "status" : "WORK",
    "sentence" : "Which movies star both Liz Taylor and Richard Burton?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Elizabeth_Taylor> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Richard_Burton> }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Film>. <http://dbpedia.org/resource/Burton_&_Taylor> <http://dbpedia.org/ontology/starring> ?Answer .}" ]
  }, {
    "id" : "71",
    "status" : "N",
    "sentence" : "Give me all Australian nonprofit organizations.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/type> <http://dbpedia.org/resource/Nonprofit_organization> { ?uri <http://dbpedia.org/ontology/locationCountry> <http://dbpedia.org/resource/Australia> } UNION { ?uri <http://dbpedia.org/ontology/location> ?x . ?x <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Australia> } }",
    "sparqls" : [ ]
  }, {
    "id" : "72",
    "status" : "WORK",
    "sentence" : "Which pope succeeded John Paul II?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pope_John_Paul_II> <http://dbpedia.org/property/successor> ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Pope>. <http://dbpedia.org/resource/John_Paul_Stevens> <http://dbpedia.org/ontology/successor> ?Answer .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Pope>. <http://dbpedia.org/resource/Pope_John_Paul_II> <http://dbpedia.org/property/successor> ?Answer .}" ]
  }, {
    "id" : "73",
    "status" : "N",
    "sentence" : "Give me all ESA astronauts.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Astronaut> ; <http://dbpedia.org/property/type> <http://dbpedia.org/resource/European_Space_Agency> }",
    "sparqls" : [ ]
  }, {
    "id" : "74",
    "status" : "N",
    "sentence" : "Who was president of Pakistan in 1978?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/title> <http://dbpedia.org/resource/President_of_Pakistan> ; <http://dbpedia.org/property/years> 1978 }",
    "sparqls" : [ ]
  }, {
    "id" : "75",
    "status" : "WORK",
    "sentence" : "Who is the owner of Rolls-Royce?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Rolls-Royce_Motors> <http://dbpedia.org/ontology/owner> ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/owner> <http://dbpedia.org/resource/Rolls-Royce_Holdings> .}" ]
  }, {
    "id" : "76",
    "status" : "WORK",
    "sentence" : "How many museums does Paris have?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Museum> ; <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Paris> }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Museum>. <http://dbpedia.org/resource/Théâtre_de_Paris> <http://dbpedia.org/ontology/seatingCapacity> ?Answer .}" ]
  }, {
    "id" : "77",
    "status" : "N",
    "sentence" : "Where was JFK assassinated?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_F._Kennedy> <http://dbpedia.org/ontology/deathPlace> ?uri }",
    "sparqls" : [ ]
  }, {
    "id" : "78",
    "status" : "WORK",
    "sentence" : "Give me all federal chancellors of Germany.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Person> { ?uri <http://dbpedia.org/ontology/office> \"Chancellor of Germany\" } UNION { ?uri <http://dbpedia.org/property/office> <http://dbpedia.org/resource/Chancellor_of_Germany> } }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/property/office> <http://dbpedia.org/resource/Germany> .}" ]
  }, {
    "id" : "79",
    "status" : "N",
    "sentence" : "Show me everyone who was born on Halloween.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Person> { ?uri <http://dbpedia.org/ontology/birthDate> ?date } UNION { ?uri <http://dbpedia.org/property/birthDate> ?date } <http://dbpedia.org/resource/Halloween> <http://dbpedia.org/property/date> ?date }",
    "sparqls" : [ ]
  }, {
    "id" : "80",
    "status" : "WORK",
    "sentence" : "Which beer originated in Ireland?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/type> <http://dbpedia.org/resource/Beer> ; <http://dbpedia.org/ontology/origin> <http://dbpedia.org/resource/Beer_in_Ireland> }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/origin> <http://dbpedia.org/resource/Ireland> .}", "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/sourceCountry> <http://dbpedia.org/resource/Ireland> .}", "SELECT ?Answer WHERE { ?Arg <http://dbpedia.org/ontology/origin> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Ireland_Brook_(New_Jersey)> <http://dbpedia.org/ontology/sourceCountry> ?Answer .}" ]
  }, {
    "id" : "81",
    "status" : "N",
    "sentence" : "To which countries does the Himalayan mountain system extend?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Himalayas> <http://dbpedia.org/ontology/country> ?uri }",
    "sparqls" : [ ]
  }, {
    "id" : "82",
    "status" : "WORK",
    "sentence" : "Which actors were born in Germany?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Actor> { ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Germany> } UNION { ?uri <http://dbpedia.org/ontology/birthPlace> ?place . ?place <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Germany> } }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Actor>. ?Answer <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Germany> .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Actor>. <http://dbpedia.org/resource/Willie_Germany> <http://dbpedia.org/ontology/birthDate> ?Answer .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Actor>. ?Arg <http://dbpedia.org/ontology/birthYear> ?Answer .}" ]
  }, {
    "id" : "83",
    "status" : "N",
    "sentence" : "How much carbs does peanut butter have?",
    "givenSparql" : "SELECT DISTINCT ?carbs WHERE { <http://dbpedia.org/resource/Peanut_butter> <http://dbpedia.org/property/carbs> ?carbs }",
    "sparqls" : [ ]
  }, {
    "id" : "84",
    "status" : "WORK",
    "sentence" : "Who produced the most films?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?film <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film> . ?film <http://dbpedia.org/ontology/producer> ?uri . } ORDER BY DESC(COUNT(?film)) OFFSET 0 LIMIT 1",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Arg <http://dbpedia.org/ontology/executiveProducer> ?Answer .}", "SELECT ?Answer WHERE { ?Arg <http://dbpedia.org/ontology/manufacturer> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Music_for_Films> <http://dbpedia.org/ontology/producer> ?Answer .}" ]
  }, {
    "id" : "85",
    "status" : "N",
    "sentence" : "How many employees does Google have?",
    "givenSparql" : "SELECT DISTINCT ?num WHERE { <http://dbpedia.org/resource/Google> <http://dbpedia.org/ontology/numberOfEmployees> ?num }",
    "sparqls" : [ ]
  }, {
    "id" : "86",
    "status" : "N",
    "sentence" : "Give me all actors who were born in Berlin.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Actor> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Berlin> }",
    "sparqls" : [ ]
  }, {
    "id" : "87",
    "status" : "WORK",
    "sentence" : "Who created Goofy?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Goofy> <http://dbpedia.org/ontology/creator> ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Arg <http://dbpedia.org/ontology/author> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Goofy> <http://dbpedia.org/ontology/creator> ?Answer .}", "SELECT ?Answer WHERE { ?Arg <http://dbpedia.org/ontology/notableWork> ?Answer .}" ]
  }, {
    "id" : "88",
    "status" : "N",
    "sentence" : "Which music albums contain the song Last Christmas?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?single <http://dbpedia.org/ontology/album> ?uri ; <http://www.w3.org/2000/01/rdf-schema#label> \"Last Christmas\"@en }",
    "sparqls" : [ ]
  }, {
    "id" : "89",
    "status" : "N",
    "sentence" : "When was Alberta admitted as province?",
    "givenSparql" : "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Alberta> <http://dbpedia.org/property/admittancedate> ?date }",
    "sparqls" : [ ]
  }, {
    "id" : "90",
    "status" : "WORK",
    "sentence" : "How many missions does the Soyuz programme have?",
    "givenSparql" : "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/property/programme> <http://dbpedia.org/resource/Soyuz_programme> }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/The_Whitebrook> <http://dbpedia.org/ontology/seatingCapacity> ?Answer .}" ]
  }, {
    "id" : "91",
    "status" : "WORK",
    "sentence" : "Give me all the TV shows with Neil Patrick Harris.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/TelevisionShow> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Neil_Patrick_Harris> }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/The_Wiggles> .}" ]
  }, {
    "id" : "92",
    "status" : "WORK",
    "sentence" : "When were the Hells Angels founded?",
    "givenSparql" : "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Hells_Angels> <http://dbpedia.org/property/founded> ?date }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/formationDate> ?Arg .}", "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/foundingDate> ?Arg .}" ]
  }, {
    "id" : "93",
    "status" : "N",
    "sentence" : "What is the net income of Apple?",
    "givenSparql" : "SELECT DISTINCT ?ni WHERE { <http://dbpedia.org/resource/Apple_Inc.> <http://dbpedia.org/ontology/netIncome> ?ni }",
    "sparqls" : [ ]
  }, {
    "id" : "94",
    "status" : "N",
    "sentence" : "Give me all Swedish holidays.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Holiday> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Sweden> }",
    "sparqls" : [ ]
  }, {
    "id" : "95",
    "status" : "N",
    "sentence" : "In which city was the former Dutch queen Juliana buried?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Juliana_of_the_Netherlands> <http://dbpedia.org/property/burialPlace> ?uri . ?uri a <http://dbpedia.org/ontology/Settlement> }",
    "sparqls" : [ ]
  }, {
    "id" : "96",
    "status" : "WORK",
    "sentence" : "List all the musicals with music by Leonard Bernstein.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Musical> ; <http://dbpedia.org/ontology/musicBy> <http://dbpedia.org/resource/Leonard_Bernstein> }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/musicBy> <http://dbpedia.org/resource/Leonard_Bernstein> .}" ]
  }, {
    "id" : "97",
    "status" : "N",
    "sentence" : "Give me all companies in the advertising industry.",
    "givenSparql" : "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Company> { ?uri <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Advertising> } UNION { ?uri <http://dbpedia.org/ontology/industry> ?industry FILTER regex(?industry, \"advertising\", \"i\") } }",
    "sparqls" : [ ]
  }, {
    "id" : "98",
    "status" : "N",
    "sentence" : "What is the largest metropolitan area in Washington state?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Washington_(state)> <http://dbpedia.org/property/largestmetro> ?uri }",
    "sparqls" : [ ]
  }, {
    "id" : "99",
    "status" : "WORK",
    "sentence" : "Who killed John Lennon?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Person> ; <http://dbpedia.org/property/conviction> <http://dbpedia.org/resource/Death_of_John_Lennon> }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/property/conviction> <http://dbpedia.org/resource/Death_of_John_Lennon> .}" ]
  }, {
    "id" : "100",
    "status" : "WORK",
    "sentence" : "Which writers studied in Istanbul?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Writer> { ?uri <http://dbpedia.org/ontology/almaMater> ?x } UNION { ?uri <http://dbpedia.org/ontology/education> ?x } { ?x <http://dbpedia.org/ontology/city> <http://dbpedia.org/resource/Istanbul> } UNION { ?x <http://dbpedia.org/property/city> <http://dbpedia.org/resource/Istanbul> } }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Writer>. ?Answer <http://dbpedia.org/ontology/education> <http://dbpedia.org/resource/Istanbul> .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Writer>. ?Arg <http://dbpedia.org/ontology/education> ?Answer .}" ]
  }, {
    "id" : "101",
    "status" : "N",
    "sentence" : "Give me all Australian metalcore bands.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Band> ; <http://dbpedia.org/ontology/genre> <http://dbpedia.org/resource/Metalcore> { ?uri <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/Australia> } UNION { ?uri <http://dbpedia.org/ontology/hometown> ?h . ?h <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Australia> } }",
    "sparqls" : [ ]
  }, {
    "id" : "102",
    "status" : "WORK",
    "sentence" : "Which countries adopted the Euro?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Country> { ?uri <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/Euro> } UNION { ?uri <http://dbpedia.org/property/currencyCode> \"EUR\"@en } }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/Euro> .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/The_Gambia> <http://dbpedia.org/ontology/currency> ?Answer .}" ]
  }, {
    "id" : "103",
    "status" : "N",
    "sentence" : "Give me all types of eating disorders.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/class/yago/WikicatEatingDisorders> }",
    "sparqls" : [ ]
  }, {
    "id" : "104",
    "status" : "N",
    "sentence" : "Was Marc Chagall a jew?",
    "givenSparql" : "ASK WHERE { <http://dbpedia.org/resource/Marc_Chagall> <http://dbpedia.org/property/ethnicity> \"Jewish\"@en }",
    "sparqls" : [ ]
  }, {
    "id" : "105",
    "status" : "N",
    "sentence" : "What was Brazil's lowest rank in the FIFA World Ranking?",
    "givenSparql" : "SELECT DISTINCT ?n WHERE { <http://dbpedia.org/resource/Brazil_national_football_team> <http://dbpedia.org/property/fifaMin> ?n }",
    "sparqls" : [ ]
  }, {
    "id" : "106",
    "status" : "N",
    "sentence" : "How many films did Leonardo DiCaprio star in?",
    "givenSparql" : "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Leonardo_DiCaprio> }",
    "sparqls" : [ ]
  }, {
    "id" : "107",
    "status" : "N",
    "sentence" : "Was Margaret Thatcher a chemist?",
    "givenSparql" : "ASK WHERE { <http://dbpedia.org/resource/Margaret_Thatcher> <http://dbpedia.org/ontology/profession> <http://dbpedia.org/resource/Chemist> }",
    "sparqls" : [ ]
  }, {
    "id" : "108",
    "status" : "N",
    "sentence" : "Which U.S. states are in the same time zone as Utah?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Utah> <http://dbpedia.org/property/timezone> ?x . ?uri a <http://dbpedia.org/class/yago/WikicatStatesOfTheUnitedStates> ; <http://dbpedia.org/property/timezone> ?x FILTER ( ?uri != <http://dbpedia.org/resource/Utah> ) }",
    "sparqls" : [ ]
  }, {
    "id" : "109",
    "status" : "N",
    "sentence" : "Give me all books written by Danielle Steel.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Book> ; <http://dbpedia.org/ontology/author> <http://dbpedia.org/resource/Danielle_Steel> }",
    "sparqls" : [ ]
  }, {
    "id" : "110",
    "status" : "N",
    "sentence" : "Which country has the most official languages?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country> . ?uri <http://dbpedia.org/property/officialLanguages> ?language . } ORDER BY DESC(COUNT(?language)) OFFSET 0 LIMIT 1",
    "sparqls" : [ ]
  }, {
    "id" : "111",
    "status" : "N",
    "sentence" : "What is the total amount of men and women serving in the FDNY?",
    "givenSparql" : "SELECT DISTINCT ?num WHERE { <http://dbpedia.org/resource/New_York_City_Fire_Department> <http://dbpedia.org/property/employees> ?num }",
    "sparqls" : [ ]
  }, {
    "id" : "112",
    "status" : "WORK",
    "sentence" : "Which actor played Chewbacca?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chewbacca> <http://dbpedia.org/ontology/portrayer> ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Actor>. ?Answer <http://dbpedia.org/ontology/genre> ?Arg .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Actor>. ?Answer <http://dbpedia.org/ontology/instrument> ?Arg .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Actor>. ?Answer <http://dbpedia.org/ontology/portrayer> ?Arg .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Actor>. <http://dbpedia.org/resource/Chewbacca> <http://dbpedia.org/ontology/portrayer> ?Answer .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Actor>. ?Arg <http://dbpedia.org/ontology/starring> ?Answer .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Actor>. ?Arg <http://dbpedia.org/property/portrayer> ?Answer .}" ]
  }, {
    "id" : "113",
    "status" : "N",
    "sentence" : "Give me all libraries established earlier than 1400.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Library> ; <http://dbpedia.org/property/established> ?year FILTER ( ?year < 1400 ) }",
    "sparqls" : [ ]
  }, {
    "id" : "114",
    "status" : "WORK",
    "sentence" : "Which programming languages were influenced by Perl?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/ProgrammingLanguage> { ?uri <http://dbpedia.org/ontology/influencedBy> <http://dbpedia.org/resource/Perl> } UNION { <http://dbpedia.org/resource/Perl> <http://dbpedia.org/ontology/influenced> ?uri } }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/ProgrammingLanguage>. ?Answer <http://dbpedia.org/ontology/influencedBy> <http://dbpedia.org/resource/Perl> .}" ]
  }, {
    "id" : "115",
    "status" : "N",
    "sentence" : "In which U.S. state is Mount McKinley located?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mount_McKinley> dbo:wikiPageRedirects ?x . ?x <http://dbpedia.org/ontology/locatedInArea> ?uri. ?uri rdf:type yago:WikicatStatesOfTheUnitedStates }",
    "sparqls" : [ ]
  }, {
    "id" : "116",
    "status" : "N",
    "sentence" : "What airlines are part of the SkyTeam alliance?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Airline> { ?uri <http://dbpedia.org/ontology/alliance> <http://dbpedia.org/resource/SkyTeam> } UNION { ?uri <http://dbpedia.org/ontology/Alliance> <http://dbpedia.org/resource/SkyTeam> } }",
    "sparqls" : [ ]
  }, {
    "id" : "117",
    "status" : "N",
    "sentence" : "Which ships were called after Benjamin Franklin?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/shipNamesake> <http://dbpedia.org/resource/Benjamin_Franklin> }",
    "sparqls" : [ ]
  }, {
    "id" : "118",
    "status" : "N",
    "sentence" : "Give me all Methodist politicians.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Politician> ; <http://dbpedia.org/ontology/religion> <http://dbpedia.org/resource/Methodism> }",
    "sparqls" : [ ]
  }, {
    "id" : "119",
    "status" : "WORK",
    "sentence" : "What other books have been written by the author of The Fault in Our Stars?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?books WHERE { ?books dbo:author <http://dbpedia.org/resource/John_Green_(author)> }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/author> <http://dbpedia.org/resource/The_Vestibules> .}" ]
  }, {
    "id" : "120",
    "status" : "N",
    "sentence" : "What is the highest mountain?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Mountain> ; <http://dbpedia.org/ontology/elevation> ?elevation } ORDER BY DESC(?elevation) OFFSET 0 LIMIT 1",
    "sparqls" : [ ]
  }, {
    "id" : "121",
    "status" : "WORK",
    "sentence" : "Which poet wrote the most books?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Poet> . ?x <http://dbpedia.org/ontology/author> ?uri . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book> . } ORDER BY DESC(COUNT(?x)) OFFSET 0 LIMIT 1",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Poet>. <http://dbpedia.org/resource/The_Bachman_Books> <http://dbpedia.org/ontology/author> ?Answer .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Poet>. <http://dbpedia.org/resource/The_Most_Unwanted_Song> <http://dbpedia.org/ontology/composer> ?Answer .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Poet>. <http://dbpedia.org/resource/The_Most_Sadistic> <http://dbpedia.org/ontology/writer> ?Answer .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Poet>. <http://dbpedia.org/resource/The_Bleeding> <http://dbpedia.org/property/allLyrics> ?Answer .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Poet>. <http://dbpedia.org/resource/The_Collected_Books_of_Jack_Spicer> <http://dbpedia.org/property/editor> ?Answer .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Poet>. <http://dbpedia.org/resource/Doing_the_Most> <http://dbpedia.org/property/writer> ?Answer .}" ]
  }, {
    "id" : "122",
    "status" : "WORK",
    "sentence" : "Which programming languages influenced Javascript?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/ProgrammingLanguage> ; <http://dbpedia.org/ontology/influenced> <http://dbpedia.org/resource/JavaScript> }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/ProgrammingLanguage>. <http://dbpedia.org/resource/JavaScript> <http://dbpedia.org/ontology/influencedBy> ?Answer .}" ]
  }, {
    "id" : "123",
    "status" : "WORK",
    "sentence" : "Which musician wrote the most books?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Musician> . ?x <http://dbpedia.org/ontology/author> ?uri . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book> . } ORDER BY DESC(COUNT(?x)) OFFSET 0 LIMIT 1",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/The_Bachman_Books> <http://dbpedia.org/ontology/author> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/The_Most_Unwanted_Song> <http://dbpedia.org/ontology/composer> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/The_Most_Sadistic> <http://dbpedia.org/ontology/writer> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/The_Bleeding> <http://dbpedia.org/property/allLyrics> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/The_Collected_Books_of_Jack_Spicer> <http://dbpedia.org/property/editor> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Doing_the_Most> <http://dbpedia.org/property/writer> ?Answer .}" ]
  }, {
    "id" : "124",
    "status" : "WORK",
    "sentence" : "Which films starring Clint Eastwood did he direct himself?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Clint_Eastwood> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Clint_Eastwood> }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Bill_Cosby:_Himself> <http://dbpedia.org/ontology/director> ?Answer .}" ]
  }, {
    "id" : "125",
    "status" : "WORK",
    "sentence" : "Which software has been developed by organizations founded in California?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Software> . ?company a <http://dbpedia.org/ontology/Company> . ?uri <http://dbpedia.org/ontology/developer> ?company . ?company <http://dbpedia.org/ontology/foundationPlace> <http://dbpedia.org/resource/California> }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/formationYear> ?Arg .}", "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/founded> ?Arg .}", "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/govermentType> ?Arg .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/California_Trout> <http://dbpedia.org/ontology/formationYear> ?Answer .}", "SELECT ?Answer WHERE { ?Arg <http://dbpedia.org/ontology/founded> ?Answer .}", "SELECT ?Answer WHERE { ?Arg <http://dbpedia.org/ontology/govermentType> ?Answer .}" ]
  }, {
    "id" : "126",
    "status" : "WORK",
    "sentence" : "Which instruments does Cat Stevens play?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cat_Stevens> <http://dbpedia.org/ontology/instrument> ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/genre> ?Arg .}", "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Rusty_Stevens> .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Zach_Stevens> <http://dbpedia.org/ontology/portrayer> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Miss_Stevens> <http://dbpedia.org/ontology/starring> ?Answer .}" ]
  }, {
    "id" : "127",
    "status" : "N",
    "sentence" : "How many airlines are members of the Star Alliance?",
    "givenSparql" : "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Airline> ; <http://dbpedia.org/ontology/alliance> <http://dbpedia.org/resource/Star_Alliance> }",
    "sparqls" : [ ]
  }, {
    "id" : "128",
    "status" : "N",
    "sentence" : "Give me all actors called Baldwin.",
    "givenSparql" : "PREFIX foaf:<http://xmlns.com/foaf/0.1/> SELECT DISTINCT ?uri WHERE { ?uri foaf:surname 'Baldwin'@en . { ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Actor> . } UNION { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Actor> . } }",
    "sparqls" : [ ]
  }, {
    "id" : "129",
    "status" : "WORK",
    "sentence" : "Who wrote The Hunger Games?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Hunger_Games> <http://dbpedia.org/property/author> ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Yahoo!_Games> <http://dbpedia.org/ontology/author> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Deadly_Games> <http://dbpedia.org/ontology/composer> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Women's_Games> <http://dbpedia.org/ontology/writer> ?Answer .}", "SELECT ?Answer WHERE { ?Arg <http://dbpedia.org/property/allLyrics> ?Answer .}", "SELECT ?Answer WHERE { ?Arg <http://dbpedia.org/property/editor> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Wicked_Games> <http://dbpedia.org/property/writer> ?Answer .}" ]
  }, {
    "id" : "130",
    "status" : "N",
    "sentence" : "For which label did Elvis record his first album?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?x rdf:type dbo:Album ; dbo:artist res:Elvis_Presley ; dbo:releaseDate ?y ; dbo:recordLabel ?uri } ORDER BY ASC(?y) OFFSET 0 LIMIT 1",
    "sparqls" : [ ]
  }, {
    "id" : "131",
    "status" : "N",
    "sentence" : "Is Christian Bale starring in Batman Begins?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Batman_Begins dbo:starring res:Christian_Bale }",
    "sparqls" : [ ]
  }, {
    "id" : "132",
    "status" : "WORK",
    "sentence" : "Where is the residence of the prime minister of Spain?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Prime_Minister_of_Spain> <http://dbpedia.org/property/residence> ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/residence> <http://dbpedia.org/resource/Port_of_Spain> .}", "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/property/residence> <http://dbpedia.org/resource/White_House_of_the_Confederacy> .}" ]
  }, {
    "id" : "133",
    "status" : "N",
    "sentence" : "Which actor was casted in the most movies?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Actor> . ?f <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film> . ?f <http://dbpedia.org/ontology/starring> ?uri . } ORDER BY DESC(COUNT(DISTINCT(?f))) OFFSET 0 LIMIT 1",
    "sparqls" : [ ]
  }, {
    "id" : "134",
    "status" : "N",
    "sentence" : "Which countries have more than two official languages?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Country> ; <http://dbpedia.org/ontology/officialLanguage> ?language } GROUP BY ?uri HAVING ( COUNT(?language) > 2 )",
    "sparqls" : [ ]
  }, {
    "id" : "135",
    "status" : "N",
    "sentence" : "Which countries have more than ten caves?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Country> . ?cave a <http://dbpedia.org/ontology/Cave> { ?cave <http://dbpedia.org/ontology/location> ?uri } UNION { ?cave <http://dbpedia.org/ontology/location> ?loc . ?loc <http://dbpedia.org/ontology/country> ?uri } } GROUP BY ?uri HAVING ( COUNT(?cave) > 10 )",
    "sparqls" : [ ]
  }, {
    "id" : "136",
    "status" : "N",
    "sentence" : "Show me all songs from Bruce Springsteen released between 1980 and 1990.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Song> . ?uri <http://dbpedia.org/ontology/artist> <http://dbpedia.org/resource/Bruce_Springsteen> . ?uri <http://dbpedia.org/ontology/releaseDate> ?date . FILTER (?date >= '1980-01-01'^^xsd:date && ?date <= '1990-12-31'^^xsd:date) }",
    "sparqls" : [ ]
  }, {
    "id" : "137",
    "status" : "WORK",
    "sentence" : "Which television shows were created by John Cleese?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/TelevisionShow> ; <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/John_Cleese> }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/TelevisionShow>. ?Answer <http://dbpedia.org/ontology/author> <http://dbpedia.org/resource/John_Cleese> .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/TelevisionShow>. ?Answer <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/John_Cleese> .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/TelevisionShow>. ?Answer <http://dbpedia.org/ontology/notableWork> <http://dbpedia.org/resource/Odd_John> .}" ]
  }, {
    "id" : "138",
    "status" : "N",
    "sentence" : "When did Latvia join the EU?",
    "givenSparql" : "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Latvia> <http://dbpedia.org/property/accessioneudate> ?date }",
    "sparqls" : [ ]
  }, {
    "id" : "139",
    "status" : "WORK",
    "sentence" : "Which soccer players were born on Malta?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerPlayer> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Malta> }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/SoccerPlayer>. <http://dbpedia.org/resource/Wenceslau_Malta> <http://dbpedia.org/ontology/birthDate> ?Answer .}" ]
  }, {
    "id" : "140",
    "status" : "N",
    "sentence" : "How many politicians graduated from Columbia University?",
    "givenSparql" : "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/profession> <http://dbpedia.org/resource/Politician> ; <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Columbia_University> }",
    "sparqls" : [ ]
  }, {
    "id" : "141",
    "status" : "N",
    "sentence" : "Give me the birthdays of all actors of the television show Charmed.",
    "givenSparql" : "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Charmed> <http://dbpedia.org/ontology/starring> ?actor . ?actor <http://dbpedia.org/ontology/birthDate> ?date }",
    "sparqls" : [ ]
  }, {
    "id" : "142",
    "status" : "WORK",
    "sentence" : "Which telecommunications organizations are located in Belgium?",
    "givenSparql" : "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Organisation> { ?uri <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Telecommunication> } UNION { ?uri <http://dbpedia.org/property/industry> ?industry FILTER regex(?industry, \"Telecommunications\") } { ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Belgium> } UNION { ?uri <http://dbpedia.org/property/locationCountry> \"Belgium\"@en } }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/city> <http://dbpedia.org/resource/Belgium> .}", "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Belgium> .}", "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/property/location> <http://dbpedia.org/resource/Belgium> .}", "SELECT ?Answer WHERE { ?Arg <http://dbpedia.org/ontology/city> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Miss_Belgium> <http://dbpedia.org/ontology/location> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Walibi_Belgium> <http://dbpedia.org/property/location> ?Answer .}" ]
  }, {
    "id" : "143",
    "status" : "N",
    "sentence" : "Give me a list of all lakes in Denmark.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { { ?uri a <http://dbpedia.org/ontology/Lake> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Denmark> } UNION { ?uri a <http://dbpedia.org/class/yago/LakesOfDenmark> } }",
    "sparqls" : [ ]
  }, {
    "id" : "144",
    "status" : "WORK",
    "sentence" : "How many children does Eddie Murphy have?",
    "givenSparql" : "SELECT DISTINCT ?n WHERE { <http://dbpedia.org/resource/Eddie_Murphy> <http://dbpedia.org/property/children> ?n }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Murphy_Theatre> <http://dbpedia.org/ontology/seatingCapacity> ?Answer .}" ]
  }, {
    "id" : "145",
    "status" : "N",
    "sentence" : "Show me all English Gothic buildings in Kent.",
    "givenSparql" : "SELECT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Building> ; <http://dbpedia.org/ontology/architecturalStyle> <http://dbpedia.org/resource/English_Gothic_architecture> ; <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Kent> }",
    "sparqls" : [ ]
  }, {
    "id" : "146",
    "status" : "WORK",
    "sentence" : "Who is the manager of Real Madrid?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Real_Madrid_C.F.> <http://dbpedia.org/ontology/manager> ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/manager> <http://dbpedia.org/resource/Rodolfo_Madrid> .}" ]
  }, {
    "id" : "147",
    "status" : "WORK",
    "sentence" : "In which countries can you pay using the West African CFA franc?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/West_African_CFA_franc> }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/West_African_CFA_franc> .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Jordanian_occupation_of_the_West_Bank> <http://dbpedia.org/ontology/currency> ?Answer .}" ]
  }, {
    "id" : "148",
    "status" : "N",
    "sentence" : "Which holidays are celebrated around the world?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Holiday }",
    "sparqls" : [ ]
  }, {
    "id" : "149",
    "status" : "N",
    "sentence" : "What is the longest river?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/River> { ?uri <http://dbpedia.org/ontology/length> ?l } UNION { ?uri <http://dbpedia.org/property/length> ?l } } ORDER BY DESC(?l) OFFSET 0 LIMIT 1",
    "sparqls" : [ ]
  }, {
    "id" : "150",
    "status" : "WORK",
    "sentence" : "Which organizations were founded in 1930?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Organisation> { ?uri <http://dbpedia.org/ontology/formationYear> ?date } UNION { ?uri <http://dbpedia.org/ontology/foundingYear> ?date } FILTER regex(?date, \"^1930\") }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/foundationPlace> \"1930\"^^<http://www.w3.org/2001/XMLSchema#gYear> .}", "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/govermentType> \"1930\"^^<http://www.w3.org/2001/XMLSchema#gYear> .}", "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/property/founded> \"1930\"^^<http://www.w3.org/2001/XMLSchema#gYear> .}", "SELECT ?Answer WHERE { \"1930\"^^<http://www.w3.org/2001/XMLSchema#gYear> <http://dbpedia.org/ontology/formationYear> ?Answer .}", "SELECT ?Answer WHERE { \"1930\"^^<http://www.w3.org/2001/XMLSchema#gYear> <http://dbpedia.org/ontology/founded> ?Answer .}", "SELECT ?Answer WHERE { \"1930\"^^<http://www.w3.org/2001/XMLSchema#gYear> <http://dbpedia.org/ontology/foundingYear> ?Answer .}" ]
  }, {
    "id" : "151",
    "status" : "N",
    "sentence" : "What is the birth name of Angela Merkel?",
    "givenSparql" : "SELECT DISTINCT ?string WHERE { <http://dbpedia.org/resource/Angela_Merkel> <http://dbpedia.org/property/birthName> ?string }",
    "sparqls" : [ ]
  }, {
    "id" : "152",
    "status" : "N",
    "sentence" : "Who has Tom Cruise been married to?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Tom_Cruise> }",
    "sparqls" : [ ]
  }, {
    "id" : "153",
    "status" : "N",
    "sentence" : "Which weapons did Heckler & Koch develop?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Weapon> ; <http://dbpedia.org/property/designer> <http://dbpedia.org/resource/Heckler_&_Koch> }",
    "sparqls" : [ ]
  }, {
    "id" : "154",
    "status" : "N",
    "sentence" : "What is the smallest city by area in Germany?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX skos: <http://www.w3.org/2004/02/skos/core#> PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX dct: <http://purl.org/dc/terms/> SELECT ?city WHERE { ?m skos:broader dbc:Cities_in_Germany . ?city dct:subject ?m ; dbo:areaTotal ?area } ORDER BY ?area LIMIT 1",
    "sparqls" : [ ]
  }, {
    "id" : "155",
    "status" : "N",
    "sentence" : "What is the ruling party in Lisbon?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lisbon> <http://dbpedia.org/property/leaderParty> ?uri }",
    "sparqls" : [ ]
  }, {
    "id" : "156",
    "status" : "N",
    "sentence" : "How heavy is Jupiter's lightest moon?",
    "givenSparql" : "SELECT DISTINCT ?n WHERE { ?uri <http://dbpedia.org/property/satelliteOf> <http://dbpedia.org/resource/Jupiter> ; <http://dbpedia.org/ontology/mass> ?n } ORDER BY ASC(?n) OFFSET 0 LIMIT 1",
    "sparqls" : [ ]
  }, {
    "id" : "157",
    "status" : "N",
    "sentence" : "How many employees does IBM have?",
    "givenSparql" : "SELECT DISTINCT ?number WHERE { <http://dbpedia.org/resource/IBM> <http://dbpedia.org/ontology/numberOfEmployees> ?number }",
    "sparqls" : [ ]
  }, {
    "id" : "158",
    "status" : "N",
    "sentence" : "List all episodes of the first season of the HBO television series The Sopranos!",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:series res:The_Sopranos ; dbo:seasonNumber 1 }",
    "sparqls" : [ ]
  }, {
    "id" : "159",
    "status" : "N",
    "sentence" : "What does ICRO stand for?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/abbreviation> \"ICRO\" }",
    "sparqls" : [ ]
  }, {
    "id" : "160",
    "status" : "N",
    "sentence" : "Does the new Battlestar Galactica series have more episodes than the old one?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { <http://dbpedia.org/resource/Battlestar_Galactica_%281978_TV_series%29> dbo:numberOfEpisodes ?x . <http://dbpedia.org/resource/Battlestar_Galactica_%282004_TV_series%29> dbo:numberOfEpisodes ?y FILTER ( ?y > ?x ) }",
    "sparqls" : [ ]
  }, {
    "id" : "161",
    "status" : "WORK",
    "sentence" : "Give me all films produced by Hal Roach.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Film>. ?Answer <http://dbpedia.org/ontology/executiveProducer> <http://dbpedia.org/resource/Hal_Roach> .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Film>. ?Answer <http://dbpedia.org/ontology/manufacturer> ?Arg .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Film>. ?Answer <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Film>. <http://dbpedia.org/resource/Shallow_Hal> <http://dbpedia.org/ontology/director> ?Answer .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Film>. <http://dbpedia.org/resource/HAL_Laboratory> <http://dbpedia.org/ontology/product> ?Answer .}" ]
  }, {
    "id" : "162",
    "status" : "WORK",
    "sentence" : "Who played Agent Smith in Matrix?",
    "givenSparql" : "PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { res:Agent_Smith <http://dbpedia.org/ontology/portrayer> ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Paul_Reed_Smith> .}", "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Will_Smith> .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Agent_Smith> <http://dbpedia.org/ontology/portrayer> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Whispering_Smith> <http://dbpedia.org/ontology/starring> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Sky_Smith> <http://dbpedia.org/property/portrayer> ?Answer .}" ]
  }, {
    "id" : "163",
    "status" : "N",
    "sentence" : "Which Greek parties are pro-European?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/PoliticalParty> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Greece> ; <http://dbpedia.org/ontology/ideology> <http://dbpedia.org/resource/Pro-Europeanism> }",
    "sparqls" : [ ]
  }, {
    "id" : "164",
    "status" : "N",
    "sentence" : "Give me a list of all bandleaders that play trumpet.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Bandleader> ; <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Trumpet> }",
    "sparqls" : [ ]
  }, {
    "id" : "165",
    "status" : "N",
    "sentence" : "What is the second highest mountain on Earth?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Mountain> ; <http://dbpedia.org/ontology/elevation> ?elevation } ORDER BY DESC(?elevation) OFFSET 1 LIMIT 1",
    "sparqls" : [ ]
  }, {
    "id" : "166",
    "status" : "N",
    "sentence" : "Is Egypts largest city also its capital?",
    "givenSparql" : "ASK WHERE { <http://dbpedia.org/resource/Egypt> <http://dbpedia.org/ontology/largestCity> ?large ; <http://dbpedia.org/ontology/capital> ?capital FILTER ( ?large = ?capital ) }",
    "sparqls" : [ ]
  }, {
    "id" : "167",
    "status" : "WORK",
    "sentence" : "Which rockets were launched from Baikonur?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Rocket> ; <http://dbpedia.org/ontology/launchSite> <http://dbpedia.org/resource/Baikonur_Cosmodrome> }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Rocket>. ?Answer <http://dbpedia.org/property/launchPad> <http://dbpedia.org/resource/Baikonur_Cosmodrome> .}" ]
  }, {
    "id" : "168",
    "status" : "N",
    "sentence" : "How many programming languages are there?",
    "givenSparql" : "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/ProgrammingLanguage> }",
    "sparqls" : [ ]
  }, {
    "id" : "169",
    "status" : "N",
    "sentence" : "Which Chess players died in the same place they were born in?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/ChessPlayer> ; <http://dbpedia.org/ontology/birthPlace> ?x ; <http://dbpedia.org/ontology/deathPlace> ?y FILTER ( ?x = ?y ) }",
    "sparqls" : [ ]
  }, {
    "id" : "170",
    "status" : "WORK",
    "sentence" : "Who is the owner of Facebook?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Facebook> <http://dbpedia.org/ontology/foundedBy> ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/owner> <http://dbpedia.org/resource/Facebook> .}" ]
  }, {
    "id" : "171",
    "status" : "WORK",
    "sentence" : "Give me all movies with Tom Cruise.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Tom_Cruise> }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Tom_Cruise> .}" ]
  }, {
    "id" : "172",
    "status" : "N",
    "sentence" : "In which U.S. state is Fort Knox located?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { res:Fort_Knox dbo:location ?uri . ?uri dbo:country res:United_States }",
    "sparqls" : [ ]
  }, {
    "id" : "173",
    "status" : "WORK",
    "sentence" : "Give me all cities in New Jersey with more than 100000 inhabitants.",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:City ; dbo:isPartOf res:New_Jersey ; dbo:populationTotal ?inhabitants FILTER ( ?inhabitants > 100000 ) }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/isPartOf> <http://dbpedia.org/resource/New_Jersey> .}" ]
  }, {
    "id" : "174",
    "status" : "N",
    "sentence" : "Which mountains are higher than the Nanga Parbat?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Nanga_Parbat> <http://dbpedia.org/ontology/elevation> ?elevation . ?uri a <http://dbpedia.org/ontology/Mountain> { ?uri <http://dbpedia.org/ontology/elevation> ?otherelevation } UNION { ?uri <http://dbpedia.org/property/elevationM> ?otherelevation } FILTER ( ?otherelevation > ?elevation ) }",
    "sparqls" : [ ]
  }, {
    "id" : "175",
    "status" : "N",
    "sentence" : "Give me all B-sides of the Ramones.",
    "givenSparql" : "SELECT DISTINCT ?string WHERE { ?x <http://dbpedia.org/ontology/musicalArtist> <http://dbpedia.org/resource/Ramones> ; <http://dbpedia.org/ontology/bSide> ?string }",
    "sparqls" : [ ]
  }, {
    "id" : "176",
    "status" : "N",
    "sentence" : "What are the specialities of the UNC Health Care?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/UNC_Health_Care> <http://dbpedia.org/property/speciality> ?uri }",
    "sparqls" : [ ]
  }, {
    "id" : "177",
    "status" : "N",
    "sentence" : "When was Olof Palme shot?",
    "givenSparql" : "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Olof_Palme> <http://dbpedia.org/ontology/deathDate> ?date }",
    "sparqls" : [ ]
  }, {
    "id" : "178",
    "status" : "N",
    "sentence" : "List the seven kings of Rome.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/title> <http://dbpedia.org/resource/King_of_Rome> }",
    "sparqls" : [ ]
  }, {
    "id" : "179",
    "status" : "N",
    "sentence" : "Give me all people that were born in Vienna and died in Berlin.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Vienna> ; <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Berlin> }",
    "sparqls" : [ ]
  }, {
    "id" : "180",
    "status" : "N",
    "sentence" : "Is Darth Vader Luke’s father?",
    "givenSparql" : "ASK WHERE { <http://dbpedia.org/resource/Darth_Vader> <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Luke_Skywalker> }",
    "sparqls" : [ ]
  }, {
    "id" : "181",
    "status" : "N",
    "sentence" : "Show me all the breweries in Australia.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Brewery> { ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Australia> } UNION { ?uri <http://dbpedia.org/ontology/location> ?x . ?x <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Australia> } }",
    "sparqls" : [ ]
  }, {
    "id" : "182",
    "status" : "WORK",
    "sentence" : "Give me all films produced by Steven Spielberg with a budget of at least $80 million.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film> . ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Steven_Spielberg> . ?uri <http://dbpedia.org/ontology/budget> ?b . FILTER( xsd:double(?b) >= 8.0E7 ) }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Film>. ?Answer <http://dbpedia.org/ontology/executiveProducer> <http://dbpedia.org/resource/Steven_Spielberg> .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Film>. ?Answer <http://dbpedia.org/ontology/manufacturer> <http://dbpedia.org/resource/Wings_Of_Freedom> .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Film>. ?Answer <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Steven_Spielberg> .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Film>. <http://dbpedia.org/resource/A_Woman_with_Power_of_Attorney> <http://dbpedia.org/ontology/director> ?Answer .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Film>. <http://dbpedia.org/resource/Budget_Direct> <http://dbpedia.org/ontology/product> ?Answer .}" ]
  }, {
    "id" : "183",
    "status" : "N",
    "sentence" : "Give me all soccer clubs in Spain.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerClub> { ?uri <http://dbpedia.org/ontology/ground> <http://dbpedia.org/resource/Spain> } UNION { ?uri <http://dbpedia.org/property/ground> ?ground FILTER regex(?ground, \"Spain\") } }",
    "sparqls" : [ ]
  }, {
    "id" : "184",
    "status" : "WORK",
    "sentence" : "Who produced films starring Natalie Portman?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?film a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Natalie_Portman> ; <http://dbpedia.org/ontology/producer> ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/product> <http://dbpedia.org/resource/Films> .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/The_Tonight_Show_Starring_Jimmy_Fallon> <http://dbpedia.org/ontology/executiveProducer> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/1998_British_Formula_Three_Championship__Portman_Racing__4> <http://dbpedia.org/ontology/manufacturer> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Starring_Rosi> <http://dbpedia.org/ontology/producer> ?Answer .}" ]
  }, {
    "id" : "185",
    "status" : "N",
    "sentence" : "Give me all breeds of the German Shepherd dog.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/breed> <http://dbpedia.org/resource/German_Shepherd> }",
    "sparqls" : [ ]
  }, {
    "id" : "186",
    "status" : "N",
    "sentence" : "Who is the heaviest player of the Chicago Bulls?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Person> ; <http://dbpedia.org/ontology/weight> ?num { ?uri <http://dbpedia.org/property/team> <http://dbpedia.org/resource/Chicago_Bulls> } UNION { ?uri <http://dbpedia.org/property/draftTeam> <http://dbpedia.org/resource/Chicago_Bulls> } UNION { ?uri <http://dbpedia.org/ontology/draftTeam> <http://dbpedia.org/resource/Chicago_Bulls> } } ORDER BY DESC(?num) OFFSET 0 LIMIT 1",
    "sparqls" : [ ]
  }, {
    "id" : "187",
    "status" : "N",
    "sentence" : "Which languages are spoken in Estonia?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/spokenIn> <http://dbpedia.org/resource/Estonia> }",
    "sparqls" : [ ]
  }, {
    "id" : "188",
    "status" : "N",
    "sentence" : "What is the largest country in the world?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Country ; dbo:areaTotal ?n } ORDER BY DESC(?n) OFFSET 0 LIMIT 1",
    "sparqls" : [ ]
  }, {
    "id" : "189",
    "status" : "N",
    "sentence" : "What is the largest city in america?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?lcity WHERE { dbr:United_States dbo:largestCity ?lcity }",
    "sparqls" : [ ]
  }, {
    "id" : "190",
    "status" : "WORK",
    "sentence" : "Who was the pope that founded the Vatican Television?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri rdf:type dbo:Pope . res:Vatican_Television_Center dbo:foundedBy ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Pope>. <http://dbpedia.org/resource/Vatican_Television_Center> <http://dbpedia.org/ontology/foundedBy> ?Answer .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Pope>. <http://dbpedia.org/resource/The_Wurzels> <http://dbpedia.org/property/founder> ?Answer .}" ]
  }, {
    "id" : "191",
    "status" : "WORK",
    "sentence" : "Who discovered Ceres?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ceres_(dwarf_planet)> dbo:discoverer ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Ceres_(dwarf_planet)> <http://dbpedia.org/ontology/discoverer> ?Answer .}" ]
  }, {
    "id" : "192",
    "status" : "WORK",
    "sentence" : "Who is the king of the Netherlands?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Netherlands dbo:leader ?uri . ?uri rdf:type dbo:Royalty }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/leader> <http://dbpedia.org/resource/Willem-Alexander_of_the_Netherlands> .}", "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/property/title> <http://dbpedia.org/resource/Netherlands> .}" ]
  }, {
    "id" : "193",
    "status" : "N",
    "sentence" : "Is Cola a beverage?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ASK WHERE { res:Cola rdf:type dbo:Beverage }",
    "sparqls" : [ ]
  }, {
    "id" : "194",
    "status" : "N",
    "sentence" : "What is the alma mater of the chancellor of Germany Angela Merkel?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?Almamater WHERE { dbr:Angela_Merkel dbo:almaMater ?Almamater }",
    "sparqls" : [ ]
  }, {
    "id" : "195",
    "status" : "WORK",
    "sentence" : "Who wrote the book Les Piliers de la terre?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/La_Terre> <http://dbpedia.org/ontology/author> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Rendez-vous_en_terre_inconnue> <http://dbpedia.org/ontology/composer> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/La_Vie_Sur_Terre> <http://dbpedia.org/ontology/writer> ?Answer .}", "SELECT ?Answer WHERE { ?Arg <http://dbpedia.org/property/allLyrics> ?Answer .}", "SELECT ?Answer WHERE { ?Arg <http://dbpedia.org/property/editor> ?Answer .}", "SELECT ?Answer WHERE { ?Arg <http://dbpedia.org/property/writer> ?Answer .}" ]
  }, {
    "id" : "196",
    "status" : "WORK",
    "sentence" : "Which airports does Yeti Airlines serve?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Yeti_Airlines dbo:targetAirport ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Airport>. ?Answer <http://dbpedia.org/ontology/targetAirport> <http://dbpedia.org/resource/Scandinavian_Airlines> .}" ]
  }, {
    "id" : "197",
    "status" : "N",
    "sentence" : "Where is the birthplace of Goethe?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?Goethe WHERE { dbr:Johann_Wolfgang_von_Goethe dbo:birthPlace ?Goethe }",
    "sparqls" : [ ]
  }, {
    "id" : "198",
    "status" : "N",
    "sentence" : "Was the Cuban Missile Crisis earlier than the Bay of Pigs Invasion?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Cuban_Missile_Crisis dbo:date ?x . res:Bay_of_Pigs_Invasion dbo:date ?y FILTER ( ?x < ?y ) }",
    "sparqls" : [ ]
  }, {
    "id" : "199",
    "status" : "N",
    "sentence" : "Which ingredients do I need for carrot cake?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Carrot_cake dbo:ingredient ?uri }",
    "sparqls" : [ ]
  }, {
    "id" : "200",
    "status" : "WORK",
    "sentence" : "Who created Wikipedia?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Wikipedia dbo:author ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Wikipedia> <http://dbpedia.org/ontology/author> ?Answer .}", "SELECT ?Answer WHERE { ?Arg <http://dbpedia.org/ontology/creator> ?Answer .}", "SELECT ?Answer WHERE { ?Arg <http://dbpedia.org/ontology/notableWork> ?Answer .}" ]
  }, {
    "id" : "201",
    "status" : "N",
    "sentence" : "What is the highest mountain in Saxony Germany?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?m WHERE { ?m dbo:mountainRange dbr:Ore_Mountains ; dbo:elevation ?height } ORDER BY DESC(?height) LIMIT 1",
    "sparqls" : [ ]
  }, {
    "id" : "202",
    "status" : "N",
    "sentence" : "Who is the current federal minister of finance in Germany?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?leader WHERE { <http://dbpedia.org/resource/Federal_Ministry_of_Finance_(Germany)> dbo:leader ?leader }",
    "sparqls" : [ ]
  }, {
    "id" : "203",
    "status" : "WORK",
    "sentence" : "In which country is Mecca located?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Mecca dbo:country ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Country>. ?Answer <http://dbpedia.org/ontology/city> <http://dbpedia.org/resource/Mecca> .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Country>. ?Answer <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Hussein_bin_Ali,_Sharif_of_Mecca> .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Country>. ?Answer <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/Mecca> .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Country>. ?Answer <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Mecca> .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Country>. ?Answer <http://dbpedia.org/property/location> <http://dbpedia.org/resource/Mecca> .}" ]
  }, {
    "id" : "204",
    "status" : "WORK",
    "sentence" : "Who played Gus Fring in Breaking Bad?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Gus_Fring dbo:portrayer ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Noise_in_music> .}", "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/The_Flintstones_in_Viva_Rock_Vegas> .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Gus_Fring> <http://dbpedia.org/ontology/portrayer> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Breaking_In> <http://dbpedia.org/ontology/starring> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Gus_Smith> <http://dbpedia.org/property/portrayer> ?Answer .}" ]
  }, {
    "id" : "205",
    "status" : "WORK",
    "sentence" : "In which country does the Nile start?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Nile dbo:sourceCountry ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Country>. <http://dbpedia.org/resource/The_Jewel_of_the_Nile> <http://dbpedia.org/ontology/starring> ?Answer .}" ]
  }, {
    "id" : "206",
    "status" : "N",
    "sentence" : "In which state Penn State University is located?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?s WHERE { dbr:Pennsylvania_State_University dbo:state ?s }",
    "sparqls" : [ ]
  }, {
    "id" : "207",
    "status" : "N",
    "sentence" : "What is the biggest stadium in Spain?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Stadium ; dbo:location res:Spain ; dbo:seatingCapacity ?n } ORDER BY DESC(?n) OFFSET 0 LIMIT 1",
    "sparqls" : [ ]
  }, {
    "id" : "208",
    "status" : "N",
    "sentence" : "Who is the coach of Ankara's ice hockey team?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?x dbo:city res:Ankara ; dbo:league res:Turkish_Ice_Hockey_First_League ; dbo:coach ?uri }",
    "sparqls" : [ ]
  }, {
    "id" : "209",
    "status" : "WORK",
    "sentence" : "How large is the area of UK?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?area WHERE { dbr:United_Kingdom dbo:areaTotal ?area }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Metropolitan_Area_of_Porto> <http://dbpedia.org/ontology/areaTotal> ?Answer .}" ]
  }, {
    "id" : "210",
    "status" : "WORK",
    "sentence" : "Who created Batman?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Batman dbo:creator ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Batman_Animated> <http://dbpedia.org/ontology/author> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Batman> <http://dbpedia.org/ontology/creator> ?Answer .}", "SELECT ?Answer WHERE { ?Arg <http://dbpedia.org/ontology/notableWork> ?Answer .}" ]
  }, {
    "id" : "211",
    "status" : "N",
    "sentence" : "Was Sigmund Freud married?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Sigmund_Freud dbo:spouse ?uri }",
    "sparqls" : [ ]
  }, {
    "id" : "212",
    "status" : "N",
    "sentence" : "Who are the developers of DBpedia?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:DBpedia dbo:developer ?uri }",
    "sparqls" : [ ]
  }, {
    "id" : "213",
    "status" : "WORK",
    "sentence" : "Give me all movies directed by Francis Ford Coppola.",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:director res:Francis_Ford_Coppola }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Film>. ?Answer <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Francis_Ford_Coppola> .}" ]
  }, {
    "id" : "214",
    "status" : "N",
    "sentence" : "Are tree frogs a type of amphibian?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Hylidae dbo:class res:Amphibian }",
    "sparqls" : [ ]
  }, {
    "id" : "215",
    "status" : "WORK",
    "sentence" : "What is the location of the Houses of Parliament?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT ?uri WHERE { res:Palace_of_Westminster dbo:location ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/Viceroyalty_of_Peru> .}", "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Malaysian_Houses_of_Parliament> .}" ]
  }, {
    "id" : "216",
    "status" : "N",
    "sentence" : "how much is the elevation of Düsseldorf Airport ?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?ele WHERE { dbr:Düsseldorf_Airport dbo:elevation ?ele } LIMIT 1",
    "sparqls" : [ ]
  }, {
    "id" : "217",
    "status" : "N",
    "sentence" : "How much is the population of mexico city ?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?Mexico_City WHERE { dbr:Mexico_City dbo:populationTotal ?Mexico_City }",
    "sparqls" : [ ]
  }, {
    "id" : "218",
    "status" : "N",
    "sentence" : "when was the founding date of french fifth republic?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?ff WHERE { dbr:French_Fifth_Republic dbo:foundingDate ?ff }",
    "sparqls" : [ ]
  }, {
    "id" : "219",
    "status" : "N",
    "sentence" : "Who was the first King of England?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Royalty ; rdf:type yago:WikicatEnglishMonarchs ; dbo:activeYearsStartYear ?date } ORDER BY ASC(?date) OFFSET 0 LIMIT 1",
    "sparqls" : [ ]
  }, {
    "id" : "220",
    "status" : "WORK",
    "sentence" : "Who is the editor of Forbes?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Forbes dbo:editor ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/editor> <http://dbpedia.org/resource/Steve_Forbes> .}" ]
  }, {
    "id" : "221",
    "status" : "WORK",
    "sentence" : "Which awards did Douglas Hofstadter win?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Douglas_Hofstadter dbo:award ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Award>. ?Answer <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Douglas_Engelbart> .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Award>. <http://dbpedia.org/resource/Douglas_Hofstadter> <http://dbpedia.org/ontology/award> ?Answer .}" ]
  }, {
    "id" : "222",
    "status" : "WORK",
    "sentence" : "Who is the youngest Darts player?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:DartsPlayer ; dbo:birthDate ?date } ORDER BY DESC(?date) OFFSET 0 LIMIT 1",
    "sparqls" : [ "SELECT DISTINCT ?subjOfProp WHERE { ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/DartsPlayer> . ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?num . } ORDER BY DESC(?num) LIMIT 1", "SELECT DISTINCT ?subjOfProp WHERE { ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician> . ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?num . } ORDER BY DESC(?num) LIMIT 1", "SELECT DISTINCT ?subjOfProp WHERE { ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/DartsPlayer> . ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?num . } ORDER BY DESC(?num) LIMIT 1", "SELECT DISTINCT ?subjOfProp WHERE { ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician> . ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?num . } ORDER BY DESC(?num) LIMIT 1" ]
  }, {
    "id" : "223",
    "status" : "N",
    "sentence" : "Is horse racing a sport?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ASK WHERE { dbr:Horse_racing rdf:type dbo:Sport }",
    "sparqls" : [ ]
  }, {
    "id" : "224",
    "status" : "WORK",
    "sentence" : "Which river does the Brooklyn Bridge cross?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Brooklyn_Bridge dbo:crosses ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/River>. ?Answer <http://dbpedia.org/ontology/crosses> <http://dbpedia.org/resource/The_Swale> .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/River>. <http://dbpedia.org/resource/Brooklyn_Bridge> <http://dbpedia.org/ontology/crosses> ?Answer .}" ]
  }, {
    "id" : "225",
    "status" : "WORK",
    "sentence" : "How many people live in Poland?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Poland dbo:populationTotal ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Poland> <http://dbpedia.org/ontology/populationTotal> ?Answer .}" ]
  }, {
    "id" : "226",
    "status" : "N",
    "sentence" : "When was the last episode of the TV series Friends aired?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?date WHERE { dbr:Friends dbo:completionDate ?date }",
    "sparqls" : [ ]
  }, {
    "id" : "227",
    "status" : "WORK",
    "sentence" : "Is the wife of president Obama called Michelle?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> ASK WHERE { res:Barack_Obama dbo:spouse ?spouse . ?spouse rdfs:label ?name FILTER regex(?name, \"Michelle\") }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Michelle_Obama> .}" ]
  }, {
    "id" : "229",
    "status" : "N",
    "sentence" : "Who is 8th president of US?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?name WHERE { dbr:8th_President_of_the_United_States dbo:wikiPageRedirects ?link . ?link dbp:name ?name }",
    "sparqls" : [ ]
  }, {
    "id" : "230",
    "status" : "N",
    "sentence" : "how much is the total population of  european union?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?europop WHERE { dbr:European_Union dbo:populationTotal ?europop }",
    "sparqls" : [ ]
  }, {
    "id" : "231",
    "status" : "WORK",
    "sentence" : "Give me all launch pads operated by NASA.",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:LaunchPad ; dbo:operator res:NASA }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/LaunchPad>. ?Answer <http://dbpedia.org/ontology/operator> <http://dbpedia.org/resource/NASA> .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/LaunchPad>. ?Answer <http://dbpedia.org/property/operator> <http://dbpedia.org/resource/NASA> .}" ]
  }, {
    "id" : "232",
    "status" : "WORK",
    "sentence" : "Who developed the video game World of Warcraft?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:World_of_Warcraft dbo:developer ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/World_of_Warcraft> <http://dbpedia.org/ontology/developer> ?Answer .}" ]
  }, {
    "id" : "233",
    "status" : "N",
    "sentence" : "What is the birth name of Adele?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?bn WHERE { dbr:Adele dbo:birthName ?bn }",
    "sparqls" : [ ]
  }, {
    "id" : "234",
    "status" : "N",
    "sentence" : "What is the population of Cairo?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?pop WHERE { dbr:Cairo dbo:populationTotal ?pop }",
    "sparqls" : [ ]
  }, {
    "id" : "235",
    "status" : "N",
    "sentence" : "Is Frank Herbert still alive?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { OPTIONAL { res:Frank_Herbert dbo:deathDate ?date } FILTER ( ! bound(?date) ) }",
    "sparqls" : [ ]
  }, {
    "id" : "236",
    "status" : "N",
    "sentence" : "What is the last work of Dan Brown?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?book WHERE { { ?book dbo:author dbr:Dan_Brown . ?book dbp:releaseDate ?date } UNION { ?book dbo:author dbr:Dan_Brown . ?book dbo:publicationDate ?date} } ORDER BY DESC(xsd:date(?date)) LIMIT 1",
    "sparqls" : [ ]
  }, {
    "id" : "237",
    "status" : "N",
    "sentence" : "Where is Sungkyunkwan University?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?country WHERE { dbr:Sungkyunkwan_University dbo:city ?city ; dbo:country ?country }",
    "sparqls" : [ ]
  }, {
    "id" : "238",
    "status" : "WORK",
    "sentence" : "Who is the author of the interpretation of dreams?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?Author WHERE { dbr:The_Interpretation_of_Dreams dbo:author ?Author }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/author> <http://dbpedia.org/resource/William_of_Pagula> .}" ]
  }, {
    "id" : "239",
    "status" : "N",
    "sentence" : "When was the death  of  Shakespeare?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?x WHERE { dbr:William_Shakespeare dbo:deathDate ?x } LIMIT 1",
    "sparqls" : [ ]
  }, {
    "id" : "241",
    "status" : "WORK",
    "sentence" : "Who developed Slack?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri dbo:product <http://dbpedia.org/resource/Slack_(software)> }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/product> <http://dbpedia.org/resource/Slack_(software)> .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Slack_(software)> <http://dbpedia.org/ontology/developer> ?Answer .}" ]
  }, {
    "id" : "242",
    "status" : "WORK",
    "sentence" : "Where is the origin of Carolina reaper?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/>PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?uri WHERE { dbr:Carolina_Reaper dbo:origin ?uri}",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/origin> <http://dbpedia.org/resource/South_Carolina> .}" ]
  }, {
    "id" : "243",
    "status" : "WORK",
    "sentence" : "In which year was Rachel Stevens born?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Rachel_Stevens dbo:birthYear ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Year>. ?Answer <http://dbpedia.org/ontology/birthDate> ?Arg .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Year>. ?Answer <http://dbpedia.org/ontology/birthYear> ?Arg .}" ]
  }, {
    "id" : "244",
    "status" : "N",
    "sentence" : "How often did Jane Fonda marry?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { res:Jane_Fonda dbo:spouse ?uri }",
    "sparqls" : [ ]
  }, {
    "id" : "245",
    "status" : "WORK",
    "sentence" : "Was the wife of president Lincoln called Mary?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> ASK WHERE { res:Abraham_Lincoln dbo:spouse ?spouse . ?spouse rdfs:label ?name FILTER regex(?name, \"Mary\") }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Mary_Todd_Lincoln> .}" ]
  }, {
    "id" : "246",
    "status" : "WORK",
    "sentence" : "Which cities does the Weser flow through?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Weser dbo:city ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/city> ?Arg .}", "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/property/country> ?Arg .}" ]
  }, {
    "id" : "247",
    "status" : "N",
    "sentence" : "In which programming language is GIMP written?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:GIMP dbo:programmingLanguage ?uri }",
    "sparqls" : [ ]
  }, {
    "id" : "248",
    "status" : "N",
    "sentence" : "Which university did Angela Merkel attend?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?university WHERE { res:Angela_Merkel dbo:almaMater ?university }",
    "sparqls" : [ ]
  }, {
    "id" : "249",
    "status" : "WORK",
    "sentence" : "List all the musicals with music by Elton John.",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Musical ; dbo:musicBy res:Elton_John }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/musicBy> <http://dbpedia.org/resource/Elton_John> .}" ]
  }, {
    "id" : "250",
    "status" : "N",
    "sentence" : "How many Aldi stores are there?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?number WHERE { res:Aldi dbo:numberOfLocations ?number }",
    "sparqls" : [ ]
  }, {
    "id" : "251",
    "status" : "N",
    "sentence" : "What is the longest river in the world?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri rdf:type dbo:BodyOfWater ; dbo:length ?length } ORDER BY DESC(?length) LIMIT 1",
    "sparqls" : [ ]
  }, {
    "id" : "252",
    "status" : "WORK",
    "sentence" : "When was John Adams born?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?date WHERE { res:John_Adams dbo:birthDate ?date }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/birthDate> ?Arg .}", "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/birthYear> ?Arg .}" ]
  }, {
    "id" : "253",
    "status" : "WORK",
    "sentence" : "Which companies produce hovercrafts?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Company ; dbo:product res:Hovercraft }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/director> ?Arg .}", "SELECT ?Answer WHERE { ?Arg <http://dbpedia.org/ontology/executiveProducer> ?Answer .}", "SELECT ?Answer WHERE { ?Arg <http://dbpedia.org/ontology/manufacturer> ?Answer .}", "SELECT ?Answer WHERE { ?Arg <http://dbpedia.org/ontology/producer> ?Answer .}" ]
  }, {
    "id" : "254",
    "status" : "WORK",
    "sentence" : "Who was the wife of U.S. president Lincoln?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:spouse ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Mi_Saw_U> .}" ]
  }, {
    "id" : "255",
    "status" : "N",
    "sentence" : "Which species does an elephant belong?",
    "givenSparql" : "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT ?species WHERE { dbr:Elephant dbp:species ?species }",
    "sparqls" : [ ]
  }, {
    "id" : "256",
    "status" : "WORK",
    "sentence" : "How many people live in the capital of Australia?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Australia dbo:capital ?x . ?x dbo:populationTotal ?num }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Triangle_of_the_Sun> <http://dbpedia.org/ontology/populationTotal> ?Answer .}" ]
  }, {
    "id" : "257",
    "status" : "WORK",
    "sentence" : "In which ancient empire could you pay with cocoa beans?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:currency res:Cocoa_bean }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/Cocoa_bean> .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Croatia_in_the_union_with_Hungary> <http://dbpedia.org/ontology/currency> ?Answer .}" ]
  }, {
    "id" : "258",
    "status" : "N",
    "sentence" : "How many theories did Albert Einstein come up with?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT (COUNT(?uri) AS ?count) WHERE { dbr:Albert_Einstein dbo:knownFor ?uri }",
    "sparqls" : [ ]
  }, {
    "id" : "259",
    "status" : "N",
    "sentence" : "Who composed the soundtrack for Cameron's Titanic?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Titanic_(1997_film)> dbo:musicComposer ?uri }",
    "sparqls" : [ ]
  }, {
    "id" : "260",
    "status" : "N",
    "sentence" : "Give me the runtime of Toy Story.",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?runtime WHERE { res:Toy_Story dbo:runtime ?runtime }",
    "sparqls" : [ ]
  }, {
    "id" : "262",
    "status" : "N",
    "sentence" : "With how many countries Iran has borders?",
    "givenSparql" : "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT ?border WHERE { dbr:Geography_of_Iran dbp:borders ?border } LIMIT 8",
    "sparqls" : [ ]
  }, {
    "id" : "263",
    "status" : "WORK",
    "sentence" : "Which electronics companies were founded in Beijing?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Company ; dbo:industry res:Electronics ; dbo:foundationPlace res:Beijing }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/foundationPlace> <http://dbpedia.org/resource/Beijing> .}", "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/govermentType> ?Arg .}", "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/property/founded> ?Arg .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Beijing_E-Town> <http://dbpedia.org/ontology/formationYear> ?Answer .}", "SELECT ?Answer WHERE { ?Arg <http://dbpedia.org/ontology/founded> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Beijing_Olympians> <http://dbpedia.org/ontology/foundingYear> ?Answer .}" ]
  }, {
    "id" : "264",
    "status" : "WORK",
    "sentence" : "Who was the successor of John F. Kennedy?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:John_F._Kennedy dbo:successor ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/John_F._Wright> .}" ]
  }, {
    "id" : "265",
    "status" : "WORK",
    "sentence" : "Who is the mayor of Paris?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Paris dbo:mayor ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/leaderName> ?Arg .}", "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/mayor> ?Arg .}" ]
  }, {
    "id" : "266",
    "status" : "N",
    "sentence" : "Did Arnold Schwarzenegger attend a university?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ASK WHERE { res:Arnold_Schwarzenegger dbo:almaMater ?x . ?x rdf:type dbo:University }",
    "sparqls" : [ ]
  }, {
    "id" : "267",
    "status" : "N",
    "sentence" : "Is James Bond married?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:James_Bond dbo:spouse ?uri }",
    "sparqls" : [ ]
  }, {
    "id" : "268",
    "status" : "N",
    "sentence" : "Does the Isar flow into a lake?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ASK WHERE { ?x dbo:inflow res:Isar ; rdf:type dbo:Lake }",
    "sparqls" : [ ]
  }, {
    "id" : "269",
    "status" : "N",
    "sentence" : "Which Indian company has the most employees?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Company ; dbo:location res:India ; dbo:numberOfEmployees ?n } ORDER BY DESC(?n) OFFSET 0 LIMIT 1",
    "sparqls" : [ ]
  }, {
    "id" : "270",
    "status" : "N",
    "sentence" : "Who was John F. Kennedy's vice president?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:John_F._Kennedy dbo:vicePresident ?uri }",
    "sparqls" : [ ]
  }, {
    "id" : "271",
    "status" : "WORK",
    "sentence" : "Which country does the creator of Miffy come from?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Miffy dbo:creator ?x . ?x dbo:nationality ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Country>. <http://dbpedia.org/resource/The_Zouave> <http://dbpedia.org/ontology/author> ?Answer .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Country>. <http://dbpedia.org/resource/The_Xtacles> <http://dbpedia.org/ontology/creator> ?Answer .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Country>. ?Arg <http://dbpedia.org/ontology/notableWork> ?Answer .}" ]
  }, {
    "id" : "273",
    "status" : "N",
    "sentence" : "In what city is the Heineken brewery?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Heineken dbo:manufacturer ?x . ?x dbo:locationCity ?uri }",
    "sparqls" : [ ]
  }, {
    "id" : "274",
    "status" : "N",
    "sentence" : "Is Barack Obama a democrat?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Barack_Obama dbo:party <http://dbpedia.org/resource/Democratic_Party_(United_States)> }",
    "sparqls" : [ ]
  }, {
    "id" : "275",
    "status" : "WORK",
    "sentence" : "List the children of Margaret Thatcher.",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Margaret_Thatcher dbo:child ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Margaret_Thatcher> .}" ]
  }, {
    "id" : "276",
    "status" : "N",
    "sentence" : "From which region is the Melon de Bourgogne?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Melon_de_Bourgogne dbo:wineRegion ?uri }",
    "sparqls" : [ ]
  }, {
    "id" : "278",
    "status" : "WORK",
    "sentence" : "how big is the total area of North Rhine- Westphalia?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?tarea WHERE { dbr:North_Rhine-Westphalia dbo:areaTotal ?tarea }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Of_Arena> <http://dbpedia.org/ontology/seatingCapacity> ?Answer .}" ]
  }, {
    "id" : "279",
    "status" : "N",
    "sentence" : "Which city has the most inhabitants?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:City ; dbo:populationTotal ?pop } ORDER BY DESC(?pop) OFFSET 0 LIMIT 1",
    "sparqls" : [ ]
  }, {
    "id" : "280",
    "status" : "N",
    "sentence" : "What is Donald Trump's main business?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?owner WHERE { ?owner dbo:owner dbr:Donald_Trump }",
    "sparqls" : [ ]
  }, {
    "id" : "281",
    "status" : "N",
    "sentence" : "When will start the final match of the football world cup 2018?",
    "givenSparql" : "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT ?Date WHERE { dbr:2018_FIFA_World_Cup dbp:date ?Date } ORDER BY DESC(?Date) LIMIT 1",
    "sparqls" : [ ]
  }, {
    "id" : "282",
    "status" : "WORK",
    "sentence" : "Which films did Stanley Kubrick direct?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:director res:Stanley_Kubrick }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Film>. ?Answer <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Stanley_Kubrick> .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Film>. <http://dbpedia.org/resource/Stanley_Kubrick's_Boxes> <http://dbpedia.org/ontology/director> ?Answer .}" ]
  }, {
    "id" : "283",
    "status" : "N",
    "sentence" : "how much is the population  Iraq?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?pIraq WHERE { dbr:Iraq dbo:populationTotal ?pIraq }",
    "sparqls" : [ ]
  }, {
    "id" : "284",
    "status" : "WORK",
    "sentence" : "How many inhabitants does the largest city in Canada have?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Canada dbo:largestCity ?city . ?city dbo:populationTotal ?num }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Centre_In_The_Square> <http://dbpedia.org/ontology/seatingCapacity> ?Answer .}" ]
  }, {
    "id" : "285",
    "status" : "WORK",
    "sentence" : "Who is the mayor of the capital of French Polynesia?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:French_Polynesia dbo:capital ?x . ?x dbo:mayor ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/leaderName> <http://dbpedia.org/resource/Parliament_of_the_French_Community> .}", "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/mayor> <http://dbpedia.org/resource/French_Communist_Party> .}" ]
  }, {
    "id" : "286",
    "status" : "WORK",
    "sentence" : "Give me all actors starring in movies directed by William Shatner.",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Actor>. <http://dbpedia.org/resource/Directed_by_John_Ford> <http://dbpedia.org/ontology/starring> ?Answer .}" ]
  }, {
    "id" : "287",
    "status" : "WORK",
    "sentence" : "How tall is Claudia Schiffer?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?height WHERE { res:Claudia_Schiffer dbo:height ?height }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Claudia_Schiffer> <http://dbpedia.org/ontology/height> ?Answer .}" ]
  }, {
    "id" : "288",
    "status" : "N",
    "sentence" : "how much is the population densty rank of germany?",
    "givenSparql" : "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT ?rank WHERE { dbr:Germany dbp:populationDensityRank ?rank }",
    "sparqls" : [ ]
  }, {
    "id" : "289",
    "status" : "N",
    "sentence" : "What is the highest mountain in Italy?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Mountain ; dbo:locatedInArea res:Italy ; dbo:elevation ?num } ORDER BY DESC(?num) OFFSET 0 LIMIT 1",
    "sparqls" : [ ]
  }, {
    "id" : "290",
    "status" : "WORK",
    "sentence" : "List all games by GMT.",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/publisher> <http://dbpedia.org/resource/GMT_Games> .}" ]
  }, {
    "id" : "291",
    "status" : "N",
    "sentence" : "What is the official language of Suriname?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Suriname dbo:officialLanguage ?uri }",
    "sparqls" : [ ]
  }, {
    "id" : "292",
    "status" : "WORK",
    "sentence" : "In which city did Nikos Kazantzakis die?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Nikos_Kazantzakis dbo:deathPlace ?uri . ?uri rdf:type dbo:Town }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/City>. <http://dbpedia.org/resource/Nikos_Kazantzakis> <http://dbpedia.org/ontology/deathPlace> ?Answer .}" ]
  }, {
    "id" : "293",
    "status" : "N",
    "sentence" : "What is in a chocolate chip cookie?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Chocolate_chip_cookie dbo:ingredient ?uri }",
    "sparqls" : [ ]
  }, {
    "id" : "294",
    "status" : "WORK",
    "sentence" : "In which country is the Limerick Lake?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Limerick_Lake dbo:country ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Country>. ?Answer <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Limerick> .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Country>. ?Answer <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Lake_Eyre_Basin> .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Country>. ?Answer <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/Yulton_Lake> .}" ]
  }, {
    "id" : "295",
    "status" : "WORK",
    "sentence" : "Give me all video games published by Mean Hamster Software.",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:VideoGame ; dbo:publisher res:Mean_Hamster_Software }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/VideoGame>. ?Answer <http://dbpedia.org/ontology/publisher> <http://dbpedia.org/resource/Mean_Hamster_Software> .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/VideoGame>. ?Answer <http://dbpedia.org/property/publisher> <http://dbpedia.org/resource/Wizipple_Software> .}" ]
  }, {
    "id" : "296",
    "status" : "WORK",
    "sentence" : "Give me all members of Prodigy.",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:The_Prodigy dbo:bandMember ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/alliance> ?Arg .}", "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/Prodigy_(rapper)> .}" ]
  }, {
    "id" : "297",
    "status" : "N",
    "sentence" : "In which time zone is Rome?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Rome dbo:timeZone ?uri }",
    "sparqls" : [ ]
  }, {
    "id" : "298",
    "status" : "WORK",
    "sentence" : "How high is the lighthouse in Colombo?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Colombo_Lighthouse dbo:height ?num }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Colombo> <http://dbpedia.org/ontology/elevation> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Colombo_Lighthouse> <http://dbpedia.org/ontology/height> ?Answer .}" ]
  }, {
    "id" : "299",
    "status" : "WORK",
    "sentence" : "Who are the writers of the Wall album of Pink Floyd?",
    "givenSparql" : "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT ?writers WHERE { dbr:The_Wall dbp:writer ?writers }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Pink_Floyd> .}" ]
  }, {
    "id" : "300",
    "status" : "WORK",
    "sentence" : "Who is the mayor of Rotterdam?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Rotterdam dbo:leaderName ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/leaderName> ?Arg .}", "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/mayor> ?Arg .}" ]
  }, {
    "id" : "301",
    "status" : "WORK",
    "sentence" : "What is the largest city in Australia?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Australia dbo:largestCity ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/largestCity> <http://dbpedia.org/resource/Kingscote,_South_Australia> .}" ]
  }, {
    "id" : "302",
    "status" : "WORK",
    "sentence" : "Who was married to president Chirac?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Jacques_Chirac dbo:spouse ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Jacques_Chirac> .}" ]
  }, {
    "id" : "303",
    "status" : "WORK",
    "sentence" : "What form of government is found in South Africa?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?uri WHERE { dbr:South_Africa dbo:governmentType ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/birthPlace> ?Arg .}", "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/country> ?Arg .}", "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/locatedInArea> ?Arg .}" ]
  }, {
    "id" : "304",
    "status" : "WORK",
    "sentence" : "How high is the Yokohama Marine Tower?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Yokohama_Marine_Tower dbo:height ?num }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Tower_Lake> <http://dbpedia.org/ontology/elevation> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Yokohama_Marine_Tower> <http://dbpedia.org/ontology/height> ?Answer .}" ]
  }, {
    "id" : "305",
    "status" : "N",
    "sentence" : "Which holidays are celebrated around the world? ",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Holiday }",
    "sparqls" : [ ]
  }, {
    "id" : "306",
    "status" : "WORK",
    "sentence" : "Who is the tallest basketball player?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:BasketballPlayer ; dbo:height ?num } ORDER BY DESC(?num) OFFSET 0 LIMIT 1",
    "sparqls" : [ "SELECT DISTINCT ?subjOfProp WHERE { ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BasketballPlayer> . ?subjOfProp <http://dbpedia.org/ontology/height> ?num . } ORDER BY DESC(?num) LIMIT 1", "SELECT DISTINCT ?subjOfProp WHERE { ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Model> . ?subjOfProp <http://dbpedia.org/ontology/height> ?num . } ORDER BY DESC(?num) LIMIT 1", "SELECT DISTINCT ?subjOfProp WHERE { ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BasketballPlayer> . ?subjOfProp <http://dbpedia.org/ontology/height> ?num . } ORDER BY DESC(?num) LIMIT 1", "SELECT DISTINCT ?subjOfProp WHERE { ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Model> . ?subjOfProp <http://dbpedia.org/ontology/height> ?num . } ORDER BY DESC(?num) LIMIT 1" ]
  }, {
    "id" : "307",
    "status" : "N",
    "sentence" : "How many languages are spoken in Turkmenistan?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT (COUNT(DISTINCT ?x) AS ?c) WHERE { res:Turkmenistan dbo:language ?x }",
    "sparqls" : [ ]
  }, {
    "id" : "308",
    "status" : "N",
    "sentence" : "Did Che Guevara have children?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Che_Guevara dbo:child ?uri }",
    "sparqls" : [ ]
  }, {
    "id" : "309",
    "status" : "N",
    "sentence" : "Did Kaurismäki ever win the Grand Prix at Cannes?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Aki_Kaurismäki dbo:award <http://dbpedia.org/resource/Grand_Prix_(Cannes_Film_Festival)> }",
    "sparqls" : [ ]
  }, {
    "id" : "310",
    "status" : "N",
    "sentence" : "To which party does the mayor of Paris belong?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Paris dbo:mayor ?x . ?x dbo:party ?uri }",
    "sparqls" : [ ]
  }, {
    "id" : "311",
    "status" : "N",
    "sentence" : "Who is the Formula 1 race driver with the most races?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:FormulaOneRacer ; dbo:races ?x } ORDER BY DESC(?x) OFFSET 0 LIMIT 1",
    "sparqls" : [ ]
  }, {
    "id" : "312",
    "status" : "N",
    "sentence" : "What country is Sitecore from?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Sitecore dbo:foundationPlace ?uri }",
    "sparqls" : [ ]
  }, {
    "id" : "313",
    "status" : "N",
    "sentence" : "Give me the birth place of Frank Sinatra.",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?place WHERE { res:Frank_Sinatra dbo:birthPlace ?place }",
    "sparqls" : [ ]
  }, {
    "id" : "314",
    "status" : "N",
    "sentence" : "Is Christian Bale starring in Velvet Goldmine?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Velvet_Goldmine dbo:starring res:Christian_Bale }",
    "sparqls" : [ ]
  }, {
    "id" : "315",
    "status" : "WORK",
    "sentence" : "Who is the son of Sonny and Cher?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:parent res:Cher ; dbo:parent res:Sonny_Bono }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Cher> .}" ]
  }, {
    "id" : "316",
    "status" : "WORK",
    "sentence" : "How many ethnic groups live in Slovenia?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { res:Slovenia dbo:ethnicGroup ?uri }",
    "sparqls" : [ "SELECT COUNT(?Answer ) WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/EthnicGroup>. ?Answer <http://dbpedia.org/ontology/ethnicGroup> ?Arg .}", "SELECT COUNT(?Answer ) WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/EthnicGroup>. ?Arg <http://dbpedia.org/ontology/residence> ?Answer .}" ]
  }, {
    "id" : "317",
    "status" : "N",
    "sentence" : "What is the capital of Cameroon?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Cameroon dbo:capital ?uri }",
    "sparqls" : [ ]
  }, {
    "id" : "318",
    "status" : "N",
    "sentence" : "Was Natalie Portman born in the United States?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Natalie_Portman dbo:birthPlace ?city . ?city dbo:country res:United_States }",
    "sparqls" : [ ]
  }, {
    "id" : "319",
    "status" : "WORK",
    "sentence" : "How many pages does War and Peace have?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?n WHERE { res:War_and_Peace dbo:numberOfPages ?n }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/War_Heroes_Stadium> <http://dbpedia.org/ontology/seatingCapacity> ?Answer .}" ]
  }, {
    "id" : "320",
    "status" : "N",
    "sentence" : "Who is the oldest child of Meryl Streep?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Meryl_Streep dbo:child ?uri . ?uri dbo:birthDate ?d } ORDER BY ASC(?d) OFFSET 0 LIMIT 1",
    "sparqls" : [ ]
  }, {
    "id" : "321",
    "status" : "WORK",
    "sentence" : "Which television shows were created by Walt Disney?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:TelevisionShow ; dbo:creator res:Walt_Disney }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/TelevisionShow>. ?Answer <http://dbpedia.org/ontology/author> <http://dbpedia.org/resource/The_Walt_Disney_Company> .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/TelevisionShow>. ?Answer <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Walt_Disney> .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/TelevisionShow>. ?Answer <http://dbpedia.org/ontology/notableWork> ?Arg .}" ]
  }, {
    "id" : "322",
    "status" : "N",
    "sentence" : "What does IYCM stand for?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:abbreviation \"IYCM\" }",
    "sparqls" : [ ]
  }, {
    "id" : "323",
    "status" : "WORK",
    "sentence" : "Which types of grapes grow in Oregon?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Oregon_wine dbo:growingGrape ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Oregon_wine> <http://dbpedia.org/ontology/growingGrape> ?Answer .}" ]
  }, {
    "id" : "324",
    "status" : "N",
    "sentence" : "Was U.S. president Jackson involved in a war?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Andrew_Jackson dbo:battle ?battle }",
    "sparqls" : [ ]
  }, {
    "id" : "325",
    "status" : "WORK",
    "sentence" : "When was the Titanic completed?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?date WHERE { res:RMS_Titanic dbo:completionDate ?date }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/buildingEndDate> ?Arg .}", "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/completionDate> ?Arg .}" ]
  }, {
    "id" : "326",
    "status" : "N",
    "sentence" : "Did Tesla win a nobel prize in physics?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Nikola_Tesla dbo:award res:Nobel_Prize_in_Physics }",
    "sparqls" : [ ]
  }, {
    "id" : "327",
    "status" : "N",
    "sentence" : "How many states are in Mexico?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT (COUNT(?uri) AS ?count) WHERE { ?uri dbo:type dbr:States_of_Mexico }",
    "sparqls" : [ ]
  }, {
    "id" : "328",
    "status" : "WORK",
    "sentence" : "Which scientist is known for the Manhattan Project and the Nobel Peace Prize?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri dbo:knownFor res:Manhattan_Project ; rdf:type dbo:Scientist ; dbo:knownFor res:Nobel_Peace_Prize }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Scientist>. <http://dbpedia.org/resource/The_Coles> <http://dbpedia.org/ontology/knownFor> ?Answer .}" ]
  }, {
    "id" : "329",
    "status" : "N",
    "sentence" : "How much did the Lego Movie cost?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?n WHERE { res:The_Lego_Movie dbo:budget ?n }",
    "sparqls" : [ ]
  }, {
    "id" : "330",
    "status" : "WORK",
    "sentence" : "Who composed the music for Harold and Maude?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Harold_and_Maude dbo:musicComposer ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Micki_&_Maude> <http://dbpedia.org/ontology/musicComposer> ?Answer .}" ]
  }, {
    "id" : "331",
    "status" : "N",
    "sentence" : "List all episodes of the first season of the HBO television series The Sopranos.",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:series res:The_Sopranos ; dbo:seasonNumber 1 }",
    "sparqls" : [ ]
  }, {
    "id" : "332",
    "status" : "N",
    "sentence" : "Which city has the least inhabitants?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:City ; dbo:populationTotal ?pop } ORDER BY ASC(?pop) OFFSET 0 LIMIT 1",
    "sparqls" : [ ]
  }, {
    "id" : "333",
    "status" : "WORK",
    "sentence" : "Where is Syngman Rhee buried?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Syngman_Rhee dbo:restingPlace ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Syngman_Rhee> <http://dbpedia.org/ontology/restingPlace> ?Answer .}", "SELECT ?Answer WHERE { ?Arg <http://dbpedia.org/property/burialPlace> ?Answer .}" ]
  }, {
    "id" : "334",
    "status" : "N",
    "sentence" : "Does Neymar play for Real Madrid?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Neymar dbo:team <http://dbpedia.org/resource/Real_Madrid_C.F.> }",
    "sparqls" : [ ]
  }, {
    "id" : "335",
    "status" : "WORK",
    "sentence" : "Who wrote the book The Pillars of the Earth?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Unaccustomed_Earth> <http://dbpedia.org/ontology/author> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Earth_Seeker> <http://dbpedia.org/ontology/composer> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Yellow_Earth> <http://dbpedia.org/ontology/writer> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Target_Earth_(album)> <http://dbpedia.org/property/allLyrics> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Batman:_Earth_One> <http://dbpedia.org/property/editor> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/New_Earth> <http://dbpedia.org/property/writer> ?Answer .}" ]
  }, {
    "id" : "336",
    "status" : "N",
    "sentence" : "Do Prince Harry and Prince William have the same parents?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { <http://dbpedia.org/resource/Prince_William,_Duke_of_Cambridge> dbo:parent ?x . res:Prince_Harry dbo:parent ?x }",
    "sparqls" : [ ]
  }, {
    "id" : "337",
    "status" : "WORK",
    "sentence" : "Who was the doctoral supervisor of Albert Einstein?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Albert_Einstein dbo:doctoralAdvisor ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/doctoralAdvisor> <http://dbpedia.org/resource/Albert_Wangerin> .}" ]
  }, {
    "id" : "338",
    "status" : "N",
    "sentence" : "Does Breaking Bad have more episodes than Game of Thrones?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Breaking_Bad dbo:numberOfEpisodes ?x . res:Game_of_Thrones dbo:numberOfEpisodes ?y FILTER ( ?y > ?x ) }",
    "sparqls" : [ ]
  }, {
    "id" : "339",
    "status" : "WORK",
    "sentence" : "Who was Vincent van Gogh inspired by?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:influenced res:Vincent_van_Gogh }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/influenced> <http://dbpedia.org/resource/Vincent_van_Gogh> .}" ]
  }, {
    "id" : "340",
    "status" : "N",
    "sentence" : "Which building after the Burj Khalifa has the most floors?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Burj_Khalifa dbo:floorCount ?burj . ?uri rdf:type dbo:Building ; dbo:floorCount ?proj FILTER ( ?proj < ?burj ) } ORDER BY DESC(?proj) LIMIT 1",
    "sparqls" : [ ]
  }, {
    "id" : "341",
    "status" : "N",
    "sentence" : "What was the final result of the War of the Roses?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?result WHERE { ?uri dbo:isPartOfMilitaryConflict dbr:Wars_of_the_Roses ; dbo:result ?result ; dbo:date ?date } ORDER BY DESC(?date) OFFSET 0 LIMIT 1",
    "sparqls" : [ ]
  }, {
    "id" : "342",
    "status" : "N",
    "sentence" : "How much did Pulp Fiction cost?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?n WHERE { res:Pulp_Fiction dbo:budget ?n }",
    "sparqls" : [ ]
  }, {
    "id" : "343",
    "status" : "N",
    "sentence" : "Is proinsulin a protein?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ASK WHERE { res:Proinsulin rdf:type dbo:Protein }",
    "sparqls" : [ ]
  }, {
    "id" : "344",
    "status" : "N",
    "sentence" : "Do Urdu and Persian have a common root?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Urdu dbo:languageFamily ?uri . dbr:Persian_language dbo:languageFamily ?uri }",
    "sparqls" : [ ]
  }, {
    "id" : "345",
    "status" : "N",
    "sentence" : "Who is starring in Spanish movies produced by Benicio del Toro?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?film rdf:type dbo:Film ; dbo:country res:Spain ; dbo:producer res:Benicio_del_Toro ; dbo:starring ?uri . ?uri rdf:type dbo:Person }",
    "sparqls" : [ ]
  }, {
    "id" : "346",
    "status" : "N",
    "sentence" : "Is Lake Baikal bigger than the Great Bear Lake?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Lake_Baikal dbo:areaTotal ?a1 . res:Great_Bear_Lake dbo:areaTotal ?a2 FILTER ( ?a1 > ?a2 ) }",
    "sparqls" : [ ]
  }, {
    "id" : "347",
    "status" : "N",
    "sentence" : "Show me all books in Asimov's Foundation series.",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:series res:Foundation_series }",
    "sparqls" : [ ]
  }, {
    "id" : "348",
    "status" : "WORK",
    "sentence" : "Where was Bach born?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Johann_Sebastian_Bach dbo:birthPlace ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Yannick_Bach> <http://dbpedia.org/ontology/birthPlace> ?Answer .}" ]
  }, {
    "id" : "349",
    "status" : "N",
    "sentence" : "Which city has the oldest running metro?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?loc WHERE { ?uri dbo:type dbr:Rapid_transit ; dbo:openingYear ?date ; dbo:location ?loc . ?loc rdf:type dbo:City } ORDER BY ASC(?date) LIMIT 1",
    "sparqls" : [ ]
  }, {
    "id" : "350",
    "status" : "WORK",
    "sentence" : "Who designed the Brooklyn Bridge?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Brooklyn_Bridge dbo:architect ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Yair_Bridge> <http://dbpedia.org/ontology/architect> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Vojinović_Bridge> <http://dbpedia.org/ontology/designer> ?Answer .}" ]
  }, {
    "id" : "351",
    "status" : "WORK",
    "sentence" : "How many people live in Eurasia?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?population WHERE { res:Eurasia dbo:populationTotal ?population }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Eurasia> <http://dbpedia.org/ontology/populationTotal> ?Answer .}" ]
  }, {
    "id" : "352",
    "status" : "WORK",
    "sentence" : "Who is the host of the BBC Wildlife Specials?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:BBC_Wildlife_Specials dbo:presenter ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/presenter> <http://dbpedia.org/resource/BBC_Wildlife> .}" ]
  }, {
    "id" : "353",
    "status" : "N",
    "sentence" : "What is the total population of Melbourne, Florida?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { <http://dbpedia.org/resource/Melbourne,_Florida> dbo:populationTotal ?uri }",
    "sparqls" : [ ]
  }, {
    "id" : "354",
    "status" : "WORK",
    "sentence" : "What country is Mount Everest in?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Mount_Everest dbo:locatedInArea ?uri . ?uri rdf:type dbo:Country }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Country>. ?Answer <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Mount_Vernon> .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Country>. ?Answer <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Mount_Emei> .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Country>. ?Answer <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/Mount_Everest> .}" ]
  }, {
    "id" : "355",
    "status" : "WORK",
    "sentence" : "To which artistic movement did the painter of The Three Dancers belong?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:The_Three_Dancers dbo:author ?person . ?person dbo:movement ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/History_of_the_rupee> .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/The_Gambia> <http://dbpedia.org/ontology/currency> ?Answer .}" ]
  }, {
    "id" : "356",
    "status" : "WORK",
    "sentence" : "When did Operation Overlord commence?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?d WHERE { res:Operation_Overlord dbo:date ?d }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/date> ?Arg .}", "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/property/date> ?Arg .}" ]
  }, {
    "id" : "357",
    "status" : "N",
    "sentence" : "What is the bridge with the longest span?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Bridge ; dbo:mainspan ?s } ORDER BY DESC(?s) OFFSET 0 LIMIT 1",
    "sparqls" : [ ]
  }, {
    "id" : "358",
    "status" : "N",
    "sentence" : "Is there a video game called Battle Chess?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ASK WHERE { ?uri rdf:type dbo:VideoGame ; rdfs:label \"Battle Chess\"@en }",
    "sparqls" : [ ]
  }, {
    "id" : "359",
    "status" : "N",
    "sentence" : "Who was buried in the Great Pyramid of Giza?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?uri WHERE { ?uri dbo:restingPlace dbr:Great_Pyramid_of_Giza }",
    "sparqls" : [ ]
  }, {
    "id" : "360",
    "status" : "N",
    "sentence" : "Does the Ford Motor Company have a manufacturing plant in Malaysia?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { ?uri dbo:assembly dbr:Malaysia ; dbo:manufacturer dbr:Ford_Motor_Company }",
    "sparqls" : [ ]
  }, {
    "id" : "361",
    "status" : "N",
    "sentence" : "Did Socrates influence Aristotle?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Aristotle dbo:influencedBy res:Socrates }",
    "sparqls" : [ ]
  }, {
    "id" : "362",
    "status" : "N",
    "sentence" : "How many children did Benjamin Franklin have?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { res:Benjamin_Franklin dbo:child ?uri }",
    "sparqls" : [ ]
  }, {
    "id" : "363",
    "status" : "WORK",
    "sentence" : "How tall is Michael Jordan?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Michael_Jordan dbo:height ?num }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Michael_Jordan> <http://dbpedia.org/ontology/height> ?Answer .}" ]
  }, {
    "id" : "364",
    "status" : "WORK",
    "sentence" : "In which UK city are the headquarters of the MI6?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Secret_Intelligence_Service dbo:headquarter ?uri . ?uri dbo:country res:United_Kingdom }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/alias> ?Arg .}", "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/location> ?Arg .}" ]
  }, {
    "id" : "365",
    "status" : "WORK",
    "sentence" : "Who created Family Guy?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Family_Guy dbo:creator ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Wolf_Guy> <http://dbpedia.org/ontology/author> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Family_Guy> <http://dbpedia.org/ontology/creator> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Guy_Vanderhaeghe> <http://dbpedia.org/ontology/notableWork> ?Answer .}" ]
  }, {
    "id" : "366",
    "status" : "WORK",
    "sentence" : "In which city does the Chile Route 68 end?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Chile_Route_68 dbo:routeEnd ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/City>. ?Answer <http://dbpedia.org/ontology/mouthCountry> <http://dbpedia.org/resource/Chile> .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/City>. ?Answer <http://dbpedia.org/ontology/mouthPlace> <http://dbpedia.org/resource/Chile> .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/City>. ?Answer <http://dbpedia.org/ontology/routeEnd> <http://dbpedia.org/resource/Massachusetts_Route_68> .}" ]
  }, {
    "id" : "367",
    "status" : "N",
    "sentence" : "Give me the grandchildren of Elvis Presley.",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Elvis_Presley dbo:child ?child . ?child dbo:child ?uri }",
    "sparqls" : [ ]
  }, {
    "id" : "368",
    "status" : "N",
    "sentence" : "When did the Ming dynasty dissolve?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?date WHERE { res:Ming_dynasty dbo:dissolutionDate ?date }",
    "sparqls" : [ ]
  }, {
    "id" : "369",
    "status" : "WORK",
    "sentence" : "In which military conflicts did Lawrence of Arabia participate?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:T._E._Lawrence dbo:battle ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/MilitaryConflict>. ?Answer <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/Price_of_oil> .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/MilitaryConflict>. <http://dbpedia.org/resource/Protectorate_of_South_Arabia> <http://dbpedia.org/ontology/currency> ?Answer .}" ]
  }, {
    "id" : "370",
    "status" : "WORK",
    "sentence" : "What is the timezone in San Pedro de Atacama?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:San_Pedro_de_Atacama dbo:timeZone ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/timeZone> <http://dbpedia.org/resource/De_jure> .}" ]
  }, {
    "id" : "371",
    "status" : "WORK",
    "sentence" : "Give me all books by William Goldman with more than 300 pages.",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Book ; dbo:author res:William_Goldman ; dbo:numberOfPages ?x FILTER ( ?x > 300 ) }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/author> <http://dbpedia.org/resource/William_Goldman> .}" ]
  }, {
    "id" : "372",
    "status" : "N",
    "sentence" : "What did Bruce Carver die from?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Bruce_Carver dbo:deathCause ?uri }",
    "sparqls" : [ ]
  }, {
    "id" : "373",
    "status" : "WORK",
    "sentence" : "Which subsidiary of Lufthansa serves both Dortmund and Berlin Tegel?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Lufthansa dbo:subsidiary ?uri . ?uri dbo:targetAirport res:Dortmund_Airport ; dbo:targetAirport res:Berlin_Tegel_Airport }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/targetAirport> <http://dbpedia.org/resource/Berlin_Tegel_Airport> .}" ]
  }, {
    "id" : "374",
    "status" : "N",
    "sentence" : "Does Abraham Lincoln's death place have a website?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Abraham_Lincoln dbo:deathPlace ?p . ?p dbo:website ?w }",
    "sparqls" : [ ]
  }, {
    "id" : "375",
    "status" : "N",
    "sentence" : "Did Elvis Presley have children?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Elvis_Presley dbo:child ?uri }",
    "sparqls" : [ ]
  }, {
    "id" : "376",
    "status" : "WORK",
    "sentence" : "Is Michelle Obama the wife of Barack Obama?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Barack_Obama dbo:spouse res:Michelle_Obama }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Barack_Obama> .}" ]
  }, {
    "id" : "377",
    "status" : "WORK",
    "sentence" : "In which city does Sylvester Stallone live?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:City . res:Sylvester_Stallone dbo:residence ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/City>. <http://dbpedia.org/resource/Sylvester_(film)> <http://dbpedia.org/ontology/starring> ?Answer .}" ]
  }, {
    "id" : "378",
    "status" : "WORK",
    "sentence" : "Which books by Kerouac were published by Viking Press?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Book ; dbo:publisher res:Viking_Press ; dbo:author res:Jack_Kerouac }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/publisher> <http://dbpedia.org/resource/Viking_Press> .}", "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/property/publisher> <http://dbpedia.org/resource/Viking_Press> .}" ]
  }, {
    "id" : "379",
    "status" : "WORK",
    "sentence" : "Who wrote the song Hotel California?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Hotel_California dbo:writer ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Goodbye_California> <http://dbpedia.org/ontology/author> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/California_Games> <http://dbpedia.org/ontology/composer> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Maybe_California> <http://dbpedia.org/ontology/writer> ?Answer .}", "SELECT ?Answer WHERE { ?Arg <http://dbpedia.org/property/allLyrics> ?Answer .}", "SELECT ?Answer WHERE { ?Arg <http://dbpedia.org/property/editor> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/California_Sunrise> <http://dbpedia.org/property/writer> ?Answer .}" ]
  }, {
    "id" : "380",
    "status" : "WORK",
    "sentence" : "What is the capital of Canada?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Canada dbo:capital ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/capital> <http://dbpedia.org/resource/York,_Upper_Canada> .}" ]
  }, {
    "id" : "381",
    "status" : "WORK",
    "sentence" : "Who is the mayor of Tel Aviv?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Tel_Aviv dbo:leaderName ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/leaderName> ?Arg .}", "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/mayor> ?Arg .}" ]
  }, {
    "id" : "382",
    "status" : "N",
    "sentence" : "What form of government does Russia have?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Russia dbo:governmentType ?uri }",
    "sparqls" : [ ]
  }, {
    "id" : "383",
    "status" : "WORK",
    "sentence" : "Show me the book that Muhammad Ali wrote.",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Book ; dbo:author res:Muhammad_Ali }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/author> <http://dbpedia.org/resource/Muhammad_Ali> .}", "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/composer> <http://dbpedia.org/resource/Queen_Muhammad_Ali> .}", "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/writer> <http://dbpedia.org/resource/Muhammad_Ali> .}", "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/property/allLyrics> <http://dbpedia.org/resource/Yusuf_Ali_Kechery> .}", "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/property/editor> ?Arg .}", "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Ali_Shaheed_Muhammad> .}" ]
  }, {
    "id" : "384",
    "status" : "N",
    "sentence" : "Who was the first to climb Mount Everest?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Mount_Everest dbo:firstAscentPerson ?uri }",
    "sparqls" : [ ]
  }, {
    "id" : "385",
    "status" : "N",
    "sentence" : "How many languages are spoken in Colombia?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri rdf:type dbo:Language . res:Colombia dbo:language ?uri }",
    "sparqls" : [ ]
  }, {
    "id" : "386",
    "status" : "WORK",
    "sentence" : "What is the currency of the Czech Republic?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Czech_Republic dbo:currency ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/Czech_koruna> .}" ]
  }, {
    "id" : "387",
    "status" : "N",
    "sentence" : "Where in France is sparkling wine produced?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:wineProduced res:Sparkling_wine ; dbo:location res:France }",
    "sparqls" : [ ]
  }, {
    "id" : "388",
    "status" : "N",
    "sentence" : "When did Boris Becker end his active career?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?d WHERE { res:Boris_Becker dbo:activeYearsEndDate ?d }",
    "sparqls" : [ ]
  }, {
    "id" : "389",
    "status" : "WORK",
    "sentence" : "Which movies starring Mickey Rourke were directed by Guy Ritchie?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Mickey_Rourke ; dbo:director res:Guy_Ritchie }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Guy_Ritchie> .}" ]
  }, {
    "id" : "390",
    "status" : "WORK",
    "sentence" : "In which films did Julia Roberts as well as Richard Gere play?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Julia_Roberts ; dbo:starring res:Richard_Gere }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Film>. ?Answer <http://dbpedia.org/ontology/genre> <http://dbpedia.org/resource/Richard_Wagner> .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Film>. ?Answer <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Wendy_Richard> .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Film>. ?Answer <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Richard_Gere> .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Film>. <http://dbpedia.org/resource/It_Might_as_Well_Be_Swing> <http://dbpedia.org/ontology/genre> ?Answer .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Film>. <http://dbpedia.org/resource/Summer_Roberts> <http://dbpedia.org/ontology/portrayer> ?Answer .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Film>. <http://dbpedia.org/resource/You_Might_as_Well_Live> <http://dbpedia.org/ontology/starring> ?Answer .}" ]
  }, {
    "id" : "391",
    "status" : "N",
    "sentence" : "Show me Hemingway's autobiography.",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:author res:Ernest_Hemingway ; dbo:literaryGenre res:Autobiography }",
    "sparqls" : [ ]
  }, {
    "id" : "392",
    "status" : "WORK",
    "sentence" : "How tall is Amazon Eve?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?height WHERE { res:Amazon_Eve dbo:height ?height }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Amazon_Eve> <http://dbpedia.org/ontology/height> ?Answer .}" ]
  }, {
    "id" : "393",
    "status" : "N",
    "sentence" : "What are the five boroughs of New York?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri dbo:governmentType <http://dbpedia.org/resource/Borough_(New_York_City)> }",
    "sparqls" : [ ]
  }, {
    "id" : "394",
    "status" : "N",
    "sentence" : "Give me all Canadian Grunge record labels.",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:RecordLabel ; dbo:genre res:Grunge ; dbo:country res:Canada }",
    "sparqls" : [ ]
  }, {
    "id" : "395",
    "status" : "WORK",
    "sentence" : "In which country does the Ganges start?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ganges dbo:sourceCountry ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Country>. <http://dbpedia.org/resource/Walk_the_Walk> <http://dbpedia.org/ontology/starring> ?Answer .}" ]
  }, {
    "id" : "396",
    "status" : "WORK",
    "sentence" : "Who is the founder of Penguin Books?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Penguin_Books dbo:founder ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/foundedBy> ?Arg .}", "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/founder> <http://dbpedia.org/resource/Fearless_Books> .}" ]
  }, {
    "id" : "397",
    "status" : "WORK",
    "sentence" : "Who wrote the Game of Thrones theme?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Game_of_Thrones dbo:composer ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Theme_of_the_Traitor_and_the_Hero> <http://dbpedia.org/ontology/author> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Theme_Hospital> <http://dbpedia.org/ontology/composer> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/The_Theme> <http://dbpedia.org/ontology/writer> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Variations_on_a_Theme_(David_Thomas_album)> <http://dbpedia.org/property/allLyrics> ?Answer .}", "SELECT ?Answer WHERE { ?Arg <http://dbpedia.org/property/editor> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Theme_for_a_Trucker> <http://dbpedia.org/property/writer> ?Answer .}" ]
  }, {
    "id" : "398",
    "status" : "WORK",
    "sentence" : "Who is the president of Eritrea?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Eritrea dbo:leader ?uri ; dbo:leaderTitle \"President\"@en }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/leader> ?Arg .}", "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/leaderTitle> ?Arg .}", "No Sparql!!!!", "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/property/title> <http://dbpedia.org/resource/Italian_Governors_of_Eritrea> .}" ]
  }, {
    "id" : "399",
    "status" : "N",
    "sentence" : "In which city did John F. Kennedy die?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:John_F._Kennedy dbo:deathPlace ?uri . ?uri rdf:type dbo:City }",
    "sparqls" : [ ]
  }, {
    "id" : "400",
    "status" : "N",
    "sentence" : "What is the highest mountain in Australia?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Mountain ; dbo:locatedInArea res:Australia ; dbo:elevation ?elevation } ORDER BY DESC(?elevation) LIMIT 1",
    "sparqls" : [ ]
  }, {
    "id" : "401",
    "status" : "WORK",
    "sentence" : "Who writes the Farmers' Almanac?",
    "givenSparql" : "PREFIX dbp: <http://dbpedia.org/property/> SELECT ?uri WHERE { <http://dbpedia.org/resource/Farmers'_Almanac> dbp:editor ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Neanderthals,_Bandits_and_Farmers> <http://dbpedia.org/ontology/author> ?Answer .}", "SELECT ?Answer WHERE { ?Arg <http://dbpedia.org/ontology/composer> ?Answer .}", "SELECT ?Answer WHERE { ?Arg <http://dbpedia.org/ontology/writer> ?Answer .}", "SELECT ?Answer WHERE { ?Arg <http://dbpedia.org/property/allLyrics> ?Answer .}", "SELECT ?Answer WHERE { ?Arg <http://dbpedia.org/property/editor> ?Answer .}", "SELECT ?Answer WHERE { ?Arg <http://dbpedia.org/property/writer> ?Answer .}" ]
  }, {
    "id" : "402",
    "status" : "N",
    "sentence" : "Give me the currency of China.",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:China dbo:currency ?uri }",
    "sparqls" : [ ]
  }, {
    "id" : "403",
    "status" : "N",
    "sentence" : "Give me all Swedish oceanographers.",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:field res:Oceanography ; dbo:birthPlace res:Sweden }",
    "sparqls" : [ ]
  }, {
    "id" : "404",
    "status" : "WORK",
    "sentence" : "In which city are the headquarters of the United Nations?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Headquarters_of_the_United_Nations dbo:location ?uri . ?uri rdf:type dbo:City }",
    "sparqls" : [ "No Sparql!!!!", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/City>. ?Answer <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/United_Nations> .}" ]
  }, {
    "id" : "405",
    "status" : "WORK",
    "sentence" : "Is Rita Wilson the wife of Tom Hanks?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Tom_Hanks dbo:spouse res:Rita_Wilson }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Tom_Hanks> .}" ]
  }, {
    "id" : "406",
    "status" : "WORK",
    "sentence" : "In which countries do people speak Japanese?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Country ; dbo:language res:Japanese_language }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Japanese_Wikipedia> <http://dbpedia.org/ontology/language> ?Answer .}", "SELECT ?Answer WHERE { ?Arg <http://dbpedia.org/ontology/officialLanguage> ?Answer .}" ]
  }, {
    "id" : "407",
    "status" : "N",
    "sentence" : "Which of Tim Burton's films had the highest budget?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:director res:Tim_Burton ; dbo:budget ?b } ORDER BY ?b OFFSET 0 LIMIT 1",
    "sparqls" : [ ]
  }, {
    "id" : "408",
    "status" : "N",
    "sentence" : "Which museum in New York has the most visitors?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Museum ; dbo:location res:New_York_City ; dbo:numberOfVisitors ?num } ORDER BY DESC(?num) OFFSET 0 LIMIT 1",
    "sparqls" : [ ]
  }, {
    "id" : "409",
    "status" : "N",
    "sentence" : "What was the first Queen album?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Album ; dbo:artist <http://dbpedia.org/resource/Queen_(band)> ; dbo:releaseDate ?d } ORDER BY ASC(?d) OFFSET 0 LIMIT 1",
    "sparqls" : [ ]
  }, {
    "id" : "410",
    "status" : "N",
    "sentence" : "What was the first name of the band Queens of the Stone Age?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?name WHERE { res:Queens_of_the_Stone_Age dbo:alias ?name }",
    "sparqls" : [ ]
  }, {
    "id" : "411",
    "status" : "N",
    "sentence" : "What was the last movie with Alec Guinness?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Alec_Guinness ; dbo:releaseDate ?date } ORDER BY DESC(?date) LIMIT 1",
    "sparqls" : [ ]
  }, {
    "id" : "412",
    "status" : "WORK",
    "sentence" : "Give me all actors starring in Last Action Hero.",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Last_Action_Hero dbo:starring ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Actor>. <http://dbpedia.org/resource/Last_Action_Hero> <http://dbpedia.org/ontology/starring> ?Answer .}" ]
  }, {
    "id" : "413",
    "status" : "WORK",
    "sentence" : "Who discovered Pluto?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?uri WHERE { dbr:Pluto dbo:discoverer ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Pluto> <http://dbpedia.org/ontology/discoverer> ?Answer .}" ]
  } ]
}