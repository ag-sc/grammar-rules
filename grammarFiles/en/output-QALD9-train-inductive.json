{
  "results" : [ {
    "id" : "1",
    "status" : "WORK",
    "sentence" : "List all boardgames by GMT.",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/publisher> <http://dbpedia.org/resource/GMT_Games> .}", "SELECT ?Answer WHERE { ?Arg <http://dbpedia.org/ontology/publisher> ?Answer .}" ]
  }, {
    "id" : "2",
    "status" : "WORK",
    "sentence" : "Who developed Skype?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/product> <http://dbpedia.org/resource/Skype> .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Skype> <http://dbpedia.org/ontology/developer> ?Answer .}" ]
  }, {
    "id" : "3",
    "status" : "WORK",
    "sentence" : "Which people were born in Heraklion?",
    "givenSparql" : "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Person>. ?Answer <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Heraklion> .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Person>. ?Arg <http://dbpedia.org/ontology/birthDate> ?Answer .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Person>. ?Arg <http://dbpedia.org/ontology/birthYear> ?Answer .}" ]
  }, {
    "id" : "4",
    "status" : "N",
    "sentence" : "In which U.S. state is Area 51 located?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }",
    "sparqls" : [ ]
  }, {
    "id" : "5",
    "status" : "WORK",
    "sentence" : "Who is the mayor of New York City?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/New_York_City> <http://dbpedia.org/ontology/leaderName> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Watervliet,_New_York> <http://dbpedia.org/ontology/mayor> ?Answer .}" ]
  }, {
    "id" : "6",
    "status" : "N",
    "sentence" : "Which countries have places with more than two caves?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?cave rdf:type dbo:Cave ; dbo:location ?uri . ?uri rdf:type dbo:Country } GROUP BY ?uri HAVING ( COUNT(?cave) > 2 )",
    "sparqls" : [ ]
  }, {
    "id" : "7",
    "status" : "WORK",
    "sentence" : "Where did Abraham Lincoln die?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Abraham_Lincoln> <http://dbpedia.org/ontology/deathPlace> ?Answer .}" ]
  }, {
    "id" : "8",
    "status" : "WORK",
    "sentence" : "Which airports does Air China serve?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Airport>. <http://dbpedia.org/resource/Air_China> <http://dbpedia.org/ontology/targetAirport> ?Answer .}" ]
  }, {
    "id" : "9",
    "status" : "WORK",
    "sentence" : "Give me all actors starring in movies directed by and starring William Shatner.",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Actor>. <http://dbpedia.org/resource/Roast_Beef_and_Movies> <http://dbpedia.org/ontology/starring> ?Answer .}" ]
  }, {
    "id" : "10",
    "status" : "WORK",
    "sentence" : "What are the official languages of the Philippines?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Philippines> <http://dbpedia.org/ontology/officialLanguage> ?Answer .}" ]
  }, {
    "id" : "11",
    "status" : "WORK",
    "sentence" : "Give me all Danish films.",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:country res:Denmark }",
    "sparqls" : [ "SELECT DISTINCT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Denmark> }" ]
  }, {
    "id" : "12",
    "status" : "WORK",
    "sentence" : "Which movies starring Brad Pitt were directed by Guy Ritchie?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Brad_Pitt ; dbo:director res:Guy_Ritchie }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Guy_Ritchie> .}" ]
  }, {
    "id" : "13",
    "status" : "N",
    "sentence" : "Give me the grandchildren of Bruce Lee.",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Bruce_Lee dbo:child ?child . ?child <http://dbpedia.org/property/children> ?uri }",
    "sparqls" : [ ]
  }, {
    "id" : "14",
    "status" : "WORK",
    "sentence" : "Which other weapons did the designer of the Uzi develop?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Weapon ; dbp:designer ?x . res:Uzi dbp:designer ?x FILTER ( ?uri != res:Uzi ) }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Wizards_of_the_Coast> .}", "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/product> <http://dbpedia.org/resource/The_Typing_of_the_Dead> .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Yvon_of_the_Yukon> <http://dbpedia.org/ontology/developer> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Wizards_of_the_Coast> <http://dbpedia.org/ontology/product> ?Answer .}" ]
  }, {
    "id" : "15",
    "status" : "WORK",
    "sentence" : "Who is the owner of Universal Studios?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Universal_Studios> <http://dbpedia.org/ontology/owner> ?Answer .}" ]
  }, {
    "id" : "16",
    "status" : "N",
    "sentence" : "Which state of the USA has the highest population density?",
    "givenSparql" : "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:densityrank ?rank } ORDER BY ASC(?rank) LIMIT 1",
    "sparqls" : [ ]
  }, {
    "id" : "17",
    "status" : "WORK",
    "sentence" : "Which monarchs were married to a German?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Monarch ; dbo:spouse ?spouse { ?spouse dbo:birthPlace res:Germany } UNION { ?spouse dbo:birthPlace ?p . ?p dbo:country res:Germany } }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Monarch>. ?Answer <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Mike_German> .}" ]
  }, {
    "id" : "18",
    "status" : "WORK",
    "sentence" : "Which organizations were founded in 1950?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, \"^1950\") }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/foundationPlace> \"1950\"^^<http://www.w3.org/2001/XMLSchema#gYear> .}", "SELECT ?Answer WHERE { \"1950\"^^<http://www.w3.org/2001/XMLSchema#gYear> <http://dbpedia.org/ontology/founded> ?Answer .}", "SELECT ?Answer WHERE { \"1950\"^^<http://www.w3.org/2001/XMLSchema#gYear> <http://dbpedia.org/ontology/foundingYear> ?Answer .}" ]
  }, {
    "id" : "19",
    "status" : "WORK",
    "sentence" : "Who created the comic Captain America?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Captain_America dbo:creator ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Thor_Meets_Captain_America> <http://dbpedia.org/ontology/author> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Captain_America> <http://dbpedia.org/ontology/creator> ?Answer .}", "SELECT ?Answer WHERE { ?Arg <http://dbpedia.org/ontology/notableWork> ?Answer .}" ]
  }, {
    "id" : "20",
    "status" : "N",
    "sentence" : "Give me the Apollo 14 astronauts.",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:mission res:Apollo_14 }",
    "sparqls" : [ ]
  }, {
    "id" : "21",
    "status" : "WORK",
    "sentence" : "Who wrote the book The pillars of the Earth?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/The_Pillars_of_the_Earth> <http://dbpedia.org/ontology/author> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/The_Pillars_of_the_Earth_(miniseries)> <http://dbpedia.org/ontology/composer> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/The_Book_of_Zombie> <http://dbpedia.org/ontology/writer> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/The_Book_of_Other_People> <http://dbpedia.org/property/editor> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/The_Edge_of_the_Earth> <http://dbpedia.org/property/writer> ?Answer .}" ]
  }, {
    "id" : "22",
    "status" : "N",
    "sentence" : "Which state of the United States of America has the highest density?",
    "givenSparql" : "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1",
    "sparqls" : [ ]
  }, {
    "id" : "23",
    "status" : "WORK",
    "sentence" : "Which spaceflights were launched from Baikonur?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/launchPad> res:Baikonur_Cosmodrome }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/property/launchPad> <http://dbpedia.org/resource/Baikonur_Cosmodrome> .}" ]
  }, {
    "id" : "24",
    "status" : "N",
    "sentence" : "Give me a list of all trumpet players that were bandleaders.",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }",
    "sparqls" : [ ]
  }, {
    "id" : "25",
    "status" : "N",
    "sentence" : "Which U.S. states are in the same timezone as Utah?",
    "givenSparql" : "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }",
    "sparqls" : [ ]
  }, {
    "id" : "26",
    "status" : "N",
    "sentence" : "Which U.S. states possess gold minerals?",
    "givenSparql" : "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:mineral ?mineral FILTER regex(?mineral, \"gold\", \"i\") }",
    "sparqls" : [ ]
  }, {
    "id" : "27",
    "status" : "WORK",
    "sentence" : "Who is the daughter of Ingrid Bergman married to?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Ingrid_Bergman> <http://dbpedia.org/ontology/child> ?Answer .}" ]
  }, {
    "id" : "28",
    "status" : "WORK",
    "sentence" : "How deep is Lake Placid?",
    "givenSparql" : "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?n WHERE { <http://dbpedia.org/resource/Lake_Placid_(Texas)> dbo:maximumDepth ?n }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Lake_Placid_(Texas)> <http://dbpedia.org/ontology/maximumDepth> ?Answer .}" ]
  }, {
    "id" : "29",
    "status" : "WORK",
    "sentence" : "Show me all museums in London.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Museum> ; <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/London> }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Westfield_London> <http://dbpedia.org/ontology/location> ?Answer .}" ]
  }, {
    "id" : "30",
    "status" : "N",
    "sentence" : "Which caves have more than 3 entrances?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Cave> ; <http://dbpedia.org/property/entranceCount> ?entrance FILTER ( ?entrance > 3 ) }",
    "sparqls" : [ ]
  }, {
    "id" : "31",
    "status" : "WORK",
    "sentence" : "Who is the tallest player of the Atlanta Falcons?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1",
    "sparqls" : [ "SELECT DISTINCT ?subjOfProp WHERE { ?subjOfProp <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> . ?subjOfProp <http://dbpedia.org/ontology/height> ?num . } ORDER BY DESC(?num) LIMIT 1" ]
  }, {
    "id" : "32",
    "status" : "N",
    "sentence" : "What are the top-10 action role-playing video games according to IGN?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri <http://purl.org/dc/terms/subject> <http://dbpedia.org/resource/Category:Action_role-playing_video_games> ; <http://dbpedia.org/property/ign> ?score } ORDER BY DESC(?score) LIMIT 10",
    "sparqls" : [ ]
  }, {
    "id" : "33",
    "status" : "WORK",
    "sentence" : "Give me all writers that won the Nobel Prize in literature.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Writer> ; <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Nobel_Prize_in_Literature> }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Writer>. <http://dbpedia.org/resource/In_the_Heights> <http://dbpedia.org/ontology/award> ?Answer .}" ]
  }, {
    "id" : "34",
    "status" : "WORK",
    "sentence" : "Show me all basketball players that are higher than 2 meters.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/BasketballPlayer> ; <http://dbpedia.org/ontology/height> ?n FILTER ( ?n > 2.0 ) }",
    "sparqls" : [ "SELECT DISTINCT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/BasketballPlayer>. ?Answer <http://dbpedia.org/ontology/elevation> ?objOfProp FILTER ( ?objOfProp > 2 ) }", "SELECT DISTINCT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/BasketballPlayer>. ?Answer <http://dbpedia.org/ontology/height> ?objOfProp FILTER ( ?objOfProp > 2 ) }" ]
  }, {
    "id" : "35",
    "status" : "N",
    "sentence" : "When was the Statue of Liberty built?",
    "givenSparql" : "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Statue_of_Liberty> <http://dbpedia.org/property/beginningDate> ?date }",
    "sparqls" : [ ]
  }, {
    "id" : "36",
    "status" : "WORK",
    "sentence" : "Which states border Illinois?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Illinois> <http://dbpedia.org/property/borderingstates> ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Illinois> <http://dbpedia.org/property/borderingstates> ?Answer .}" ]
  }, {
    "id" : "37",
    "status" : "WORK",
    "sentence" : "Who developed Minecraft?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Minecraft> <http://dbpedia.org/ontology/developer> ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/product> <http://dbpedia.org/resource/Minecraft> .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Minecraft> <http://dbpedia.org/ontology/developer> ?Answer .}" ]
  }, {
    "id" : "38",
    "status" : "WORK",
    "sentence" : "Where did Hillel Slovak die?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hillel_Slovak> <http://dbpedia.org/ontology/deathPlace> ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Hillel_Slovak> <http://dbpedia.org/ontology/deathPlace> ?Answer .}" ]
  }, {
    "id" : "39",
    "status" : "WORK",
    "sentence" : "What movies does Jesse Eisenberg play in?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jesse_Eisenberg> }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Film>. ?Answer <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jesse_Eisenberg> .}" ]
  }, {
    "id" : "40",
    "status" : "WORK",
    "sentence" : "Give all swimmers that were born in Moscow.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Swimmer> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Moscow> }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Swimmer>. ?Answer <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Moscow> .}" ]
  }, {
    "id" : "41",
    "status" : "N",
    "sentence" : "Give me all cosmonauts.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Astronaut> { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Russia> } UNION { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Soviet_Union> } }",
    "sparqls" : [ ]
  }, {
    "id" : "42",
    "status" : "WORK",
    "sentence" : "Give me all Swiss non-profit organizations.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/type> <http://dbpedia.org/resource/Nonprofit_organization> { ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Switzerland> } UNION { ?uri <http://dbpedia.org/ontology/location> ?x . ?x <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Switzerland> } }",
    "sparqls" : [ "SELECT DISTINCT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/resource/Nonprofit_organization> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Switzerland> }" ]
  }, {
    "id" : "43",
    "status" : "WORK",
    "sentence" : "Which presidents were born in 1945?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/President> ; <http://dbpedia.org/ontology/birthDate> ?date FILTER regex(?date, \"^1945\") }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/President>. ?Answer <http://dbpedia.org/ontology/birthPlace> \"1945\"^^<http://www.w3.org/2001/XMLSchema#gYear> .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/President>. \"1945\"^^<http://www.w3.org/2001/XMLSchema#gYear> <http://dbpedia.org/ontology/birthDate> ?Answer .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/President>. \"1945\"^^<http://www.w3.org/2001/XMLSchema#gYear> <http://dbpedia.org/ontology/birthYear> ?Answer .}" ]
  }, {
    "id" : "44",
    "status" : "WORK",
    "sentence" : "What kind of music did Lou Reed play?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lou_Reed> <http://dbpedia.org/ontology/genre> ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/genre> ?Arg .}", "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Reed_Diamond> .}", "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Lou_Reed> .}" ]
  }, {
    "id" : "45",
    "status" : "N",
    "sentence" : "Where do the Red Sox play?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Boston_Red_Sox> <http://dbpedia.org/property/ballpark> ?uri }",
    "sparqls" : [ ]
  }, {
    "id" : "46",
    "status" : "N",
    "sentence" : "Show a list of soccer clubs that play in the Bundesliga.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerClub> ; <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/Bundesliga> }",
    "sparqls" : [ ]
  }, {
    "id" : "47",
    "status" : "N",
    "sentence" : "Which volcanos in Japan erupted since 2000?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Volcano> ; <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/Japan> ; <http://dbpedia.org/ontology/eruptionYear> ?date FILTER ( year(?date) >= 2000 ) }",
    "sparqls" : [ ]
  }, {
    "id" : "48",
    "status" : "WORK",
    "sentence" : "Which bridges cross the Seine?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Bridge> ; <http://dbpedia.org/ontology/crosses> <http://dbpedia.org/resource/Seine> }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Bridge>. ?Answer <http://dbpedia.org/ontology/crosses> <http://dbpedia.org/resource/Seine> .}" ]
  }, {
    "id" : "49",
    "status" : "WORK",
    "sentence" : "What is the official color of the University of Oxford?",
    "givenSparql" : "SELECT DISTINCT ?string WHERE { <http://dbpedia.org/resource/University_of_Oxford> <http://dbpedia.org/ontology/officialSchoolColour> ?string }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/University_of_Oxford> <http://dbpedia.org/ontology/officialSchoolColour> ?Answer .}" ]
  }, {
    "id" : "50",
    "status" : "N",
    "sentence" : "How many films did Hal Roach produce?",
    "givenSparql" : "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> }",
    "sparqls" : [ ]
  }, {
    "id" : "51",
    "status" : "WORK",
    "sentence" : "Give me all Danish movies.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Denmark> }",
    "sparqls" : [ "SELECT DISTINCT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Denmark> }" ]
  }, {
    "id" : "52",
    "status" : "N",
    "sentence" : "What is the most frequent cause of death?",
    "givenSparql" : "SELECT DISTINCT ?x WHERE { ?uri <http://dbpedia.org/ontology/deathCause> ?x . } ORDER BY DESC(COUNT(DISTINCT ?uri)) OFFSET 0 LIMIT 1",
    "sparqls" : [ ]
  }, {
    "id" : "53",
    "status" : "N",
    "sentence" : "Who are the four youngest MVP basketball players?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/BasketballPlayer> ; <http://dbpedia.org/ontology/birthDate> ?date ; <http://dbpedia.org/property/highlights> ?h FILTER regex(?h, \"MVP\") } ORDER BY DESC(?date) OFFSET 0 LIMIT 4",
    "sparqls" : [ ]
  }, {
    "id" : "54",
    "status" : "N",
    "sentence" : "Give me all companies in Munich.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Company> { ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Munich> } UNION { ?uri <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Munich> } UNION { ?uri <http://dbpedia.org/ontology/locationCity> <http://dbpedia.org/resource/Munich> } }",
    "sparqls" : [ ]
  }, {
    "id" : "55",
    "status" : "WORK",
    "sentence" : "Give me the capitals of all countries that the Himalayas run through.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Himalayas> <http://dbpedia.org/ontology/country> ?country . ?country <http://dbpedia.org/ontology/capital> ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Voice_of_Music> <http://dbpedia.org/ontology/foundationPlace> ?Answer .}" ]
  }, {
    "id" : "56",
    "status" : "N",
    "sentence" : "How many movies did Park Chan-wook direct?",
    "givenSparql" : "SELECT COUNT(DISTINCT ?uri AS ?uri) WHERE { ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Park_Chan-wook> . }",
    "sparqls" : [ ]
  }, {
    "id" : "57",
    "status" : "WORK",
    "sentence" : "Which rivers flow into a German lake?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/River> . ?x <http://dbpedia.org/ontology/inflow> ?uri ; a <http://dbpedia.org/ontology/Lake> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Germany> }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/River>. ?Answer <http://dbpedia.org/ontology/inflow> <http://dbpedia.org/resource/Waneta_Lake> .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/River>. <http://dbpedia.org/resource/Łańskie_Lake> <http://dbpedia.org/ontology/inflow> ?Answer .}" ]
  }, {
    "id" : "58",
    "status" : "N",
    "sentence" : "How many airlines are there?",
    "givenSparql" : "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Airline> }",
    "sparqls" : [ ]
  }, {
    "id" : "59",
    "status" : "N",
    "sentence" : "Give me all islands that belong to Japan.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Island> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Japan> }",
    "sparqls" : [ ]
  }, {
    "id" : "60",
    "status" : "N",
    "sentence" : "How many inhabitants does Maribor have?",
    "givenSparql" : "SELECT DISTINCT ?num WHERE { <http://dbpedia.org/resource/Maribor> <http://dbpedia.org/ontology/populationTotal> ?num }",
    "sparqls" : [ ]
  }, {
    "id" : "61",
    "status" : "N",
    "sentence" : "Give me all Apollo 14 astronauts.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/mission> <http://dbpedia.org/resource/Apollo_14> }",
    "sparqls" : [ ]
  }, {
    "id" : "62",
    "status" : "N",
    "sentence" : "Which companies have more than 1 million employees?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Company> { ?uri <http://dbpedia.org/ontology/numberOfEmployees> ?n } UNION { ?uri <http://dbpedia.org/property/numEmployees> ?n } FILTER ( ?n > 1000000 ) }",
    "sparqls" : [ ]
  }, {
    "id" : "63",
    "status" : "WORK",
    "sentence" : "In which films directed by Garry Marshall was Julia Roberts starring?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Julia_Roberts> ; <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Garry_Marshall> }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Julia_Julia> <http://dbpedia.org/ontology/director> ?Answer .}" ]
  }, {
    "id" : "64",
    "status" : "N",
    "sentence" : "Give me all soccer clubs in the Premier League.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerClub> ; <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/Premier_League> }",
    "sparqls" : [ ]
  }, {
    "id" : "65",
    "status" : "N",
    "sentence" : "What is the highest place of the Urals?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ural_Mountains> <http://dbpedia.org/property/highest> ?uri }",
    "sparqls" : [ ]
  }, {
    "id" : "66",
    "status" : "WORK",
    "sentence" : "Who is the governor of Wyoming?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Wyoming> <http://dbpedia.org/property/governor> ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Arg <http://dbpedia.org/ontology/governor> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Wyoming> <http://dbpedia.org/property/governor> ?Answer .}" ]
  }, {
    "id" : "67",
    "status" : "WORK",
    "sentence" : "Where did the architect of the Eiffel Tower study?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Eiffel_Tower> <http://dbpedia.org/ontology/architect> ?x . ?x <http://dbpedia.org/property/almaMater> ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Eiffel_Tower> <http://dbpedia.org/ontology/architect> ?Answer .}" ]
  }, {
    "id" : "68",
    "status" : "N",
    "sentence" : "Give me all world heritage sites designated within the past two years.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WorldHeritageSite> . { ?uri <http://dbpedia.org/property/year> '2013'^^xsd:integer . } UNION { ?uri <http://dbpedia.org/property/year> '2014'^^xsd:integer . } }",
    "sparqls" : [ ]
  }, {
    "id" : "69",
    "status" : "WORK",
    "sentence" : "Give me all actors who were born in Paris after 1950.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Actor> . ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Paris> . ?uri <http://dbpedia.org/ontology/birthDate> ?date . FILTER ( ?date >= xsd:dateTime('1950-12-31T00:00:00Z')) }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Actor>. ?Answer <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Paris> .}" ]
  }, {
    "id" : "70",
    "status" : "WORK",
    "sentence" : "Which movies star both Liz Taylor and Richard Burton?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Elizabeth_Taylor> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Richard_Burton> }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Film>. <http://dbpedia.org/resource/Burton_&_Taylor> <http://dbpedia.org/ontology/starring> ?Answer .}" ]
  }, {
    "id" : "71",
    "status" : "WORK",
    "sentence" : "Give me all Australian nonprofit organizations.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/type> <http://dbpedia.org/resource/Nonprofit_organization> { ?uri <http://dbpedia.org/ontology/locationCountry> <http://dbpedia.org/resource/Australia> } UNION { ?uri <http://dbpedia.org/ontology/location> ?x . ?x <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Australia> } }",
    "sparqls" : [ "SELECT DISTINCT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/resource/Nonprofit_organization> ; <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/Australia> }" ]
  }, {
    "id" : "72",
    "status" : "WORK",
    "sentence" : "Which pope succeeded John Paul II?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pope_John_Paul_II> <http://dbpedia.org/property/successor> ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Pope>. <http://dbpedia.org/resource/John_Paul_Stevens> <http://dbpedia.org/ontology/successor> ?Answer .}" ]
  }, {
    "id" : "73",
    "status" : "N",
    "sentence" : "Give me all ESA astronauts.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Astronaut> ; <http://dbpedia.org/property/type> <http://dbpedia.org/resource/European_Space_Agency> }",
    "sparqls" : [ ]
  }, {
    "id" : "74",
    "status" : "N",
    "sentence" : "Who was president of Pakistan in 1978?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/title> <http://dbpedia.org/resource/President_of_Pakistan> ; <http://dbpedia.org/property/years> 1978 }",
    "sparqls" : [ ]
  }, {
    "id" : "75",
    "status" : "N",
    "sentence" : "Who is the owner of Rolls-Royce?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Rolls-Royce_Motors> <http://dbpedia.org/ontology/owner> ?uri }",
    "sparqls" : [ ]
  }, {
    "id" : "76",
    "status" : "WORK",
    "sentence" : "How many museums does Paris have?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Museum> ; <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Paris> }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Museum>. <http://dbpedia.org/resource/Théâtre_de_Paris> <http://dbpedia.org/ontology/seatingCapacity> ?Answer .}" ]
  }, {
    "id" : "77",
    "status" : "N",
    "sentence" : "Where was JFK assassinated?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_F._Kennedy> <http://dbpedia.org/ontology/deathPlace> ?uri }",
    "sparqls" : [ ]
  }, {
    "id" : "78",
    "status" : "N",
    "sentence" : "Give me all federal chancellors of Germany.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Person> { ?uri <http://dbpedia.org/ontology/office> \"Chancellor of Germany\" } UNION { ?uri <http://dbpedia.org/property/office> <http://dbpedia.org/resource/Chancellor_of_Germany> } }",
    "sparqls" : [ ]
  }, {
    "id" : "79",
    "status" : "N",
    "sentence" : "Show me everyone who was born on Halloween.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Person> { ?uri <http://dbpedia.org/ontology/birthDate> ?date } UNION { ?uri <http://dbpedia.org/property/birthDate> ?date } <http://dbpedia.org/resource/Halloween> <http://dbpedia.org/property/date> ?date }",
    "sparqls" : [ ]
  }, {
    "id" : "80",
    "status" : "WORK",
    "sentence" : "Which beer originated in Ireland?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/type> <http://dbpedia.org/resource/Beer> ; <http://dbpedia.org/ontology/origin> <http://dbpedia.org/resource/Beer_in_Ireland> }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Ireland_Brook_(New_Jersey)> <http://dbpedia.org/ontology/sourceCountry> ?Answer .}" ]
  }, {
    "id" : "81",
    "status" : "N",
    "sentence" : "To which countries does the Himalayan mountain system extend?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Himalayas> <http://dbpedia.org/ontology/country> ?uri }",
    "sparqls" : [ ]
  }, {
    "id" : "82",
    "status" : "WORK",
    "sentence" : "Which actors were born in Germany?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Actor> { ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Germany> } UNION { ?uri <http://dbpedia.org/ontology/birthPlace> ?place . ?place <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Germany> } }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Actor>. ?Answer <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Germany> .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Actor>. <http://dbpedia.org/resource/Willie_Germany> <http://dbpedia.org/ontology/birthDate> ?Answer .}", "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Actor>. ?Arg <http://dbpedia.org/ontology/birthYear> ?Answer .}" ]
  }, {
    "id" : "83",
    "status" : "N",
    "sentence" : "How much carbs does peanut butter have?",
    "givenSparql" : "SELECT DISTINCT ?carbs WHERE { <http://dbpedia.org/resource/Peanut_butter> <http://dbpedia.org/property/carbs> ?carbs }",
    "sparqls" : [ ]
  }, {
    "id" : "84",
    "status" : "WORK",
    "sentence" : "Who produced the most films?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?film <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film> . ?film <http://dbpedia.org/ontology/producer> ?uri . } ORDER BY DESC(COUNT(?film)) OFFSET 0 LIMIT 1",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Arg <http://dbpedia.org/ontology/executiveProducer> ?Answer .}", "SELECT ?Answer WHERE { ?Arg <http://dbpedia.org/ontology/manufacturer> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Music_for_Films> <http://dbpedia.org/ontology/producer> ?Answer .}" ]
  }, {
    "id" : "85",
    "status" : "N",
    "sentence" : "How many employees does Google have?",
    "givenSparql" : "SELECT DISTINCT ?num WHERE { <http://dbpedia.org/resource/Google> <http://dbpedia.org/ontology/numberOfEmployees> ?num }",
    "sparqls" : [ ]
  }, {
    "id" : "86",
    "status" : "WORK",
    "sentence" : "Give me all actors who were born in Berlin.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Actor> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Berlin> }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://dbpedia.org/ontology/Actor>. ?Answer <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Berlin> .}" ]
  }, {
    "id" : "87",
    "status" : "WORK",
    "sentence" : "Who created Goofy?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Goofy> <http://dbpedia.org/ontology/creator> ?uri }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Arg <http://dbpedia.org/ontology/author> ?Answer .}", "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Goofy> <http://dbpedia.org/ontology/creator> ?Answer .}", "SELECT ?Answer WHERE { ?Arg <http://dbpedia.org/ontology/notableWork> ?Answer .}" ]
  }, {
    "id" : "88",
    "status" : "N",
    "sentence" : "Which music albums contain the song Last Christmas?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?single <http://dbpedia.org/ontology/album> ?uri ; <http://www.w3.org/2000/01/rdf-schema#label> \"Last Christmas\"@en }",
    "sparqls" : [ ]
  }, {
    "id" : "89",
    "status" : "N",
    "sentence" : "When was Alberta admitted as province?",
    "givenSparql" : "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Alberta> <http://dbpedia.org/property/admittancedate> ?date }",
    "sparqls" : [ ]
  }, {
    "id" : "90",
    "status" : "WORK",
    "sentence" : "How many missions does the Soyuz programme have?",
    "givenSparql" : "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/property/programme> <http://dbpedia.org/resource/Soyuz_programme> }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/The_Whitebrook> <http://dbpedia.org/ontology/seatingCapacity> ?Answer .}" ]
  }, {
    "id" : "91",
    "status" : "WORK",
    "sentence" : "Give me all the TV shows with Neil Patrick Harris.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/TelevisionShow> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Neil_Patrick_Harris> }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Walk_the_Walk> <http://dbpedia.org/ontology/starring> ?Answer .}" ]
  }, {
    "id" : "92",
    "status" : "WORK",
    "sentence" : "When were the Hells Angels founded?",
    "givenSparql" : "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Hells_Angels> <http://dbpedia.org/property/founded> ?date }",
    "sparqls" : [ "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/formationDate> ?Arg .}", "SELECT ?Answer WHERE { ?Answer <http://dbpedia.org/ontology/foundingDate> ?Arg .}" ]
  }, {
    "id" : "93",
    "status" : "WORK",
    "sentence" : "What is the net income of Apple?",
    "givenSparql" : "SELECT DISTINCT ?ni WHERE { <http://dbpedia.org/resource/Apple_Inc.> <http://dbpedia.org/ontology/netIncome> ?ni }",
    "sparqls" : [ "SELECT ?Answer WHERE { <http://dbpedia.org/resource/Apple_Inc.> <http://dbpedia.org/ontology/netIncome> ?Answer .}" ]
  }, {
    "id" : "95",
    "status" : "N",
    "sentence" : "In which city was the former Dutch queen Juliana buried?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Juliana_of_the_Netherlands> <http://dbpedia.org/property/burialPlace> ?uri . ?uri a <http://dbpedia.org/ontology/Settlement> }",
    "sparqls" : [ ]
  }, {
    "id" : "96",
    "status" : "N",
    "sentence" : "List all the musicals with music by Leonard Bernstein.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Musical> ; <http://dbpedia.org/ontology/musicBy> <http://dbpedia.org/resource/Leonard_Bernstein> }",
    "sparqls" : [ ]
  }, {
    "id" : "97",
    "status" : "N",
    "sentence" : "Give me all companies in the advertising industry.",
    "givenSparql" : "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Company> { ?uri <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Advertising> } UNION { ?uri <http://dbpedia.org/ontology/industry> ?industry FILTER regex(?industry, \"advertising\", \"i\") } }",
    "sparqls" : [ ]
  }, {
    "id" : "98",
    "status" : "N",
    "sentence" : "What is the largest metropolitan area in Washington state?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Washington_(state)> <http://dbpedia.org/property/largestmetro> ?uri }",
    "sparqls" : [ ]
  }, {
    "id" : "99",
    "status" : "N",
    "sentence" : "Who killed John Lennon?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Person> ; <http://dbpedia.org/property/conviction> <http://dbpedia.org/resource/Death_of_John_Lennon> }",
    "sparqls" : [ ]
  }, {
    "id" : "100",
    "status" : "N",
    "sentence" : "Which writers studied in Istanbul?",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Writer> { ?uri <http://dbpedia.org/ontology/almaMater> ?x } UNION { ?uri <http://dbpedia.org/ontology/education> ?x } { ?x <http://dbpedia.org/ontology/city> <http://dbpedia.org/resource/Istanbul> } UNION { ?x <http://dbpedia.org/property/city> <http://dbpedia.org/resource/Istanbul> } }",
    "sparqls" : [ ]
  }, {
    "id" : "101",
    "status" : "N",
    "sentence" : "Give me all Australian metalcore bands.",
    "givenSparql" : "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Band> ; <http://dbpedia.org/ontology/genre> <http://dbpedia.org/resource/Metalcore> { ?uri <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/Australia> } UNION { ?uri <http://dbpedia.org/ontology/hometown> ?h . ?h <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Australia> } }",
    "sparqls" : [ ]
  } ]
}